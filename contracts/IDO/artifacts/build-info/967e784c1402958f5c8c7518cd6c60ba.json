{
	"id": "967e784c1402958f5c8c7518cd6c60ba",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/IDO/SEAPreSale.sol": {
				"content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\n\ncontract SEAPreSale is Initializable, OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeMathUpgradeable for uint256;\n\n    address public alphaSEA;\n    address public DAOAddress;\n    address public usdc;\n\n    uint256 public minAmount;\n    uint256 public maxAmount;\n    uint256 public salePrice;\n    uint256 public startTimestamp;\n    uint256 public endTimestamp;\n    uint256 public toTalAmount;\n    uint256 public sellAmount;\n    uint256 public remainingPurchasesMaxAmt;\n\n    bool public saleStarted;\n\n    mapping(address => bool) public boughtSEA;\n    mapping(address => bool) public whiteListed;\n\n    function whiteListBuyers(address[] memory _buyers)\n        external\n        onlyOwner\n        returns (bool)\n    {\n        for (uint256 i; i < _buyers.length; i++) {\n            whiteListed[_buyers[i]] = true;\n        }\n        return true;\n    }\n\n    function initialize(\n        address _DAOAddress,\n        address _alphaSEA,\n        address _usdc,\n        uint256 _minAmount, //0\n        uint256 _maxAmount, //2000000000    2,000 usdc\n        uint256 _toTalAmount, //500000000000   500,000 usdc\n        uint256 _salePrice,\n        uint256 _startTimestamp,\n        uint256 _endTimestamp,\n        uint256 _remainingPurchasesMaxAmt\n    ) external initializer {\n        __Ownable_init();\n        alphaSEA = _alphaSEA;\n        usdc = _usdc;\n        salePrice = _salePrice;\n        startTimestamp = _startTimestamp;\n        endTimestamp = _endTimestamp;\n        DAOAddress = _DAOAddress;\n        minAmount = _minAmount;\n        maxAmount = _maxAmount;\n        toTalAmount = _toTalAmount;\n        remainingPurchasesMaxAmt = _remainingPurchasesMaxAmt;\n        saleStarted = true;\n    }\n\n    function SET(\n        address _DAOAddress,\n        address _alphaSEA,\n        address _usdc,\n        uint256 _minAmount,\n        uint256 _maxAmount,\n        uint256 _toTalAmount,\n        uint256 _salePrice,\n        uint256 _startTimestamp,\n        uint256 _endTimestamp,\n        uint256 _remainingPurchasesMaxAmt\n    ) external onlyOwner returns (bool) {\n        alphaSEA = _alphaSEA;\n\n        usdc = _usdc;\n\n        salePrice = _salePrice;\n\n        startTimestamp = _startTimestamp;\n        endTimestamp = _endTimestamp;\n\n        DAOAddress = _DAOAddress;\n\n        minAmount = _minAmount;\n\n        maxAmount = _maxAmount;\n\n        toTalAmount = _toTalAmount;\n\n        remainingPurchasesMaxAmt = _remainingPurchasesMaxAmt;\n\n        saleStarted = true;\n        return true;\n    }\n\n    function setStart() external onlyOwner returns (bool) {\n        saleStarted = !saleStarted;\n        return saleStarted;\n    }\n\n    function purchaseaSEA(uint256 _val) external returns (bool) {\n        require(_val >= minAmount, \"Below minimum allocation\");\n        require(_val <= maxAmount, \"More than allocation\");\n        sellAmount = sellAmount.add(_val);\n        require(\n            sellAmount <= toTalAmount,\n            \"The amount entered exceeds Fundraise Goal\"\n        );\n        require(saleStarted == true, \"Not started\");\n        require(boughtSEA[msg.sender] == false, \"Already participated\");\n        require(startTimestamp < block.timestamp, \"Not started yet\");\n\n        boughtSEA[msg.sender] = true;\n\n        if (endTimestamp < block.timestamp) {\n            require(_val <= remainingPurchasesMaxAmt, \"Exceeded IDO limit\");\n        } else {\n            require(whiteListed[msg.sender] == true, \"Not whitelisted\");\n            require(block.timestamp < endTimestamp, \"Sale over\");\n        }\n        IERC20Upgradeable(usdc).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _val\n        );\n        IERC20Upgradeable(usdc).safeTransfer(DAOAddress, _val);\n        uint256 _purchaseAmount = _calculateSaleQuote(_val);\n        IERC20Upgradeable(alphaSEA).safeTransfer(msg.sender, _purchaseAmount);\n        return true;\n    }\n\n    function _calculateSaleQuote(uint256 paymentAmount_)\n        internal\n        view\n        returns (uint256)\n    {\n        return uint256(1e18).mul(paymentAmount_).div(salePrice); //1e18 * 1e18 / 8e17\n    }\n\n    function calculateSaleQuote(uint256 paymentAmount_)\n        external\n        view\n        returns (uint256)\n    {\n        return _calculateSaleQuote(paymentAmount_);\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://272fdc13ea6d62470f1009a1adf0d28b67be2c75415e9f24eee38164dd69fb04\",\"dweb:/ipfs/QmfZDcxQEFdAi1AwMTHozZJrwFoUCEZnbcJcRhqmahuTBR\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x5f13da6a5f023d6e9b3e48a3690458bfceea5872c0e3ddf1b2b528133f87a992\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f10cded435297e67d3720adb22790ee7f8ab7f5d977a815e87f33560800819c\",\"dweb:/ipfs/QmeMx1jpSb66jrT1P184kTuh8p9FSqbYUXoVbXNdnJPqkf\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2125524ea896700181f25ee543d35a980b9477eaf13fd1878ae24be5dcc3ba75\",\"dweb:/ipfs/QmXw9DTW1t1UiTZanfESSJ6jm2xVSQpsdsdKnBTYeBnwqh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 760,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 124,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x5f13da6a5f023d6e9b3e48a3690458bfceea5872c0e3ddf1b2b528133f87a992\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f10cded435297e67d3720adb22790ee7f8ab7f5d977a815e87f33560800819c\",\"dweb:/ipfs/QmeMx1jpSb66jrT1P184kTuh8p9FSqbYUXoVbXNdnJPqkf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ff7fe6e13cf851da3cdc27c7c4c58249ca6a53765f1bb40a5b8ec87b1b84599\",\"dweb:/ipfs/QmZ7JzzhpEMBgk7p9TVzwXDduvJJQtZhQwF3R1vZ9EdgMP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"SafeERC20Upgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":667:4025  library SafeERC20Upgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":667:4025  library SafeERC20Upgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202f2aa2e70f4032ea7ece6bc3109703f1ffd6dbfe4036e1b35c6d58456afd9ec564736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202f2aa2e70f4032ea7ece6bc3109703f1ffd6dbfe4036e1b35c6d58456afd9ec564736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F 0x2A LOG2 0xE7 0xF BLOCKHASH ORIGIN 0xEA PUSH31 0xCE6BC3109703F1FFD6DBFE4036E1B35C6D58456AFD9EC564736F6C63430008 STOP STOP CALLER ",
							"sourceMap": "667:3358:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;667:3358:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202f2aa2e70f4032ea7ece6bc3109703f1ffd6dbfe4036e1b35c6d58456afd9ec564736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F 0x2A LOG2 0xE7 0xF BLOCKHASH ORIGIN 0xEA PUSH31 0xCE6BC3109703F1FFD6DBFE4036E1B35C6D58456AFD9EC564736F6C63430008 STOP STOP CALLER ",
							"sourceMap": "667:3358:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)": "infinite",
								"safeApprove(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeTransfer(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202f2aa2e70f4032ea7ece6bc3109703f1ffd6dbfe4036e1b35c6d58456afd9ec564736f6c63430008000033",
									".code": [
										{
											"begin": 667,
											"end": 4025,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ff7fe6e13cf851da3cdc27c7c4c58249ca6a53765f1bb40a5b8ec87b1b84599\",\"dweb:/ipfs/QmZ7JzzhpEMBgk7p9TVzwXDduvJJQtZhQwF3R1vZ9EdgMP\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"keccak256\":\"0x7090f66700fbb4955abf72ba8e06e4a1eafb5bae1423032102dcbb2172da5543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb3c830201b945b96b0f7db921aeed52a7a40382ddab6466b5a97ecdd5a1571a\",\"dweb:/ipfs/QmcMWcz6DveTkqXE3EWwf3A9xPXhdUUZTXgKoSvzFyeYe9\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e51755c6934703b61e7edb7d3edef985f429be6bef384b15e1b616ea65176934\",\"dweb:/ipfs/QmQVb4hBJcTMthp5hJquUy5tPsDwgiKQ8nGExckR75G88u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":179:6969  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":179:6969  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220365e5f40c94fc0135977103e57c2c3ff43fd9677a246f2877f83ee01753f390a64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220365e5f40c94fc0135977103e57c2c3ff43fd9677a246f2877f83ee01753f390a64736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0x5E 0x5F BLOCKHASH 0xC9 0x4F 0xC0 SGT MSIZE PUSH24 0x103E57C2C3FF43FD9677A246F2877F83EE01753F390A6473 PUSH16 0x6C634300080000330000000000000000 ",
							"sourceMap": "179:6790:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;179:6790:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220365e5f40c94fc0135977103e57c2c3ff43fd9677a246f2877f83ee01753f390a64736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0x5E 0x5F BLOCKHASH 0xC9 0x4F 0xC0 SGT MSIZE PUSH24 0x103E57C2C3FF43FD9677A246F2877F83EE01753F390A6473 PUSH16 0x6C634300080000330000000000000000 ",
							"sourceMap": "179:6790:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220365e5f40c94fc0135977103e57c2c3ff43fd9677a246f2877f83ee01753f390a64736f6c63430008000033",
									".code": [
										{
											"begin": 179,
											"end": 6969,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e51755c6934703b61e7edb7d3edef985f429be6bef384b15e1b616ea65176934\",\"dweb:/ipfs/QmQVb4hBJcTMthp5hJquUy5tPsDwgiKQ8nGExckR75G88u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x5f13da6a5f023d6e9b3e48a3690458bfceea5872c0e3ddf1b2b528133f87a992\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f10cded435297e67d3720adb22790ee7f8ab7f5d977a815e87f33560800819c\",\"dweb:/ipfs/QmeMx1jpSb66jrT1P184kTuh8p9FSqbYUXoVbXNdnJPqkf\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2125524ea896700181f25ee543d35a980b9477eaf13fd1878ae24be5dcc3ba75\",\"dweb:/ipfs/QmXw9DTW1t1UiTZanfESSJ6jm2xVSQpsdsdKnBTYeBnwqh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 760,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
				"SafeMathUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":467:6779  library SafeMathUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":467:6779  library SafeMathUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ab1364f0ccafff0970bba1dd59bc3afe606ccc747e9960feaad4caf7d294459964736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab1364f0ccafff0970bba1dd59bc3afe606ccc747e9960feaad4caf7d294459964736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB SGT PUSH5 0xF0CCAFFF09 PUSH17 0xBBA1DD59BC3AFE606CCC747E9960FEAAD4 0xCA 0xF7 0xD2 SWAP5 GASLIMIT SWAP10 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "467:6312:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;467:6312:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab1364f0ccafff0970bba1dd59bc3afe606ccc747e9960feaad4caf7d294459964736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB SGT PUSH5 0xF0CCAFFF09 PUSH17 0xBBA1DD59BC3AFE606CCC747E9960FEAAD4 0xCA 0xF7 0xD2 SWAP5 GASLIMIT SWAP10 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "467:6312:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ab1364f0ccafff0970bba1dd59bc3afe606ccc747e9960feaad4caf7d294459964736f6c63430008000033",
									".code": [
										{
											"begin": 467,
											"end": 6779,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":\"SafeMathUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"keccak256\":\"0x23ee0c2d7bcce5d09d40f3a14c91f29000d3a83b8a9c26440cd1b3748a93ea47\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://62f7975f651c46b43acd346786d7cf5f78027d21a2dd694377b271ba97209ada\",\"dweb:/ipfs/QmNS7ppgMivJCJgu6JzEN8MvjWM7ctsDREcNyHTcZzYXRG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/IDO/SEAPreSale.sol": {
				"SEAPreSale": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "DAOAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_DAOAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_alphaSEA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_usdc",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_minAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_maxAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_toTalAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_salePrice",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_startTimestamp",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_endTimestamp",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_remainingPurchasesMaxAmt",
									"type": "uint256"
								}
							],
							"name": "SET",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "alphaSEA",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "boughtSEA",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "paymentAmount_",
									"type": "uint256"
								}
							],
							"name": "calculateSaleQuote",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "endTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_DAOAddress",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_alphaSEA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_usdc",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_minAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_maxAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_toTalAmount",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_salePrice",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_startTimestamp",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_endTimestamp",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_remainingPurchasesMaxAmt",
									"type": "uint256"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "minAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_val",
									"type": "uint256"
								}
							],
							"name": "purchaseaSEA",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "remainingPurchasesMaxAmt",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "salePrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "saleStarted",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "sellAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "setStart",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "toTalAmount",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "usdc",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address[]",
									"name": "_buyers",
									"type": "address[]"
								}
							],
							"name": "whiteListBuyers",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "whiteListed",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/IDO/SEAPreSale.sol\":473:4743  contract SEAPreSale is Initializable, OwnableUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/IDO/SEAPreSale.sol\":473:4743  contract SEAPreSale is Initializable, OwnableUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x9e623ae4\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xe58bf43a\n      gt\n      tag_27\n      jumpi\n      dup1\n      0xe58bf43a\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xe6fd48bc\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xef8cdaa4\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xf51f96dd\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xfa0fca84\n      eq\n      tag_25\n      jumpi\n      jump(tag_2)\n    tag_27:\n      dup1\n      0x9e623ae4\n      eq\n      tag_14\n      jumpi\n      dup1\n      0xa85adeab\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xb2292994\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xd392eab1\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xd45fc1a9\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xe3bef142\n      eq\n      tag_19\n      jumpi\n      jump(tag_2)\n    tag_26:\n      dup1\n      0x492cc4e3\n      gt\n      tag_28\n      jumpi\n      dup1\n      0x492cc4e3\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x5c474f9e\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x5f48f393\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x9b2cb5d8\n      eq\n      tag_13\n      jumpi\n      jump(tag_2)\n    tag_28:\n      dup1\n      0x1eef7659\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x2092c12b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x35975a37\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x3e413bee\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x3f407b84\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/IDO/SEAPreSale.sol\":1114:1360  function whiteListBuyers(address[] memory _buyers)... */\n    tag_3:\n      tag_29\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_34\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/IDO/SEAPreSale.sol\":4570:4741  function calculateSaleQuote(uint256 paymentAmount_)... */\n    tag_4:\n      tag_35\n      tag_36\n      calldatasize\n      0x04\n      tag_37\n      jump\t// in\n    tag_36:\n      tag_38\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_40\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":2985:3110  function setStart() external onlyOwner returns (bool) {... */\n    tag_5:\n      tag_29\n      tag_42\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":694:713  address public usdc */\n    tag_6:\n      tag_44\n      tag_45\n      jump\t// in\n    tag_44:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_47\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":910:935  uint256 public sellAmount */\n    tag_7:\n      tag_35\n      tag_49\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":634:657  address public alphaSEA */\n    tag_8:\n      tag_44\n      tag_52\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":987:1010  bool public saleStarted */\n    tag_9:\n      tag_29\n      tag_55\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":750:774  uint256 public maxAmount */\n    tag_10:\n      tag_35\n      tag_58\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1934:2035  function renounceOwnership() public virtual onlyOwner {... */\n    tag_11:\n      tag_60\n      tag_61\n      jump\t// in\n    tag_60:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1302:1387  function owner() public view virtual returns (address) {... */\n    tag_12:\n      tag_44\n      tag_63\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":720:744  uint256 public minAmount */\n    tag_13:\n      tag_35\n      tag_66\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":878:904  uint256 public toTalAmount */\n    tag_14:\n      tag_35\n      tag_69\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":845:872  uint256 public endTimestamp */\n    tag_15:\n      tag_35\n      tag_72\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":3116:4352  function purchaseaSEA(uint256 _val) external returns (bool) {... */\n    tag_16:\n      tag_29\n      tag_75\n      calldatasize\n      0x04\n      tag_37\n      jump\t// in\n    tag_75:\n      tag_76\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":663:688  address public DAOAddress */\n    tag_17:\n      tag_44\n      tag_79\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":1366:2195  function initialize(... */\n    tag_18:\n      tag_60\n      tag_82\n      calldatasize\n      0x04\n      tag_83\n      jump\t// in\n    tag_82:\n      tag_84\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":2201:2979  function SET(... */\n    tag_19:\n      tag_29\n      tag_86\n      calldatasize\n      0x04\n      tag_83\n      jump\t// in\n    tag_86:\n      tag_87\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":941:980  uint256 public remainingPurchasesMaxAmt */\n    tag_20:\n      tag_35\n      tag_90\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":810:839  uint256 public startTimestamp */\n    tag_21:\n      tag_35\n      tag_93\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":1017:1058  mapping(address => bool) public boughtSEA */\n    tag_22:\n      tag_29\n      tag_96\n      calldatasize\n      0x04\n      tag_97\n      jump\t// in\n    tag_96:\n      tag_98\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2184:2382  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_23:\n      tag_60\n      tag_101\n      calldatasize\n      0x04\n      tag_97\n      jump\t// in\n    tag_101:\n      tag_102\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":780:804  uint256 public salePrice */\n    tag_24:\n      tag_35\n      tag_104\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":1064:1107  mapping(address => bool) public whiteListed */\n    tag_25:\n      tag_29\n      tag_107\n      calldatasize\n      0x04\n      tag_97\n      jump\t// in\n    tag_107:\n      tag_108\n      jump\t// in\n        /* \"contracts/IDO/SEAPreSale.sol\":1114:1360  function whiteListBuyers(address[] memory _buyers)... */\n    tag_32:\n        /* \"contracts/IDO/SEAPreSale.sol\":1217:1221  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_111\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_112\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_111:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_113\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_63\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_113:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_114\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_116\n      jump\t// in\n    tag_115:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_114:\n        /* \"contracts/IDO/SEAPreSale.sol\":1242:1251  uint256 i */\n      0x00\n        /* \"contracts/IDO/SEAPreSale.sol\":1237:1333  for (uint256 i; i < _buyers.length; i++) {... */\n    tag_118:\n        /* \"contracts/IDO/SEAPreSale.sol\":1257:1264  _buyers */\n      dup3\n        /* \"contracts/IDO/SEAPreSale.sol\":1257:1271  _buyers.length */\n      mload\n        /* \"contracts/IDO/SEAPreSale.sol\":1253:1254  i */\n      dup2\n        /* \"contracts/IDO/SEAPreSale.sol\":1253:1271  i < _buyers.length */\n      lt\n        /* \"contracts/IDO/SEAPreSale.sol\":1237:1333  for (uint256 i; i < _buyers.length; i++) {... */\n      iszero\n      tag_119\n      jumpi\n        /* \"contracts/IDO/SEAPreSale.sol\":1318:1322  true */\n      0x01\n        /* \"contracts/IDO/SEAPreSale.sol\":1292:1303  whiteListed */\n      0x72\n        /* \"contracts/IDO/SEAPreSale.sol\":1292:1315  whiteListed[_buyers[i]] */\n      0x00\n        /* \"contracts/IDO/SEAPreSale.sol\":1304:1311  _buyers */\n      dup6\n        /* \"contracts/IDO/SEAPreSale.sol\":1312:1313  i */\n      dup5\n        /* \"contracts/IDO/SEAPreSale.sol\":1304:1314  _buyers[i] */\n      dup2\n      mload\n      dup2\n      lt\n      tag_121\n      jumpi\n      mstore(0x00, shl(0xe0, 0x4e487b71))\n      mstore(0x04, 0x32)\n      revert(0x00, 0x24)\n    tag_121:\n      0x20\n      swap1\n      dup2\n      mul\n      swap2\n      swap1\n      swap2\n      add\n      dup2\n      add\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/IDO/SEAPreSale.sol\":1292:1315  whiteListed[_buyers[i]] */\n      and\n      dup3\n      mstore\n      dup2\n      add\n      swap2\n      swap1\n      swap2\n      mstore\n      0x40\n      add\n      0x00\n      keccak256\n        /* \"contracts/IDO/SEAPreSale.sol\":1292:1322  whiteListed[_buyers[i]] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap2\n      iszero\n      iszero\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":1273:1276  i++ */\n      dup1\n      tag_122\n      dup2\n      tag_123\n      jump\t// in\n    tag_122:\n      swap2\n      pop\n      pop\n        /* \"contracts/IDO/SEAPreSale.sol\":1237:1333  for (uint256 i; i < _buyers.length; i++) {... */\n      jump(tag_118)\n    tag_119:\n      pop\n        /* \"contracts/IDO/SEAPreSale.sol\":1349:1353  true */\n      0x01\n        /* \"contracts/IDO/SEAPreSale.sol\":1342:1353  return true */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1584:1585  _ */\n    tag_117:\n        /* \"contracts/IDO/SEAPreSale.sol\":1114:1360  function whiteListBuyers(address[] memory _buyers)... */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":4570:4741  function calculateSaleQuote(uint256 paymentAmount_)... */\n    tag_38:\n        /* \"contracts/IDO/SEAPreSale.sol\":4669:4676  uint256 */\n      0x00\n        /* \"contracts/IDO/SEAPreSale.sol\":4699:4734  _calculateSaleQuote(paymentAmount_) */\n      tag_125\n        /* \"contracts/IDO/SEAPreSale.sol\":4719:4733  paymentAmount_ */\n      dup3\n        /* \"contracts/IDO/SEAPreSale.sol\":4699:4718  _calculateSaleQuote */\n      tag_126\n        /* \"contracts/IDO/SEAPreSale.sol\":4699:4734  _calculateSaleQuote(paymentAmount_) */\n      jump\t// in\n    tag_125:\n        /* \"contracts/IDO/SEAPreSale.sol\":4692:4734  return _calculateSaleQuote(paymentAmount_) */\n      swap3\n        /* \"contracts/IDO/SEAPreSale.sol\":4570:4741  function calculateSaleQuote(uint256 paymentAmount_)... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":2985:3110  function setStart() external onlyOwner returns (bool) {... */\n    tag_42:\n        /* \"contracts/IDO/SEAPreSale.sol\":3033:3037  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_128\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_112\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_128:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_129\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_63\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_129:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_130\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_116\n      jump\t// in\n    tag_130:\n      pop\n        /* \"contracts/IDO/SEAPreSale.sol\":3064:3075  saleStarted */\n      0x70\n      dup1\n      sload\n      not(0xff)\n        /* \"contracts/IDO/SEAPreSale.sol\":3049:3075  saleStarted = !saleStarted */\n      dup2\n      and\n        /* \"contracts/IDO/SEAPreSale.sol\":3064:3075  saleStarted */\n      0xff\n      swap2\n      dup3\n      and\n        /* \"contracts/IDO/SEAPreSale.sol\":3063:3075  !saleStarted */\n      iszero\n        /* \"contracts/IDO/SEAPreSale.sol\":3049:3075  saleStarted = !saleStarted */\n      or\n      swap2\n      dup3\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":3092:3103  saleStarted */\n      and\n        /* \"contracts/IDO/SEAPreSale.sol\":2985:3110  function setStart() external onlyOwner returns (bool) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":694:713  address public usdc */\n    tag_45:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x67))\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":910:935  uint256 public sellAmount */\n    tag_49:\n      sload(0x6e)\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":634:657  address public alphaSEA */\n    tag_52:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x65))\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":987:1010  bool public saleStarted */\n    tag_55:\n      and(0xff, sload(0x70))\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":750:774  uint256 public maxAmount */\n    tag_58:\n      sload(0x69)\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1934:2035  function renounceOwnership() public virtual onlyOwner {... */\n    tag_61:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_134\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_112\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_134:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_135\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_63\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_135:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_136\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_116\n      jump\t// in\n    tag_136:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1998:2028  _transferOwnership(address(0)) */\n      tag_139\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2025:2026  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1998:2016  _transferOwnership */\n      tag_140\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1998:2028  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_139:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1934:2035  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1302:1387  function owner() public view virtual returns (address) {... */\n    tag_63:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1374:1380  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1302:1387  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":720:744  uint256 public minAmount */\n    tag_66:\n      sload(0x68)\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":878:904  uint256 public toTalAmount */\n    tag_69:\n      sload(0x6d)\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":845:872  uint256 public endTimestamp */\n    tag_72:\n      sload(0x6c)\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":3116:4352  function purchaseaSEA(uint256 _val) external returns (bool) {... */\n    tag_76:\n        /* \"contracts/IDO/SEAPreSale.sol\":3170:3174  bool */\n      0x00\n        /* \"contracts/IDO/SEAPreSale.sol\":3202:3211  minAmount */\n      sload(0x68)\n        /* \"contracts/IDO/SEAPreSale.sol\":3194:3198  _val */\n      dup3\n        /* \"contracts/IDO/SEAPreSale.sol\":3194:3211  _val >= minAmount */\n      lt\n      iszero\n        /* \"contracts/IDO/SEAPreSale.sol\":3186:3240  require(_val >= minAmount, \"Below minimum allocation\") */\n      tag_143\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_145\n      jump\t// in\n    tag_143:\n        /* \"contracts/IDO/SEAPreSale.sol\":3266:3275  maxAmount */\n      sload(0x69)\n        /* \"contracts/IDO/SEAPreSale.sol\":3258:3262  _val */\n      dup3\n        /* \"contracts/IDO/SEAPreSale.sol\":3258:3275  _val <= maxAmount */\n      gt\n      iszero\n        /* \"contracts/IDO/SEAPreSale.sol\":3250:3300  require(_val <= maxAmount, \"More than allocation\") */\n      tag_146\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_148\n      jump\t// in\n    tag_146:\n        /* \"contracts/IDO/SEAPreSale.sol\":3323:3333  sellAmount */\n      sload(0x6e)\n        /* \"contracts/IDO/SEAPreSale.sol\":3323:3343  sellAmount.add(_val) */\n      tag_149\n      swap1\n        /* \"contracts/IDO/SEAPreSale.sol\":3338:3342  _val */\n      dup4\n        /* \"contracts/IDO/SEAPreSale.sol\":3323:3337  sellAmount.add */\n      tag_150\n        /* \"contracts/IDO/SEAPreSale.sol\":3323:3343  sellAmount.add(_val) */\n      jump\t// in\n    tag_149:\n        /* \"contracts/IDO/SEAPreSale.sol\":3310:3320  sellAmount */\n      0x6e\n        /* \"contracts/IDO/SEAPreSale.sol\":3310:3343  sellAmount = sellAmount.add(_val) */\n      dup2\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":3388:3399  toTalAmount */\n      sload(0x6d)\n      lt\n        /* \"contracts/IDO/SEAPreSale.sol\":3374:3399  sellAmount <= toTalAmount */\n      iszero\n        /* \"contracts/IDO/SEAPreSale.sol\":3353:3466  require(... */\n      tag_151\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_153\n      jump\t// in\n    tag_151:\n        /* \"contracts/IDO/SEAPreSale.sol\":3484:3495  saleStarted */\n      and(0xff, sload(0x70))\n        /* \"contracts/IDO/SEAPreSale.sol\":3484:3503  saleStarted == true */\n      iszero\n      iszero\n        /* \"contracts/IDO/SEAPreSale.sol\":3484:3495  saleStarted */\n      0x01\n        /* \"contracts/IDO/SEAPreSale.sol\":3484:3503  saleStarted == true */\n      eq\n        /* \"contracts/IDO/SEAPreSale.sol\":3476:3519  require(saleStarted == true, \"Not started\") */\n      tag_154\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_156\n      jump\t// in\n    tag_154:\n        /* \"contracts/IDO/SEAPreSale.sol\":3547:3557  msg.sender */\n      caller\n        /* \"contracts/IDO/SEAPreSale.sol\":3537:3558  boughtSEA[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/IDO/SEAPreSale.sol\":3537:3546  boughtSEA */\n      0x71\n        /* \"contracts/IDO/SEAPreSale.sol\":3537:3558  boughtSEA[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/IDO/SEAPreSale.sol\":3537:3567  boughtSEA[msg.sender] == false */\n      iszero\n        /* \"contracts/IDO/SEAPreSale.sol\":3529:3592  require(boughtSEA[msg.sender] == false, \"Already participated\") */\n      tag_157\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_159\n      jump\t// in\n    tag_157:\n        /* \"contracts/IDO/SEAPreSale.sol\":3627:3642  block.timestamp */\n      timestamp\n        /* \"contracts/IDO/SEAPreSale.sol\":3610:3624  startTimestamp */\n      sload(0x6b)\n        /* \"contracts/IDO/SEAPreSale.sol\":3610:3642  startTimestamp < block.timestamp */\n      lt\n        /* \"contracts/IDO/SEAPreSale.sol\":3602:3662  require(startTimestamp < block.timestamp, \"Not started yet\") */\n      tag_160\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_162\n      jump\t// in\n    tag_160:\n        /* \"contracts/IDO/SEAPreSale.sol\":3683:3693  msg.sender */\n      caller\n        /* \"contracts/IDO/SEAPreSale.sol\":3673:3694  boughtSEA[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/IDO/SEAPreSale.sol\":3673:3682  boughtSEA */\n      0x71\n        /* \"contracts/IDO/SEAPreSale.sol\":3673:3694  boughtSEA[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"contracts/IDO/SEAPreSale.sol\":3673:3701  boughtSEA[msg.sender] = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/IDO/SEAPreSale.sol\":3697:3701  true */\n      0x01\n        /* \"contracts/IDO/SEAPreSale.sol\":3673:3701  boughtSEA[msg.sender] = true */\n      or\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":3716:3728  endTimestamp */\n      sload(0x6c)\n        /* \"contracts/IDO/SEAPreSale.sol\":3731:3746  block.timestamp */\n      timestamp\n      gt\n        /* \"contracts/IDO/SEAPreSale.sol\":3712:3992  if (endTimestamp < block.timestamp) {... */\n      iszero\n      tag_163\n      jumpi\n        /* \"contracts/IDO/SEAPreSale.sol\":3778:3802  remainingPurchasesMaxAmt */\n      sload(0x6f)\n        /* \"contracts/IDO/SEAPreSale.sol\":3770:3774  _val */\n      dup3\n        /* \"contracts/IDO/SEAPreSale.sol\":3770:3802  _val <= remainingPurchasesMaxAmt */\n      gt\n      iszero\n        /* \"contracts/IDO/SEAPreSale.sol\":3762:3825  require(_val <= remainingPurchasesMaxAmt, \"Exceeded IDO limit\") */\n      tag_164\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_166\n      jump\t// in\n    tag_164:\n        /* \"contracts/IDO/SEAPreSale.sol\":3712:3992  if (endTimestamp < block.timestamp) {... */\n      jump(tag_171)\n    tag_163:\n        /* \"contracts/IDO/SEAPreSale.sol\":3876:3886  msg.sender */\n      caller\n        /* \"contracts/IDO/SEAPreSale.sol\":3864:3887  whiteListed[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/IDO/SEAPreSale.sol\":3864:3875  whiteListed */\n      0x72\n        /* \"contracts/IDO/SEAPreSale.sol\":3864:3887  whiteListed[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n        /* \"contracts/IDO/SEAPreSale.sol\":3864:3895  whiteListed[msg.sender] == true */\n      iszero\n      iszero\n        /* \"contracts/IDO/SEAPreSale.sol\":3864:3887  whiteListed[msg.sender] */\n      0x01\n        /* \"contracts/IDO/SEAPreSale.sol\":3864:3895  whiteListed[msg.sender] == true */\n      eq\n        /* \"contracts/IDO/SEAPreSale.sol\":3856:3915  require(whiteListed[msg.sender] == true, \"Not whitelisted\") */\n      tag_168\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_170\n      jump\t// in\n    tag_168:\n        /* \"contracts/IDO/SEAPreSale.sol\":3955:3967  endTimestamp */\n      sload(0x6c)\n        /* \"contracts/IDO/SEAPreSale.sol\":3937:3952  block.timestamp */\n      timestamp\n        /* \"contracts/IDO/SEAPreSale.sol\":3937:3967  block.timestamp < endTimestamp */\n      lt\n        /* \"contracts/IDO/SEAPreSale.sol\":3929:3981  require(block.timestamp < endTimestamp, \"Sale over\") */\n      tag_171\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_173\n      jump\t// in\n    tag_171:\n        /* \"contracts/IDO/SEAPreSale.sol\":4019:4023  usdc */\n      sload(0x67)\n        /* \"contracts/IDO/SEAPreSale.sol\":4001:4120  IERC20Upgradeable(usdc).safeTransferFrom(... */\n      tag_174\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/IDO/SEAPreSale.sol\":4019:4023  usdc */\n      and\n        /* \"contracts/IDO/SEAPreSale.sol\":4055:4065  msg.sender */\n      caller\n        /* \"contracts/IDO/SEAPreSale.sol\":4087:4091  this */\n      address\n        /* \"contracts/IDO/SEAPreSale.sol\":4106:4110  _val */\n      dup6\n        /* \"contracts/IDO/SEAPreSale.sol\":4001:4041  IERC20Upgradeable(usdc).safeTransferFrom */\n      tag_175\n        /* \"contracts/IDO/SEAPreSale.sol\":4001:4120  IERC20Upgradeable(usdc).safeTransferFrom(... */\n      jump\t// in\n    tag_174:\n        /* \"contracts/IDO/SEAPreSale.sol\":4167:4177  DAOAddress */\n      sload(0x66)\n        /* \"contracts/IDO/SEAPreSale.sol\":4148:4152  usdc */\n      sload(0x67)\n        /* \"contracts/IDO/SEAPreSale.sol\":4130:4184  IERC20Upgradeable(usdc).safeTransfer(DAOAddress, _val) */\n      tag_176\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/IDO/SEAPreSale.sol\":4148:4152  usdc */\n      swap2\n      dup3\n      and\n      swap2\n        /* \"contracts/IDO/SEAPreSale.sol\":4167:4177  DAOAddress */\n      and\n        /* \"contracts/IDO/SEAPreSale.sol\":4179:4183  _val */\n      dup5\n        /* \"contracts/IDO/SEAPreSale.sol\":4130:4166  IERC20Upgradeable(usdc).safeTransfer */\n      tag_177\n        /* \"contracts/IDO/SEAPreSale.sol\":4130:4184  IERC20Upgradeable(usdc).safeTransfer(DAOAddress, _val) */\n      jump\t// in\n    tag_176:\n        /* \"contracts/IDO/SEAPreSale.sol\":4194:4217  uint256 _purchaseAmount */\n      0x00\n        /* \"contracts/IDO/SEAPreSale.sol\":4220:4245  _calculateSaleQuote(_val) */\n      tag_178\n        /* \"contracts/IDO/SEAPreSale.sol\":4240:4244  _val */\n      dup4\n        /* \"contracts/IDO/SEAPreSale.sol\":4220:4239  _calculateSaleQuote */\n      tag_126\n        /* \"contracts/IDO/SEAPreSale.sol\":4220:4245  _calculateSaleQuote(_val) */\n      jump\t// in\n    tag_178:\n        /* \"contracts/IDO/SEAPreSale.sol\":4273:4281  alphaSEA */\n      sload(0x65)\n        /* \"contracts/IDO/SEAPreSale.sol\":4194:4245  uint256 _purchaseAmount = _calculateSaleQuote(_val) */\n      swap1\n      swap2\n      pop\n        /* \"contracts/IDO/SEAPreSale.sol\":4255:4324  IERC20Upgradeable(alphaSEA).safeTransfer(msg.sender, _purchaseAmount) */\n      tag_179\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/IDO/SEAPreSale.sol\":4273:4281  alphaSEA */\n      and\n        /* \"contracts/IDO/SEAPreSale.sol\":4296:4306  msg.sender */\n      caller\n        /* \"contracts/IDO/SEAPreSale.sol\":4194:4245  uint256 _purchaseAmount = _calculateSaleQuote(_val) */\n      dup4\n        /* \"contracts/IDO/SEAPreSale.sol\":4255:4295  IERC20Upgradeable(alphaSEA).safeTransfer */\n      tag_177\n        /* \"contracts/IDO/SEAPreSale.sol\":4255:4324  IERC20Upgradeable(alphaSEA).safeTransfer(msg.sender, _purchaseAmount) */\n      jump\t// in\n    tag_179:\n      pop\n        /* \"contracts/IDO/SEAPreSale.sol\":4341:4345  true */\n      0x01\n      swap3\n        /* \"contracts/IDO/SEAPreSale.sol\":3116:4352  function purchaseaSEA(uint256 _val) external returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":663:688  address public DAOAddress */\n    tag_79:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x66))\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":1366:2195  function initialize(... */\n    tag_84:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:552  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n      tag_181\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":557:569  _initialized */\n      and(0xff, sload(0x00))\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":556:569  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n    tag_181:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":531:620  require(_initializing || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_182\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_184\n      jump\t// in\n    tag_182:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":631:650  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":654:667  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":653:667  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_185\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:724  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:731  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":727:731  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n    tag_185:\n        /* \"contracts/IDO/SEAPreSale.sol\":1784:1800  __Ownable_init() */\n      tag_187\n        /* \"contracts/IDO/SEAPreSale.sol\":1784:1798  __Ownable_init */\n      tag_188\n        /* \"contracts/IDO/SEAPreSale.sol\":1784:1800  __Ownable_init() */\n      jump\t// in\n    tag_187:\n        /* \"contracts/IDO/SEAPreSale.sol\":1810:1818  alphaSEA */\n      0x65\n        /* \"contracts/IDO/SEAPreSale.sol\":1810:1830  alphaSEA = _alphaSEA */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup14\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap3\n      dup4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":1840:1844  usdc */\n      0x67\n        /* \"contracts/IDO/SEAPreSale.sol\":1840:1852  usdc = _usdc */\n      dup1\n      sload\n      dup13\n      dup5\n      and\n      swap1\n      dup4\n      and\n      or\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":1862:1871  salePrice */\n      0x6a\n        /* \"contracts/IDO/SEAPreSale.sol\":1862:1884  salePrice = _salePrice */\n      dup8\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":1894:1908  startTimestamp */\n      0x6b\n        /* \"contracts/IDO/SEAPreSale.sol\":1894:1926  startTimestamp = _startTimestamp */\n      dup7\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":1936:1948  endTimestamp */\n      0x6c\n        /* \"contracts/IDO/SEAPreSale.sol\":1936:1964  endTimestamp = _endTimestamp */\n      dup6\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":1974:1984  DAOAddress */\n      0x66\n        /* \"contracts/IDO/SEAPreSale.sol\":1974:1998  DAOAddress = _DAOAddress */\n      dup1\n      sload\n      swap3\n      dup15\n      and\n      swap3\n      swap1\n      swap2\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2008:2017  minAmount */\n      0x68\n        /* \"contracts/IDO/SEAPreSale.sol\":2008:2030  minAmount = _minAmount */\n      dup9\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2040:2049  maxAmount */\n      0x69\n        /* \"contracts/IDO/SEAPreSale.sol\":2040:2062  maxAmount = _maxAmount */\n      dup8\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2072:2083  toTalAmount */\n      0x6d\n        /* \"contracts/IDO/SEAPreSale.sol\":2072:2098  toTalAmount = _toTalAmount */\n      dup7\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2108:2132  remainingPurchasesMaxAmt */\n      0x6f\n        /* \"contracts/IDO/SEAPreSale.sol\":2108:2160  remainingPurchasesMaxAmt = _remainingPurchasesMaxAmt */\n      dup3\n      swap1\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2170:2181  saleStarted */\n      0x70\n        /* \"contracts/IDO/SEAPreSale.sol\":2170:2188  saleStarted = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"contracts/IDO/SEAPreSale.sol\":1810:1830  alphaSEA = _alphaSEA */\n      0x01\n        /* \"contracts/IDO/SEAPreSale.sol\":2170:2188  saleStarted = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":797:863  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_189\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":847:852  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":831:852  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":797:863  if (isTopLevelCall) {... */\n    tag_189:\n        /* \"contracts/IDO/SEAPreSale.sol\":1366:2195  function initialize(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":2201:2979  function SET(... */\n    tag_87:\n        /* \"contracts/IDO/SEAPreSale.sol\":2548:2552  bool */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_191\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_112\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_191:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_192\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_63\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_192:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_193\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_116\n      jump\t// in\n    tag_193:\n      pop\n        /* \"contracts/IDO/SEAPreSale.sol\":2564:2572  alphaSEA */\n      0x65\n        /* \"contracts/IDO/SEAPreSale.sol\":2564:2584  alphaSEA = _alphaSEA */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap1\n      dup2\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap12\n      dup13\n      and\n      or\n      swap1\n      swap2\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2595:2599  usdc */\n      0x67\n        /* \"contracts/IDO/SEAPreSale.sol\":2595:2607  usdc = _usdc */\n      dup1\n      sload\n      dup3\n      and\n      swap10\n      dup12\n      and\n      swap10\n      swap1\n      swap10\n      or\n      swap1\n      swap9\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2618:2627  salePrice */\n      0x6a\n        /* \"contracts/IDO/SEAPreSale.sol\":2618:2640  salePrice = _salePrice */\n      swap4\n      swap1\n      swap4\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2651:2665  startTimestamp */\n      0x6b\n        /* \"contracts/IDO/SEAPreSale.sol\":2651:2683  startTimestamp = _startTimestamp */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2693:2705  endTimestamp */\n      0x6c\n        /* \"contracts/IDO/SEAPreSale.sol\":2693:2721  endTimestamp = _endTimestamp */\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2732:2742  DAOAddress */\n      0x66\n        /* \"contracts/IDO/SEAPreSale.sol\":2732:2756  DAOAddress = _DAOAddress */\n      dup1\n      sload\n      swap1\n      swap6\n      and\n      swap7\n      swap1\n      swap6\n      and\n      swap6\n      swap1\n      swap6\n      or\n      swap1\n      swap3\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2767:2776  minAmount */\n      0x68\n        /* \"contracts/IDO/SEAPreSale.sol\":2767:2789  minAmount = _minAmount */\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2800:2809  maxAmount */\n      0x69\n        /* \"contracts/IDO/SEAPreSale.sol\":2800:2822  maxAmount = _maxAmount */\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2833:2844  toTalAmount */\n      0x6d\n        /* \"contracts/IDO/SEAPreSale.sol\":2833:2859  toTalAmount = _toTalAmount */\n      swap2\n      swap1\n      swap2\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2870:2894  remainingPurchasesMaxAmt */\n      0x6f\n        /* \"contracts/IDO/SEAPreSale.sol\":2870:2922  remainingPurchasesMaxAmt = _remainingPurchasesMaxAmt */\n      sstore\n        /* \"contracts/IDO/SEAPreSale.sol\":2933:2944  saleStarted */\n      0x70\n        /* \"contracts/IDO/SEAPreSale.sol\":2933:2951  saleStarted = true */\n      dup1\n      sload\n      not(0xff)\n      and\n      0x01\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n      swap1\n        /* \"contracts/IDO/SEAPreSale.sol\":2201:2979  function SET(... */\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":941:980  uint256 public remainingPurchasesMaxAmt */\n    tag_90:\n      sload(0x6f)\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":810:839  uint256 public startTimestamp */\n    tag_93:\n      sload(0x6b)\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":1017:1058  mapping(address => bool) public boughtSEA */\n    tag_98:\n      mstore(0x20, 0x71)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2184:2382  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_102:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_197\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_112\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_197:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_198\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_63\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_198:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_199\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_116\n      jump\t// in\n    tag_199:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2272:2294  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2264:2337  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_202\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_204\n      jump\t// in\n    tag_202:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2347:2375  _transferOwnership(newOwner) */\n      tag_205\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2366:2374  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2347:2365  _transferOwnership */\n      tag_140\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2347:2375  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_205:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2184:2382  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":780:804  uint256 public salePrice */\n    tag_104:\n      sload(0x6a)\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":1064:1107  mapping(address => bool) public whiteListed */\n    tag_108:\n      mstore(0x20, 0x72)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":876:972  function _msgSender() internal view virtual returns (address) {... */\n    tag_112:\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":955:965  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":876:972  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/IDO/SEAPreSale.sol\":4358:4564  function _calculateSaleQuote(uint256 paymentAmount_)... */\n    tag_126:\n        /* \"contracts/IDO/SEAPreSale.sol\":4526:4535  salePrice */\n      sload(0x6a)\n        /* \"contracts/IDO/SEAPreSale.sol\":4458:4465  uint256 */\n      0x00\n      swap1\n        /* \"contracts/IDO/SEAPreSale.sol\":4488:4536  uint256(1e18).mul(paymentAmount_).div(salePrice) */\n      tag_125\n      swap1\n        /* \"contracts/IDO/SEAPreSale.sol\":4488:4521  uint256(1e18).mul(paymentAmount_) */\n      tag_209\n        /* \"contracts/IDO/SEAPreSale.sol\":4496:4500  1e18 */\n      0x0de0b6b3a7640000\n        /* \"contracts/IDO/SEAPreSale.sol\":4506:4520  paymentAmount_ */\n      dup6\n        /* \"contracts/IDO/SEAPreSale.sol\":4488:4505  uint256(1e18).mul */\n      tag_210\n        /* \"contracts/IDO/SEAPreSale.sol\":4488:4521  uint256(1e18).mul(paymentAmount_) */\n      jump\t// in\n    tag_209:\n        /* \"contracts/IDO/SEAPreSale.sol\":4488:4525  uint256(1e18).mul(paymentAmount_).div */\n      swap1\n      tag_211\n        /* \"contracts/IDO/SEAPreSale.sol\":4488:4536  uint256(1e18).mul(paymentAmount_).div(salePrice) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2536:2723  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_140:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2628:2634  _owner */\n      0x33\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2644:2661  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2676:2716  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2628:2634  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2644:2661  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2628:2634  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2676:2716  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2609:2625  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2676:2716  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2536:2723  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2752:2848  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_150:\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2810:2817  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2836:2841  a + b */\n      tag_214\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2840:2841  b */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2836:2837  a */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2836:2841  a + b */\n      tag_215\n      jump\t// in\n    tag_214:\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2829:2841  return a + b */\n      swap4\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2752:2848  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":967:1219  function safeTransferFrom(... */\n    tag_175:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1116:1212  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      tag_217\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1136:1141  token */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1166:1193  token.transferFrom.selector */\n      shl(0xe0, 0x23b872dd)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1195:1199  from */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1201:1203  to */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1205:1210  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1143:1211  abi.encodeWithSelector(token.transferFrom.selector, from, to, value) */\n      add(0x24, mload(0x40))\n      tag_218\n      swap4\n      swap3\n      swap2\n      swap1\n      tag_219\n      jump\t// in\n    tag_218:\n      0x40\n      dup1\n      mload\n      not(0x1f)\n      dup2\n      dup5\n      sub\n      add\n      dup2\n      mstore\n      swap2\n      swap1\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      not(sub(shl(0xe0, 0x01), 0x01))\n      swap1\n      swap4\n      and\n      swap3\n      swap1\n      swap3\n      or\n      swap1\n      swap2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1116:1135  _callOptionalReturn */\n      tag_220\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":1116:1212  _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value)) */\n      jump\t// in\n    tag_217:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":967:1219  function safeTransferFrom(... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":745:961  function safeTransfer(... */\n    tag_177:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":868:954  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n      tag_222\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":888:893  token */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":918:941  token.transfer.selector */\n      shl(0xe0, 0xa9059cbb)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":943:945  to */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":947:952  value */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":895:953  abi.encodeWithSelector(token.transfer.selector, to, value) */\n      add(0x24, mload(0x40))\n      tag_218\n      swap3\n      swap2\n      swap1\n      tag_224\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":868:954  _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)) */\n    tag_222:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":745:961  function safeTransfer(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":988:1114  function __Ownable_init() internal initializer {... */\n    tag_188:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:552  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n      tag_226\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":557:569  _initialized */\n      and(0xff, sload(0x00))\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":556:569  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n    tag_226:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":531:620  require(_initializing || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_227\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_184\n      jump\t// in\n    tag_227:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":631:650  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":654:667  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":653:667  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_229\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:724  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:731  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":727:731  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n    tag_229:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1045:1071  __Context_init_unchained() */\n      tag_231\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1045:1069  __Context_init_unchained */\n      tag_232\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1045:1071  __Context_init_unchained() */\n      jump\t// in\n    tag_231:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1081:1107  __Ownable_init_unchained() */\n      tag_233\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1081:1105  __Ownable_init_unchained */\n      tag_234\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1081:1107  __Ownable_init_unchained() */\n      jump\t// in\n    tag_233:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":801:815  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":797:863  if (isTopLevelCall) {... */\n      iszero\n      tag_205\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":847:852  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":831:852  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":988:1114  function __Ownable_init() internal initializer {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":3462:3558  function mul(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_210:\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":3520:3527  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":3546:3551  a * b */\n      tag_214\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":3550:3551  b */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":3546:3547  a */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":3546:3551  a * b */\n      tag_238\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":3847:3943  function div(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_211:\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":3905:3912  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":3931:3936  a / b */\n      tag_214\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":3935:3936  b */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":3931:3932  a */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":3931:3936  a / b */\n      tag_241\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3306:4023  function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {... */\n    tag_220:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3736:3759  bytes memory returndata */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3762:3831  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      tag_243\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3790:3794  data */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3762:3831  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x20\n      dup2\n      mstore\n      0x20\n      add\n      0x5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564\n      dup2\n      mstore\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3770:3775  token */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3762:3789  address(token).functionCall */\n      and\n      tag_244\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3762:3831  address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap3\n      swap2\n      swap1\n      0xffffffff\n      and\n      jump\t// in\n    tag_243:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3845:3862  returndata.length */\n      dup1\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3736:3831  bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\") */\n      swap1\n      swap2\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3845:3866  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3841:4017  if (returndata.length > 0) {... */\n      tag_222\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3940:3950  returndata */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3929:3959  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_246\n      swap2\n      swap1\n      tag_247\n      jump\t// in\n    tag_246:\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":3921:4006  require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\") */\n      tag_222\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_250\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":807:871  function __Context_init_unchained() internal initializer {... */\n    tag_232:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:552  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n      tag_252\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":557:569  _initialized */\n      and(0xff, sload(0x00))\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":556:569  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n    tag_252:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":531:620  require(_initializing || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_253\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_184\n      jump\t// in\n    tag_253:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":631:650  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":654:667  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":653:667  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_233\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:724  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:731  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":727:731  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":801:815  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":797:863  if (isTopLevelCall) {... */\n      iszero\n      tag_205\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":847:852  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":831:852  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":807:871  function __Context_init_unchained() internal initializer {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1120:1226  function __Ownable_init_unchained() internal initializer {... */\n    tag_234:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:552  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n      tag_259\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":557:569  _initialized */\n      and(0xff, sload(0x00))\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":556:569  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n    tag_259:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":531:620  require(_initializing || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_260\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_184\n      jump\t// in\n    tag_260:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":631:650  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":654:667  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":653:667  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_262\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:724  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:731  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":727:731  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n    tag_262:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1187:1219  _transferOwnership(_msgSender()) */\n      tag_233\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1206:1218  _msgSender() */\n      tag_265\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1206:1216  _msgSender */\n      tag_112\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1206:1218  _msgSender() */\n      jump\t// in\n    tag_265:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1187:1205  _transferOwnership */\n      tag_140\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1187:1219  _transferOwnership(_msgSender()) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3525:3748  function functionCall(... */\n    tag_244:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3658:3670  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3689:3741  functionCallWithValue(target, data, 0, errorMessage) */\n      tag_268\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3711:3717  target */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3719:3723  data */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3725:3726  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3728:3740  errorMessage */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3689:3710  functionCallWithValue */\n      tag_269\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3689:3741  functionCallWithValue(target, data, 0, errorMessage) */\n      jump\t// in\n    tag_268:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3682:3741  return functionCallWithValue(target, data, 0, errorMessage) */\n      swap5\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":3525:3748  function functionCall(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4612:5111  function functionCallWithValue(... */\n    tag_269:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4777:4789  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4834:4839  value */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4809:4830  address(this).balance */\n      selfbalance\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4809:4839  address(this).balance >= value */\n      lt\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4801:4882  require(address(this).balance >= value, \"Address: insufficient balance for call\") */\n      tag_271\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_273\n      jump\t// in\n    tag_271:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4900:4918  isContract(target) */\n      tag_274\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4911:4917  target */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4900:4910  isContract */\n      tag_275\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4900:4918  isContract(target) */\n      jump\t// in\n    tag_274:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4892:4952  require(isContract(target), \"Address: call to non-contract\") */\n      tag_276\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap1\n      tag_278\n      jump\t// in\n    tag_276:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4964:4976  bool success */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4978:5001  bytes memory returndata */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5005:5011  target */\n      dup7\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5005:5016  target.call */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5024:5029  value */\n      dup6\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5031:5035  data */\n      dup8\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5005:5036  target.call{value: value}(data) */\n      mload(0x40)\n      tag_279\n      swap2\n      swap1\n      tag_280\n      jump\t// in\n    tag_279:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_283\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_282)\n    tag_283:\n      0x60\n      swap2\n      pop\n    tag_282:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4963:5036  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5053:5104  verifyCallResult(success, returndata, errorMessage) */\n      tag_284\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5070:5077  success */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5079:5089  returndata */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5091:5103  errorMessage */\n      dup7\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5053:5069  verifyCallResult */\n      tag_285\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5053:5104  verifyCallResult(success, returndata, errorMessage) */\n      jump\t// in\n    tag_284:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":5046:5104  return verifyCallResult(success, returndata, errorMessage) */\n      swap8\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":4612:5111  function functionCallWithValue(... */\n      swap7\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":782:1159  function isContract(address account) internal view returns (bool) {... */\n    tag_275:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1098:1118  extcodesize(account) */\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":1144:1152  size > 0 */\n      iszero\n      iszero\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":782:1159  function isContract(address account) internal view returns (bool) {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6275:6967  function verifyCallResult(... */\n    tag_285:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6421:6433  bytes memory */\n      0x60\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6449:6456  success */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6445:6961  if (success) {... */\n      iszero\n      tag_288\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6479:6489  returndata */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6472:6489  return returndata */\n      jump(tag_214)\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6445:6961  if (success) {... */\n    tag_288:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6590:6607  returndata.length */\n      dup3\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6590:6611  returndata.length > 0 */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6586:6951  if (returndata.length > 0) {... */\n      tag_290\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6784:6794  returndata */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6778:6795  mload(returndata) */\n      mload\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6844:6859  returndata_size */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6831:6841  returndata */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6827:6829  32 */\n      0x20\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6823:6842  add(32, returndata) */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6816:6860  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6733:6878  {... */\n    tag_290:\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6923:6935  errorMessage */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":6916:6936  revert(errorMessage) */\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_115\n      swap2\n      swap1\n      tag_293\n      jump\t// in\n        /* \"#utility.yul\":14:189   */\n    tag_295:\n        /* \"#utility.yul\":84:104   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":133:164   */\n      dup2\n      and\n        /* \"#utility.yul\":123:165   */\n      dup2\n      eq\n        /* \"#utility.yul\":113:115   */\n      tag_117\n      jumpi\n        /* \"#utility.yul\":179:180   */\n      0x00\n        /* \"#utility.yul\":176:177   */\n      dup1\n        /* \"#utility.yul\":169:181   */\n      revert\n        /* \"#utility.yul\":194:392   */\n    tag_97:\n      0x00\n        /* \"#utility.yul\":306:308   */\n      0x20\n        /* \"#utility.yul\":294:303   */\n      dup3\n        /* \"#utility.yul\":285:292   */\n      dup5\n        /* \"#utility.yul\":281:304   */\n      sub\n        /* \"#utility.yul\":277:309   */\n      slt\n        /* \"#utility.yul\":274:276   */\n      iszero\n      tag_299\n      jumpi\n        /* \"#utility.yul\":327:333   */\n      dup1\n        /* \"#utility.yul\":319:325   */\n      dup2\n        /* \"#utility.yul\":312:334   */\n      revert\n        /* \"#utility.yul\":274:276   */\n    tag_299:\n        /* \"#utility.yul\":355:386   */\n      tag_214\n        /* \"#utility.yul\":376:385   */\n      dup3\n        /* \"#utility.yul\":355:386   */\n      tag_295\n      jump\t// in\n        /* \"#utility.yul\":397:1230   */\n    tag_83:\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":662:665   */\n      0x0140\n        /* \"#utility.yul\":650:659   */\n      dup12\n        /* \"#utility.yul\":641:648   */\n      dup14\n        /* \"#utility.yul\":637:660   */\n      sub\n        /* \"#utility.yul\":633:666   */\n      slt\n        /* \"#utility.yul\":630:632   */\n      iszero\n      tag_302\n      jumpi\n        /* \"#utility.yul\":684:690   */\n      dup6\n        /* \"#utility.yul\":676:682   */\n      dup7\n        /* \"#utility.yul\":669:691   */\n      revert\n        /* \"#utility.yul\":630:632   */\n    tag_302:\n        /* \"#utility.yul\":712:743   */\n      tag_303\n        /* \"#utility.yul\":733:742   */\n      dup12\n        /* \"#utility.yul\":712:743   */\n      tag_295\n      jump\t// in\n    tag_303:\n        /* \"#utility.yul\":702:743   */\n      swap10\n      pop\n        /* \"#utility.yul\":762:802   */\n      tag_304\n        /* \"#utility.yul\":798:800   */\n      0x20\n        /* \"#utility.yul\":787:796   */\n      dup13\n        /* \"#utility.yul\":783:801   */\n      add\n        /* \"#utility.yul\":762:802   */\n      tag_295\n      jump\t// in\n    tag_304:\n        /* \"#utility.yul\":752:802   */\n      swap9\n      pop\n        /* \"#utility.yul\":821:861   */\n      tag_305\n        /* \"#utility.yul\":857:859   */\n      0x40\n        /* \"#utility.yul\":846:855   */\n      dup13\n        /* \"#utility.yul\":842:860   */\n      add\n        /* \"#utility.yul\":821:861   */\n      tag_295\n      jump\t// in\n    tag_305:\n        /* \"#utility.yul\":620:1230   */\n      swap10\n      swap13\n      swap9\n      swap12\n      pop\n        /* \"#utility.yul\":811:861   */\n      swap9\n      swap10\n        /* \"#utility.yul\":908:910   */\n      0x60\n        /* \"#utility.yul\":893:911   */\n      dup2\n      add\n        /* \"#utility.yul\":880:912   */\n      calldataload\n      swap10\n      pop\n        /* \"#utility.yul\":959:962   */\n      0x80\n        /* \"#utility.yul\":944:963   */\n      dup2\n      add\n        /* \"#utility.yul\":931:964   */\n      calldataload\n      swap9\n        /* \"#utility.yul\":1011:1014   */\n      0xa0\n        /* \"#utility.yul\":996:1015   */\n      dup3\n      add\n        /* \"#utility.yul\":983:1016   */\n      calldataload\n      swap9\n      pop\n        /* \"#utility.yul\":1063:1066   */\n      0xc0\n        /* \"#utility.yul\":1048:1067   */\n      dup3\n      add\n        /* \"#utility.yul\":1035:1068   */\n      calldataload\n      swap8\n      pop\n        /* \"#utility.yul\":1115:1118   */\n      0xe0\n        /* \"#utility.yul\":1100:1119   */\n      dup3\n      add\n        /* \"#utility.yul\":1087:1120   */\n      calldataload\n      swap7\n      pop\n        /* \"#utility.yul\":1167:1170   */\n      0x0100\n        /* \"#utility.yul\":1152:1171   */\n      dup3\n      add\n        /* \"#utility.yul\":1139:1172   */\n      calldataload\n      swap6\n      pop\n        /* \"#utility.yul\":1219:1222   */\n      0x0120\n        /* \"#utility.yul\":1204:1223   */\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":1191:1224   */\n      calldataload\n      swap4\n      pop\n        /* \"#utility.yul\":620:1230   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1235:2401   */\n    tag_31:\n      0x00\n        /* \"#utility.yul\":1350:1352   */\n      0x20\n        /* \"#utility.yul\":1393:1395   */\n      dup1\n        /* \"#utility.yul\":1381:1390   */\n      dup4\n        /* \"#utility.yul\":1372:1379   */\n      dup6\n        /* \"#utility.yul\":1368:1391   */\n      sub\n        /* \"#utility.yul\":1364:1396   */\n      slt\n        /* \"#utility.yul\":1361:1363   */\n      iszero\n      tag_307\n      jumpi\n        /* \"#utility.yul\":1414:1420   */\n      dup2\n        /* \"#utility.yul\":1406:1412   */\n      dup3\n        /* \"#utility.yul\":1399:1421   */\n      revert\n        /* \"#utility.yul\":1361:1363   */\n    tag_307:\n        /* \"#utility.yul\":1459:1468   */\n      dup3\n        /* \"#utility.yul\":1446:1469   */\n      calldataload\n        /* \"#utility.yul\":1488:1506   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":1529:1531   */\n      dup1\n        /* \"#utility.yul\":1521:1527   */\n      dup3\n        /* \"#utility.yul\":1518:1532   */\n      gt\n        /* \"#utility.yul\":1515:1517   */\n      iszero\n      tag_308\n      jumpi\n        /* \"#utility.yul\":1550:1556   */\n      dup4\n        /* \"#utility.yul\":1542:1548   */\n      dup5\n        /* \"#utility.yul\":1535:1557   */\n      revert\n        /* \"#utility.yul\":1515:1517   */\n    tag_308:\n        /* \"#utility.yul\":1593:1599   */\n      dup2\n        /* \"#utility.yul\":1582:1591   */\n      dup6\n        /* \"#utility.yul\":1578:1600   */\n      add\n        /* \"#utility.yul\":1568:1600   */\n      swap2\n      pop\n        /* \"#utility.yul\":1638:1645   */\n      dup6\n        /* \"#utility.yul\":1631:1635   */\n      0x1f\n        /* \"#utility.yul\":1627:1629   */\n      dup4\n        /* \"#utility.yul\":1623:1636   */\n      add\n        /* \"#utility.yul\":1619:1646   */\n      slt\n        /* \"#utility.yul\":1609:1611   */\n      tag_309\n      jumpi\n        /* \"#utility.yul\":1665:1671   */\n      dup4\n        /* \"#utility.yul\":1657:1663   */\n      dup5\n        /* \"#utility.yul\":1650:1672   */\n      revert\n        /* \"#utility.yul\":1609:1611   */\n    tag_309:\n        /* \"#utility.yul\":1706:1708   */\n      dup2\n        /* \"#utility.yul\":1693:1709   */\n      calldataload\n        /* \"#utility.yul\":1728:1730   */\n      dup2\n        /* \"#utility.yul\":1724:1726   */\n      dup2\n        /* \"#utility.yul\":1721:1731   */\n      gt\n        /* \"#utility.yul\":1718:1720   */\n      iszero\n      tag_311\n      jumpi\n        /* \"#utility.yul\":1734:1752   */\n      tag_311\n      tag_312\n      jump\t// in\n    tag_311:\n        /* \"#utility.yul\":1781:1783   */\n      dup4\n        /* \"#utility.yul\":1777:1779   */\n      dup2\n        /* \"#utility.yul\":1773:1784   */\n      mul\n        /* \"#utility.yul\":1813:1815   */\n      0x40\n        /* \"#utility.yul\":1807:1816   */\n      mload\n        /* \"#utility.yul\":1864:1866   */\n      dup6\n        /* \"#utility.yul\":1859:1861   */\n      dup3\n        /* \"#utility.yul\":1851:1857   */\n      dup3\n        /* \"#utility.yul\":1847:1862   */\n      add\n        /* \"#utility.yul\":1843:1867   */\n      add\n        /* \"#utility.yul\":1917:1923   */\n      dup2\n        /* \"#utility.yul\":1905:1915   */\n      dup2\n        /* \"#utility.yul\":1902:1924   */\n      lt\n        /* \"#utility.yul\":1897:1899   */\n      dup6\n        /* \"#utility.yul\":1885:1895   */\n      dup3\n        /* \"#utility.yul\":1882:1900   */\n      gt\n        /* \"#utility.yul\":1879:1925   */\n      or\n        /* \"#utility.yul\":1876:1878   */\n      iszero\n      tag_314\n      jumpi\n        /* \"#utility.yul\":1928:1946   */\n      tag_314\n      tag_312\n      jump\t// in\n    tag_314:\n        /* \"#utility.yul\":1964:1966   */\n      0x40\n        /* \"#utility.yul\":1957:1979   */\n      mstore\n        /* \"#utility.yul\":2014:2032   */\n      dup3\n      dup2\n      mstore\n        /* \"#utility.yul\":2048:2063   */\n      dup6\n      dup2\n      add\n      swap4\n      pop\n        /* \"#utility.yul\":2083:2094   */\n      dup5\n      dup7\n      add\n        /* \"#utility.yul\":2113:2124   */\n      dup3\n      dup7\n      add\n        /* \"#utility.yul\":2109:2129   */\n      dup8\n      add\n        /* \"#utility.yul\":2106:2139   */\n      dup11\n      lt\n        /* \"#utility.yul\":2103:2105   */\n      iszero\n      tag_315\n      jumpi\n        /* \"#utility.yul\":2157:2163   */\n      dup8\n        /* \"#utility.yul\":2149:2155   */\n      dup9\n        /* \"#utility.yul\":2142:2164   */\n      revert\n        /* \"#utility.yul\":2103:2105   */\n    tag_315:\n        /* \"#utility.yul\":2184:2190   */\n      dup8\n        /* \"#utility.yul\":2175:2190   */\n      swap6\n      pop\n        /* \"#utility.yul\":2199:2370   */\n    tag_316:\n        /* \"#utility.yul\":2213:2215   */\n      dup4\n        /* \"#utility.yul\":2210:2211   */\n      dup7\n        /* \"#utility.yul\":2207:2216   */\n      lt\n        /* \"#utility.yul\":2199:2370   */\n      iszero\n      tag_318\n      jumpi\n        /* \"#utility.yul\":2270:2295   */\n      tag_319\n        /* \"#utility.yul\":2291:2294   */\n      dup2\n        /* \"#utility.yul\":2270:2295   */\n      tag_295\n      jump\t// in\n    tag_319:\n        /* \"#utility.yul\":2258:2296   */\n      dup6\n      mstore\n        /* \"#utility.yul\":2231:2232   */\n      0x01\n        /* \"#utility.yul\":2224:2233   */\n      swap6\n      swap1\n      swap6\n      add\n      swap5\n        /* \"#utility.yul\":2316:2328   */\n      swap4\n      dup7\n      add\n      swap4\n        /* \"#utility.yul\":2348:2360   */\n      dup7\n      add\n        /* \"#utility.yul\":2199:2370   */\n      jump(tag_316)\n    tag_318:\n      pop\n        /* \"#utility.yul\":2389:2395   */\n      swap9\n        /* \"#utility.yul\":1330:2401   */\n      swap8\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2406:2703   */\n    tag_247:\n      0x00\n        /* \"#utility.yul\":2526:2528   */\n      0x20\n        /* \"#utility.yul\":2514:2523   */\n      dup3\n        /* \"#utility.yul\":2505:2512   */\n      dup5\n        /* \"#utility.yul\":2501:2524   */\n      sub\n        /* \"#utility.yul\":2497:2529   */\n      slt\n        /* \"#utility.yul\":2494:2496   */\n      iszero\n      tag_321\n      jumpi\n        /* \"#utility.yul\":2547:2553   */\n      dup1\n        /* \"#utility.yul\":2539:2545   */\n      dup2\n        /* \"#utility.yul\":2532:2554   */\n      revert\n        /* \"#utility.yul\":2494:2496   */\n    tag_321:\n        /* \"#utility.yul\":2584:2593   */\n      dup2\n        /* \"#utility.yul\":2578:2594   */\n      mload\n        /* \"#utility.yul\":2637:2642   */\n      dup1\n        /* \"#utility.yul\":2630:2643   */\n      iszero\n        /* \"#utility.yul\":2623:2644   */\n      iszero\n        /* \"#utility.yul\":2616:2621   */\n      dup2\n        /* \"#utility.yul\":2613:2645   */\n      eq\n        /* \"#utility.yul\":2603:2605   */\n      tag_214\n      jumpi\n        /* \"#utility.yul\":2664:2670   */\n      dup2\n        /* \"#utility.yul\":2656:2662   */\n      dup3\n        /* \"#utility.yul\":2649:2671   */\n      revert\n        /* \"#utility.yul\":2708:2898   */\n    tag_37:\n      0x00\n        /* \"#utility.yul\":2820:2822   */\n      0x20\n        /* \"#utility.yul\":2808:2817   */\n      dup3\n        /* \"#utility.yul\":2799:2806   */\n      dup5\n        /* \"#utility.yul\":2795:2818   */\n      sub\n        /* \"#utility.yul\":2791:2823   */\n      slt\n        /* \"#utility.yul\":2788:2790   */\n      iszero\n      tag_324\n      jumpi\n        /* \"#utility.yul\":2841:2847   */\n      dup1\n        /* \"#utility.yul\":2833:2839   */\n      dup2\n        /* \"#utility.yul\":2826:2848   */\n      revert\n        /* \"#utility.yul\":2788:2790   */\n    tag_324:\n      pop\n        /* \"#utility.yul\":2869:2892   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":2778:2898   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2903:3177   */\n    tag_280:\n      0x00\n        /* \"#utility.yul\":3070:3076   */\n      dup3\n        /* \"#utility.yul\":3064:3077   */\n      mload\n        /* \"#utility.yul\":3086:3139   */\n      tag_326\n        /* \"#utility.yul\":3132:3138   */\n      dup2\n        /* \"#utility.yul\":3127:3130   */\n      dup5\n        /* \"#utility.yul\":3120:3124   */\n      0x20\n        /* \"#utility.yul\":3112:3118   */\n      dup8\n        /* \"#utility.yul\":3108:3125   */\n      add\n        /* \"#utility.yul\":3086:3139   */\n      tag_327\n      jump\t// in\n    tag_326:\n        /* \"#utility.yul\":3155:3171   */\n      swap2\n      swap1\n      swap2\n      add\n      swap3\n        /* \"#utility.yul\":3040:3177   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3182:3385   */\n    tag_47:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3346:3378   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":3328:3379   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3316:3318   */\n      0x20\n        /* \"#utility.yul\":3301:3319   */\n      add\n      swap1\n        /* \"#utility.yul\":3283:3385   */\n      jump\t// out\n        /* \"#utility.yul\":3390:3765   */\n    tag_219:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3648:3663   */\n      swap4\n      dup5\n      and\n        /* \"#utility.yul\":3630:3664   */\n      dup2\n      mstore\n        /* \"#utility.yul\":3700:3715   */\n      swap2\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":3695:3697   */\n      0x20\n        /* \"#utility.yul\":3680:3698   */\n      dup3\n      add\n        /* \"#utility.yul\":3673:3716   */\n      mstore\n        /* \"#utility.yul\":3747:3749   */\n      0x40\n        /* \"#utility.yul\":3732:3750   */\n      dup2\n      add\n        /* \"#utility.yul\":3725:3759   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":3580:3582   */\n      0x60\n        /* \"#utility.yul\":3565:3583   */\n      add\n      swap1\n        /* \"#utility.yul\":3547:3765   */\n      jump\t// out\n        /* \"#utility.yul\":3770:4044   */\n    tag_224:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3962:3994   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":3944:3995   */\n      dup3\n      mstore\n        /* \"#utility.yul\":4026:4028   */\n      0x20\n        /* \"#utility.yul\":4011:4029   */\n      dup3\n      add\n        /* \"#utility.yul\":4004:4038   */\n      mstore\n        /* \"#utility.yul\":3932:3934   */\n      0x40\n        /* \"#utility.yul\":3917:3935   */\n      add\n      swap1\n        /* \"#utility.yul\":3899:4044   */\n      jump\t// out\n        /* \"#utility.yul\":4049:4236   */\n    tag_34:\n        /* \"#utility.yul\":4214:4228   */\n      swap1\n      iszero\n        /* \"#utility.yul\":4207:4229   */\n      iszero\n        /* \"#utility.yul\":4189:4230   */\n      dup2\n      mstore\n        /* \"#utility.yul\":4177:4179   */\n      0x20\n        /* \"#utility.yul\":4162:4180   */\n      add\n      swap1\n        /* \"#utility.yul\":4144:4236   */\n      jump\t// out\n        /* \"#utility.yul\":4241:4624   */\n    tag_293:\n      0x00\n        /* \"#utility.yul\":4390:4392   */\n      0x20\n        /* \"#utility.yul\":4379:4388   */\n      dup3\n        /* \"#utility.yul\":4372:4393   */\n      mstore\n        /* \"#utility.yul\":4422:4428   */\n      dup3\n        /* \"#utility.yul\":4416:4429   */\n      mload\n        /* \"#utility.yul\":4465:4471   */\n      dup1\n        /* \"#utility.yul\":4460:4462   */\n      0x20\n        /* \"#utility.yul\":4449:4458   */\n      dup5\n        /* \"#utility.yul\":4445:4463   */\n      add\n        /* \"#utility.yul\":4438:4472   */\n      mstore\n        /* \"#utility.yul\":4481:4547   */\n      tag_333\n        /* \"#utility.yul\":4540:4546   */\n      dup2\n        /* \"#utility.yul\":4535:4537   */\n      0x40\n        /* \"#utility.yul\":4524:4533   */\n      dup6\n        /* \"#utility.yul\":4520:4538   */\n      add\n        /* \"#utility.yul\":4515:4517   */\n      0x20\n        /* \"#utility.yul\":4507:4513   */\n      dup8\n        /* \"#utility.yul\":4503:4518   */\n      add\n        /* \"#utility.yul\":4481:4547   */\n      tag_327\n      jump\t// in\n    tag_333:\n        /* \"#utility.yul\":4608:4610   */\n      0x1f\n        /* \"#utility.yul\":4587:4602   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":4583:4612   */\n      and\n        /* \"#utility.yul\":4568:4613   */\n      swap2\n      swap1\n      swap2\n      add\n        /* \"#utility.yul\":4615:4617   */\n      0x40\n        /* \"#utility.yul\":4564:4618   */\n      add\n      swap3\n        /* \"#utility.yul\":4362:4624   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4629:4964   */\n    tag_156:\n        /* \"#utility.yul\":4831:4833   */\n      0x20\n        /* \"#utility.yul\":4813:4834   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4870:4872   */\n      0x0b\n        /* \"#utility.yul\":4850:4868   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4843:4873   */\n      mstore\n      shl(0xaa, 0x139bdd081cdd185c9d1959)\n        /* \"#utility.yul\":4904:4906   */\n      0x40\n        /* \"#utility.yul\":4889:4907   */\n      dup3\n      add\n        /* \"#utility.yul\":4882:4923   */\n      mstore\n        /* \"#utility.yul\":4955:4957   */\n      0x60\n        /* \"#utility.yul\":4940:4958   */\n      add\n      swap1\n        /* \"#utility.yul\":4803:4964   */\n      jump\t// out\n        /* \"#utility.yul\":4969:5371   */\n    tag_204:\n        /* \"#utility.yul\":5171:5173   */\n      0x20\n        /* \"#utility.yul\":5153:5174   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5210:5212   */\n      0x26\n        /* \"#utility.yul\":5190:5208   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5183:5213   */\n      mstore\n        /* \"#utility.yul\":5249:5283   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":5244:5246   */\n      0x40\n        /* \"#utility.yul\":5229:5247   */\n      dup3\n      add\n        /* \"#utility.yul\":5222:5284   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":5315:5317   */\n      0x60\n        /* \"#utility.yul\":5300:5318   */\n      dup3\n      add\n        /* \"#utility.yul\":5293:5329   */\n      mstore\n        /* \"#utility.yul\":5361:5364   */\n      0x80\n        /* \"#utility.yul\":5346:5365   */\n      add\n      swap1\n        /* \"#utility.yul\":5143:5371   */\n      jump\t// out\n        /* \"#utility.yul\":5376:5778   */\n    tag_273:\n        /* \"#utility.yul\":5578:5580   */\n      0x20\n        /* \"#utility.yul\":5560:5581   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5617:5619   */\n      0x26\n        /* \"#utility.yul\":5597:5615   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5590:5620   */\n      mstore\n        /* \"#utility.yul\":5656:5690   */\n      0x416464726573733a20696e73756666696369656e742062616c616e636520666f\n        /* \"#utility.yul\":5651:5653   */\n      0x40\n        /* \"#utility.yul\":5636:5654   */\n      dup3\n      add\n        /* \"#utility.yul\":5629:5691   */\n      mstore\n      shl(0xd2, 0x1c8818d85b1b)\n        /* \"#utility.yul\":5722:5724   */\n      0x60\n        /* \"#utility.yul\":5707:5725   */\n      dup3\n      add\n        /* \"#utility.yul\":5700:5736   */\n      mstore\n        /* \"#utility.yul\":5768:5771   */\n      0x80\n        /* \"#utility.yul\":5753:5772   */\n      add\n      swap1\n        /* \"#utility.yul\":5550:5778   */\n      jump\t// out\n        /* \"#utility.yul\":5783:6127   */\n    tag_159:\n        /* \"#utility.yul\":5985:5987   */\n      0x20\n        /* \"#utility.yul\":5967:5988   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6024:6026   */\n      0x14\n        /* \"#utility.yul\":6004:6022   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5997:6027   */\n      mstore\n      shl(0x62, 0x105b1c9958591e481c185c9d1a58da5c185d1959)\n        /* \"#utility.yul\":6058:6060   */\n      0x40\n        /* \"#utility.yul\":6043:6061   */\n      dup3\n      add\n        /* \"#utility.yul\":6036:6086   */\n      mstore\n        /* \"#utility.yul\":6118:6120   */\n      0x60\n        /* \"#utility.yul\":6103:6121   */\n      add\n      swap1\n        /* \"#utility.yul\":5957:6127   */\n      jump\t// out\n        /* \"#utility.yul\":6132:6464   */\n    tag_173:\n        /* \"#utility.yul\":6334:6336   */\n      0x20\n        /* \"#utility.yul\":6316:6337   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6373:6374   */\n      0x09\n        /* \"#utility.yul\":6353:6371   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6346:6375   */\n      mstore\n      shl(0xb9, 0x29b0b6329037bb32b9)\n        /* \"#utility.yul\":6406:6408   */\n      0x40\n        /* \"#utility.yul\":6391:6409   */\n      dup3\n      add\n        /* \"#utility.yul\":6384:6423   */\n      mstore\n        /* \"#utility.yul\":6455:6457   */\n      0x60\n        /* \"#utility.yul\":6440:6458   */\n      add\n      swap1\n        /* \"#utility.yul\":6306:6464   */\n      jump\t// out\n        /* \"#utility.yul\":6469:6808   */\n    tag_170:\n        /* \"#utility.yul\":6671:6673   */\n      0x20\n        /* \"#utility.yul\":6653:6674   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":6710:6712   */\n      0x0f\n        /* \"#utility.yul\":6690:6708   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":6683:6713   */\n      mstore\n      shl(0x8a, 0x139bdd081dda1a5d195b1a5cdd1959)\n        /* \"#utility.yul\":6744:6746   */\n      0x40\n        /* \"#utility.yul\":6729:6747   */\n      dup3\n      add\n        /* \"#utility.yul\":6722:6767   */\n      mstore\n        /* \"#utility.yul\":6799:6801   */\n      0x60\n        /* \"#utility.yul\":6784:6802   */\n      add\n      swap1\n        /* \"#utility.yul\":6643:6808   */\n      jump\t// out\n        /* \"#utility.yul\":6813:7218   */\n    tag_153:\n        /* \"#utility.yul\":7015:7017   */\n      0x20\n        /* \"#utility.yul\":6997:7018   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7054:7056   */\n      0x29\n        /* \"#utility.yul\":7034:7052   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7027:7057   */\n      mstore\n        /* \"#utility.yul\":7093:7127   */\n      0x54686520616d6f756e7420656e746572656420657863656564732046756e6472\n        /* \"#utility.yul\":7088:7090   */\n      0x40\n        /* \"#utility.yul\":7073:7091   */\n      dup3\n      add\n        /* \"#utility.yul\":7066:7128   */\n      mstore\n      shl(0xba, 0x185a5cd94811dbd85b)\n        /* \"#utility.yul\":7159:7161   */\n      0x60\n        /* \"#utility.yul\":7144:7162   */\n      dup3\n      add\n        /* \"#utility.yul\":7137:7176   */\n      mstore\n        /* \"#utility.yul\":7208:7211   */\n      0x80\n        /* \"#utility.yul\":7193:7212   */\n      add\n      swap1\n        /* \"#utility.yul\":6987:7218   */\n      jump\t// out\n        /* \"#utility.yul\":7223:7633   */\n    tag_184:\n        /* \"#utility.yul\":7425:7427   */\n      0x20\n        /* \"#utility.yul\":7407:7428   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7464:7466   */\n      0x2e\n        /* \"#utility.yul\":7444:7462   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":7437:7467   */\n      mstore\n        /* \"#utility.yul\":7503:7537   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":7498:7500   */\n      0x40\n        /* \"#utility.yul\":7483:7501   */\n      dup3\n      add\n        /* \"#utility.yul\":7476:7538   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":7569:7571   */\n      0x60\n        /* \"#utility.yul\":7554:7572   */\n      dup3\n      add\n        /* \"#utility.yul\":7547:7591   */\n      mstore\n        /* \"#utility.yul\":7623:7626   */\n      0x80\n        /* \"#utility.yul\":7608:7627   */\n      add\n      swap1\n        /* \"#utility.yul\":7397:7633   */\n      jump\t// out\n        /* \"#utility.yul\":7638:7994   */\n    tag_116:\n        /* \"#utility.yul\":7840:7842   */\n      0x20\n        /* \"#utility.yul\":7822:7843   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":7859:7877   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":7852:7882   */\n      mstore\n        /* \"#utility.yul\":7918:7952   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":7913:7915   */\n      0x40\n        /* \"#utility.yul\":7898:7916   */\n      dup3\n      add\n        /* \"#utility.yul\":7891:7953   */\n      mstore\n        /* \"#utility.yul\":7985:7987   */\n      0x60\n        /* \"#utility.yul\":7970:7988   */\n      add\n      swap1\n        /* \"#utility.yul\":7812:7994   */\n      jump\t// out\n        /* \"#utility.yul\":7999:8341   */\n    tag_166:\n        /* \"#utility.yul\":8201:8203   */\n      0x20\n        /* \"#utility.yul\":8183:8204   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8240:8242   */\n      0x12\n        /* \"#utility.yul\":8220:8238   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8213:8243   */\n      mstore\n      shl(0x72, 0x115e18d95959195908125113c81b1a5b5a5d)\n        /* \"#utility.yul\":8274:8276   */\n      0x40\n        /* \"#utility.yul\":8259:8277   */\n      dup3\n      add\n        /* \"#utility.yul\":8252:8300   */\n      mstore\n        /* \"#utility.yul\":8332:8334   */\n      0x60\n        /* \"#utility.yul\":8317:8335   */\n      add\n      swap1\n        /* \"#utility.yul\":8173:8341   */\n      jump\t// out\n        /* \"#utility.yul\":8346:8694   */\n    tag_145:\n        /* \"#utility.yul\":8548:8550   */\n      0x20\n        /* \"#utility.yul\":8530:8551   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8587:8589   */\n      0x18\n        /* \"#utility.yul\":8567:8585   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8560:8590   */\n      mstore\n        /* \"#utility.yul\":8626:8652   */\n      0x42656c6f77206d696e696d756d20616c6c6f636174696f6e0000000000000000\n        /* \"#utility.yul\":8621:8623   */\n      0x40\n        /* \"#utility.yul\":8606:8624   */\n      dup3\n      add\n        /* \"#utility.yul\":8599:8653   */\n      mstore\n        /* \"#utility.yul\":8685:8687   */\n      0x60\n        /* \"#utility.yul\":8670:8688   */\n      add\n      swap1\n        /* \"#utility.yul\":8520:8694   */\n      jump\t// out\n        /* \"#utility.yul\":8699:9052   */\n    tag_278:\n        /* \"#utility.yul\":8901:8903   */\n      0x20\n        /* \"#utility.yul\":8883:8904   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8940:8942   */\n      0x1d\n        /* \"#utility.yul\":8920:8938   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8913:8943   */\n      mstore\n        /* \"#utility.yul\":8979:9010   */\n      0x416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000\n        /* \"#utility.yul\":8974:8976   */\n      0x40\n        /* \"#utility.yul\":8959:8977   */\n      dup3\n      add\n        /* \"#utility.yul\":8952:9011   */\n      mstore\n        /* \"#utility.yul\":9043:9045   */\n      0x60\n        /* \"#utility.yul\":9028:9046   */\n      add\n      swap1\n        /* \"#utility.yul\":8873:9052   */\n      jump\t// out\n        /* \"#utility.yul\":9057:9401   */\n    tag_148:\n        /* \"#utility.yul\":9259:9261   */\n      0x20\n        /* \"#utility.yul\":9241:9262   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9298:9300   */\n      0x14\n        /* \"#utility.yul\":9278:9296   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9271:9301   */\n      mstore\n      shl(0x61, 0x26b7b932903a3430b71030b63637b1b0ba34b7b7)\n        /* \"#utility.yul\":9332:9334   */\n      0x40\n        /* \"#utility.yul\":9317:9335   */\n      dup3\n      add\n        /* \"#utility.yul\":9310:9360   */\n      mstore\n        /* \"#utility.yul\":9392:9394   */\n      0x60\n        /* \"#utility.yul\":9377:9395   */\n      add\n      swap1\n        /* \"#utility.yul\":9231:9401   */\n      jump\t// out\n        /* \"#utility.yul\":9406:9745   */\n    tag_162:\n        /* \"#utility.yul\":9608:9610   */\n      0x20\n        /* \"#utility.yul\":9590:9611   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9647:9649   */\n      0x0f\n        /* \"#utility.yul\":9627:9645   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9620:9650   */\n      mstore\n      shl(0x8a, 0x139bdd081cdd185c9d1959081e595d)\n        /* \"#utility.yul\":9681:9683   */\n      0x40\n        /* \"#utility.yul\":9666:9684   */\n      dup3\n      add\n        /* \"#utility.yul\":9659:9704   */\n      mstore\n        /* \"#utility.yul\":9736:9738   */\n      0x60\n        /* \"#utility.yul\":9721:9739   */\n      add\n      swap1\n        /* \"#utility.yul\":9580:9745   */\n      jump\t// out\n        /* \"#utility.yul\":9750:10156   */\n    tag_250:\n        /* \"#utility.yul\":9952:9954   */\n      0x20\n        /* \"#utility.yul\":9934:9955   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":9991:9993   */\n      0x2a\n        /* \"#utility.yul\":9971:9989   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":9964:9994   */\n      mstore\n        /* \"#utility.yul\":10030:10064   */\n      0x5361666545524332303a204552433230206f7065726174696f6e20646964206e\n        /* \"#utility.yul\":10025:10027   */\n      0x40\n        /* \"#utility.yul\":10010:10028   */\n      dup3\n      add\n        /* \"#utility.yul\":10003:10065   */\n      mstore\n      shl(0xb2, 0x1bdd081cdd58d8d95959)\n        /* \"#utility.yul\":10096:10098   */\n      0x60\n        /* \"#utility.yul\":10081:10099   */\n      dup3\n      add\n        /* \"#utility.yul\":10074:10114   */\n      mstore\n        /* \"#utility.yul\":10146:10149   */\n      0x80\n        /* \"#utility.yul\":10131:10150   */\n      add\n      swap1\n        /* \"#utility.yul\":9924:10156   */\n      jump\t// out\n        /* \"#utility.yul\":10161:10338   */\n    tag_40:\n        /* \"#utility.yul\":10307:10332   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":10295:10297   */\n      0x20\n        /* \"#utility.yul\":10280:10298   */\n      add\n      swap1\n        /* \"#utility.yul\":10262:10338   */\n      jump\t// out\n        /* \"#utility.yul\":10343:10471   */\n    tag_215:\n      0x00\n        /* \"#utility.yul\":10414:10415   */\n      dup3\n        /* \"#utility.yul\":10410:10416   */\n      not\n        /* \"#utility.yul\":10407:10408   */\n      dup3\n        /* \"#utility.yul\":10404:10417   */\n      gt\n        /* \"#utility.yul\":10401:10403   */\n      iszero\n      tag_352\n      jumpi\n        /* \"#utility.yul\":10420:10438   */\n      tag_352\n      tag_353\n      jump\t// in\n    tag_352:\n      pop\n        /* \"#utility.yul\":10456:10465   */\n      add\n      swap1\n        /* \"#utility.yul\":10391:10471   */\n      jump\t// out\n        /* \"#utility.yul\":10476:10693   */\n    tag_241:\n      0x00\n        /* \"#utility.yul\":10542:10543   */\n      dup3\n        /* \"#utility.yul\":10532:10534   */\n      tag_355\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":10567:10598   */\n      dup2\n      mstore\n        /* \"#utility.yul\":10621:10625   */\n      0x12\n        /* \"#utility.yul\":10618:10619   */\n      0x04\n        /* \"#utility.yul\":10611:10626   */\n      mstore\n        /* \"#utility.yul\":10649:10653   */\n      0x24\n        /* \"#utility.yul\":10574:10575   */\n      dup2\n        /* \"#utility.yul\":10639:10654   */\n      revert\n        /* \"#utility.yul\":10532:10534   */\n    tag_355:\n      pop\n        /* \"#utility.yul\":10678:10687   */\n      div\n      swap1\n        /* \"#utility.yul\":10522:10693   */\n      jump\t// out\n        /* \"#utility.yul\":10698:10866   */\n    tag_238:\n      0x00\n        /* \"#utility.yul\":10804:10805   */\n      dup2\n        /* \"#utility.yul\":10800:10801   */\n      0x00\n        /* \"#utility.yul\":10796:10802   */\n      not\n        /* \"#utility.yul\":10792:10806   */\n      div\n        /* \"#utility.yul\":10789:10790   */\n      dup4\n        /* \"#utility.yul\":10786:10807   */\n      gt\n        /* \"#utility.yul\":10781:10782   */\n      dup3\n        /* \"#utility.yul\":10774:10783   */\n      iszero\n        /* \"#utility.yul\":10767:10784   */\n      iszero\n        /* \"#utility.yul\":10763:10808   */\n      and\n        /* \"#utility.yul\":10760:10762   */\n      iszero\n      tag_358\n      jumpi\n        /* \"#utility.yul\":10811:10829   */\n      tag_358\n      tag_353\n      jump\t// in\n    tag_358:\n      pop\n        /* \"#utility.yul\":10851:10860   */\n      mul\n      swap1\n        /* \"#utility.yul\":10750:10866   */\n      jump\t// out\n        /* \"#utility.yul\":10871:11129   */\n    tag_327:\n        /* \"#utility.yul\":10943:10944   */\n      0x00\n        /* \"#utility.yul\":10953:11066   */\n    tag_360:\n        /* \"#utility.yul\":10967:10973   */\n      dup4\n        /* \"#utility.yul\":10964:10965   */\n      dup2\n        /* \"#utility.yul\":10961:10974   */\n      lt\n        /* \"#utility.yul\":10953:11066   */\n      iszero\n      tag_362\n      jumpi\n        /* \"#utility.yul\":11043:11054   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":11037:11055   */\n      mload\n        /* \"#utility.yul\":11024:11035   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":11017:11056   */\n      mstore\n        /* \"#utility.yul\":10989:10991   */\n      0x20\n        /* \"#utility.yul\":10982:10992   */\n      add\n        /* \"#utility.yul\":10953:11066   */\n      jump(tag_360)\n    tag_362:\n        /* \"#utility.yul\":11084:11090   */\n      dup4\n        /* \"#utility.yul\":11081:11082   */\n      dup2\n        /* \"#utility.yul\":11078:11091   */\n      gt\n        /* \"#utility.yul\":11075:11077   */\n      iszero\n      tag_217\n      jumpi\n      pop\n      pop\n        /* \"#utility.yul\":11119:11120   */\n      0x00\n        /* \"#utility.yul\":11101:11117   */\n      swap2\n      add\n        /* \"#utility.yul\":11094:11121   */\n      mstore\n        /* \"#utility.yul\":10924:11129   */\n      jump\t// out\n        /* \"#utility.yul\":11134:11269   */\n    tag_123:\n      0x00\n      not(0x00)\n        /* \"#utility.yul\":11194:11211   */\n      dup3\n      eq\n        /* \"#utility.yul\":11191:11193   */\n      iszero\n      tag_366\n      jumpi\n        /* \"#utility.yul\":11214:11232   */\n      tag_366\n      tag_353\n      jump\t// in\n    tag_366:\n      pop\n        /* \"#utility.yul\":11261:11262   */\n      0x01\n        /* \"#utility.yul\":11250:11263   */\n      add\n      swap1\n        /* \"#utility.yul\":11181:11269   */\n      jump\t// out\n        /* \"#utility.yul\":11274:11401   */\n    tag_353:\n        /* \"#utility.yul\":11335:11345   */\n      0x4e487b71\n        /* \"#utility.yul\":11330:11333   */\n      0xe0\n        /* \"#utility.yul\":11326:11346   */\n      shl\n        /* \"#utility.yul\":11323:11324   */\n      0x00\n        /* \"#utility.yul\":11316:11347   */\n      mstore\n        /* \"#utility.yul\":11366:11370   */\n      0x11\n        /* \"#utility.yul\":11363:11364   */\n      0x04\n        /* \"#utility.yul\":11356:11371   */\n      mstore\n        /* \"#utility.yul\":11390:11394   */\n      0x24\n        /* \"#utility.yul\":11387:11388   */\n      0x00\n        /* \"#utility.yul\":11380:11395   */\n      revert\n        /* \"#utility.yul\":11406:11533   */\n    tag_312:\n        /* \"#utility.yul\":11467:11477   */\n      0x4e487b71\n        /* \"#utility.yul\":11462:11465   */\n      0xe0\n        /* \"#utility.yul\":11458:11478   */\n      shl\n        /* \"#utility.yul\":11455:11456   */\n      0x00\n        /* \"#utility.yul\":11448:11479   */\n      mstore\n        /* \"#utility.yul\":11498:11502   */\n      0x41\n        /* \"#utility.yul\":11495:11496   */\n      0x04\n        /* \"#utility.yul\":11488:11503   */\n      mstore\n        /* \"#utility.yul\":11522:11526   */\n      0x24\n        /* \"#utility.yul\":11519:11520   */\n      0x00\n        /* \"#utility.yul\":11512:11527   */\n      revert\n\n    auxdata: 0xa2646970667358221220989a5c118439b428179ecbdb261f27647feba2f834ae5ae86e6a176ac4f7435b64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50611385806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c80639e623ae4116100c3578063e58bf43a1161007c578063e58bf43a14610243578063e6fd48bc1461024b578063ef8cdaa414610253578063f2fde38b14610266578063f51f96dd14610279578063fa0fca84146102815761014d565b80639e623ae4146101f2578063a85adeab146101fa578063b229299414610202578063d392eab114610215578063d45fc1a91461021d578063e3bef142146102305761014d565b8063492cc4e311610115578063492cc4e3146101c05780635c474f9e146101c85780635f48f393146101d0578063715018a6146101d85780638da5cb5b146101e25780639b2cb5d8146101ea5761014d565b80631eef7659146101525780632092c12b1461017b57806335975a371461019b5780633e413bee146101a35780633f407b84146101b8575b600080fd5b610165610160366004610da6565b610294565b6040516101729190610f0c565b60405180910390f35b61018e610189366004610e87565b61035f565b604051610172919061127c565b610165610370565b6101ab6103ca565b6040516101729190610ebb565b61018e6103d9565b6101ab6103df565b6101656103ee565b61018e6103f7565b6101e06103fd565b005b6101ab610448565b61018e610457565b61018e61045d565b61018e610463565b610165610210366004610e87565b610469565b6101ab61065d565b6101e061022b366004610d23565b61066c565b61016561023e366004610d23565b610760565b61018e610814565b61018e61081a565b610165610261366004610d09565b610820565b6101e0610274366004610d09565b610835565b61018e6108a6565b61016561028f366004610d09565b6108ac565b600061029e6108c1565b6001600160a01b03166102af610448565b6001600160a01b0316146102de5760405162461bcd60e51b81526004016102d59061110c565b60405180910390fd5b60005b82518110156103545760016072600085848151811061031057634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790558061034c81611308565b9150506102e1565b50600190505b919050565b600061036a826108c5565b92915050565b600061037a6108c1565b6001600160a01b031661038b610448565b6001600160a01b0316146103b15760405162461bcd60e51b81526004016102d59061110c565b506070805460ff19811660ff9182161517918290551690565b6067546001600160a01b031681565b606e5481565b6065546001600160a01b031681565b60705460ff1681565b60695481565b6104056108c1565b6001600160a01b0316610416610448565b6001600160a01b03161461043c5760405162461bcd60e51b81526004016102d59061110c565b61044660006108e7565b565b6033546001600160a01b031690565b60685481565b606d5481565b606c5481565b600060685482101561048d5760405162461bcd60e51b81526004016102d59061116d565b6069548211156104af5760405162461bcd60e51b81526004016102d5906111db565b606e546104bc9083610939565b606e819055606d5410156104e25760405162461bcd60e51b81526004016102d590611075565b60705460ff1615156001146105095760405162461bcd60e51b81526004016102d590610f4a565b3360009081526071602052604090205460ff16156105395760405162461bcd60e51b81526004016102d590610ffb565b42606b541061055a5760405162461bcd60e51b81526004016102d590611209565b336000908152607160205260409020805460ff19166001179055606c544211156105a557606f548211156105a05760405162461bcd60e51b81526004016102d590611141565b6105fa565b3360009081526072602052604090205460ff1615156001146105d95760405162461bcd60e51b81526004016102d59061104c565b606c5442106105fa5760405162461bcd60e51b81526004016102d590611029565b606754610612906001600160a01b031633308561094c565b60665460675461062f916001600160a01b039182169116846109aa565b600061063a836108c5565b606554909150610654906001600160a01b031633836109aa565b50600192915050565b6066546001600160a01b031681565b600054610100900460ff1680610685575060005460ff16155b6106a15760405162461bcd60e51b81526004016102d5906110be565b600054610100900460ff161580156106cc576000805460ff1961ff0019909116610100171660011790555b6106d46109ce565b606580546001600160a01b03808d166001600160a01b031992831617909255606780548c8416908316179055606a879055606b869055606c85905560668054928e169290911691909117905560688890556069879055606d869055606f8290556070805460ff191660011790558015610753576000805461ff00191690555b5050505050505050505050565b600061076a6108c1565b6001600160a01b031661077b610448565b6001600160a01b0316146107a15760405162461bcd60e51b81526004016102d59061110c565b50606580546001600160a01b03199081166001600160a01b039b8c1617909155606780548216998b1699909917909855606a93909355606b91909155606c55606680549095169690951695909517909255606855606955606d91909155606f556070805460ff1916600190811790915590565b606f5481565b606b5481565b60716020526000908152604090205460ff1681565b61083d6108c1565b6001600160a01b031661084e610448565b6001600160a01b0316146108745760405162461bcd60e51b81526004016102d59061110c565b6001600160a01b03811661089a5760405162461bcd60e51b81526004016102d590610f6f565b6108a3816108e7565b50565b606a5481565b60726020526000908152604090205460ff1681565b3390565b606a5460009061036a906108e1670de0b6b3a764000085610a52565b90610a5e565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006109458284611285565b9392505050565b6109a4846323b872dd60e01b85858560405160240161096d93929190610ecf565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610a6a565b50505050565b6109c98363a9059cbb60e01b848460405160240161096d929190610ef3565b505050565b600054610100900460ff16806109e7575060005460ff16155b610a035760405162461bcd60e51b81526004016102d5906110be565b600054610100900460ff16158015610a2e576000805460ff1961ff0019909116610100171660011790555b610a36610af9565b610a3e610b6c565b80156108a3576000805461ff001916905550565b600061094582846112bd565b6000610945828461129d565b6000610abf826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316610bdc9092919063ffffffff16565b8051909150156109c95780806020019051810190610add9190610e67565b6109c95760405162461bcd60e51b81526004016102d590611232565b600054610100900460ff1680610b12575060005460ff16155b610b2e5760405162461bcd60e51b81526004016102d5906110be565b600054610100900460ff16158015610a3e576000805460ff1961ff00199091166101001716600117905580156108a3576000805461ff001916905550565b600054610100900460ff1680610b85575060005460ff16155b610ba15760405162461bcd60e51b81526004016102d5906110be565b600054610100900460ff16158015610bcc576000805460ff1961ff0019909116610100171660011790555b610a3e610bd76108c1565b6108e7565b6060610beb8484600085610bf3565b949350505050565b606082471015610c155760405162461bcd60e51b81526004016102d590610fb5565b610c1e85610cb3565b610c3a5760405162461bcd60e51b81526004016102d5906111a4565b600080866001600160a01b03168587604051610c569190610e9f565b60006040518083038185875af1925050503d8060008114610c93576040519150601f19603f3d011682016040523d82523d6000602084013e610c98565b606091505b5091509150610ca8828286610cb9565b979650505050505050565b3b151590565b60608315610cc8575081610945565b825115610cd85782518084602001fd5b8160405162461bcd60e51b81526004016102d59190610f17565b80356001600160a01b038116811461035a57600080fd5b600060208284031215610d1a578081fd5b61094582610cf2565b6000806000806000806000806000806101408b8d031215610d42578586fd5b610d4b8b610cf2565b9950610d5960208c01610cf2565b9850610d6760408c01610cf2565b999c989b5098996060810135995060808101359860a0820135985060c0820135975060e082013596506101008201359550610120909101359350915050565b60006020808385031215610db8578182fd5b823567ffffffffffffffff80821115610dcf578384fd5b818501915085601f830112610de2578384fd5b813581811115610df457610df4611339565b83810260405185828201018181108582111715610e1357610e13611339565b604052828152858101935084860182860187018a1015610e31578788fd5b8795505b83861015610e5a57610e4681610cf2565b855260019590950194938601938601610e35565b5098975050505050505050565b600060208284031215610e78578081fd5b81518015158114610945578182fd5b600060208284031215610e98578081fd5b5035919050565b60008251610eb18184602087016112dc565b9190910192915050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6000602082528251806020840152610f368160408501602087016112dc565b601f01601f19169190910160400192915050565b6020808252600b908201526a139bdd081cdd185c9d195960aa1b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526026908201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6040820152651c8818d85b1b60d21b606082015260800190565b602080825260149082015273105b1c9958591e481c185c9d1a58da5c185d195960621b604082015260600190565b60208082526009908201526829b0b6329037bb32b960b91b604082015260600190565b6020808252600f908201526e139bdd081dda1a5d195b1a5cdd1959608a1b604082015260600190565b60208082526029908201527f54686520616d6f756e7420656e746572656420657863656564732046756e6472604082015268185a5cd94811dbd85b60ba1b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b602080825260129082015271115e18d95959195908125113c81b1a5b5a5d60721b604082015260600190565b60208082526018908201527f42656c6f77206d696e696d756d20616c6c6f636174696f6e0000000000000000604082015260600190565b6020808252601d908201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604082015260600190565b60208082526014908201527326b7b932903a3430b71030b63637b1b0ba34b7b760611b604082015260600190565b6020808252600f908201526e139bdd081cdd185c9d1959081e595d608a1b604082015260600190565b6020808252602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6040820152691bdd081cdd58d8d9595960b21b606082015260800190565b90815260200190565b6000821982111561129857611298611323565b500190565b6000826112b857634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156112d7576112d7611323565b500290565b60005b838110156112f75781810151838201526020016112df565b838111156109a45750506000910152565b600060001982141561131c5761131c611323565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220989a5c118439b428179ecbdb261f27647feba2f834ae5ae86e6a176ac4f7435b64736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1385 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9E623AE4 GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xE58BF43A GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xE58BF43A EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0xE6FD48BC EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0xEF8CDAA4 EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x266 JUMPI DUP1 PUSH4 0xF51F96DD EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0xFA0FCA84 EQ PUSH2 0x281 JUMPI PUSH2 0x14D JUMP JUMPDEST DUP1 PUSH4 0x9E623AE4 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xA85ADEAB EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0xB2292994 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xD392EAB1 EQ PUSH2 0x215 JUMPI DUP1 PUSH4 0xD45FC1A9 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0xE3BEF142 EQ PUSH2 0x230 JUMPI PUSH2 0x14D JUMP JUMPDEST DUP1 PUSH4 0x492CC4E3 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x492CC4E3 EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x5C474F9E EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x5F48F393 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x9B2CB5D8 EQ PUSH2 0x1EA JUMPI PUSH2 0x14D JUMP JUMPDEST DUP1 PUSH4 0x1EEF7659 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x2092C12B EQ PUSH2 0x17B JUMPI DUP1 PUSH4 0x35975A37 EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0x3E413BEE EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x3F407B84 EQ PUSH2 0x1B8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x165 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0xDA6 JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x172 SWAP2 SWAP1 PUSH2 0xF0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18E PUSH2 0x189 CALLDATASIZE PUSH1 0x4 PUSH2 0xE87 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x172 SWAP2 SWAP1 PUSH2 0x127C JUMP JUMPDEST PUSH2 0x165 PUSH2 0x370 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x3CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x172 SWAP2 SWAP1 PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x18E PUSH2 0x3D9 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x3DF JUMP JUMPDEST PUSH2 0x165 PUSH2 0x3EE JUMP JUMPDEST PUSH2 0x18E PUSH2 0x3F7 JUMP JUMPDEST PUSH2 0x1E0 PUSH2 0x3FD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AB PUSH2 0x448 JUMP JUMPDEST PUSH2 0x18E PUSH2 0x457 JUMP JUMPDEST PUSH2 0x18E PUSH2 0x45D JUMP JUMPDEST PUSH2 0x18E PUSH2 0x463 JUMP JUMPDEST PUSH2 0x165 PUSH2 0x210 CALLDATASIZE PUSH1 0x4 PUSH2 0xE87 JUMP JUMPDEST PUSH2 0x469 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x65D JUMP JUMPDEST PUSH2 0x1E0 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0xD23 JUMP JUMPDEST PUSH2 0x66C JUMP JUMPDEST PUSH2 0x165 PUSH2 0x23E CALLDATASIZE PUSH1 0x4 PUSH2 0xD23 JUMP JUMPDEST PUSH2 0x760 JUMP JUMPDEST PUSH2 0x18E PUSH2 0x814 JUMP JUMPDEST PUSH2 0x18E PUSH2 0x81A JUMP JUMPDEST PUSH2 0x165 PUSH2 0x261 CALLDATASIZE PUSH1 0x4 PUSH2 0xD09 JUMP JUMPDEST PUSH2 0x820 JUMP JUMPDEST PUSH2 0x1E0 PUSH2 0x274 CALLDATASIZE PUSH1 0x4 PUSH2 0xD09 JUMP JUMPDEST PUSH2 0x835 JUMP JUMPDEST PUSH2 0x18E PUSH2 0x8A6 JUMP JUMPDEST PUSH2 0x165 PUSH2 0x28F CALLDATASIZE PUSH1 0x4 PUSH2 0xD09 JUMP JUMPDEST PUSH2 0x8AC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29E PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2AF PUSH2 0x448 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x110C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x354 JUMPI PUSH1 0x1 PUSH1 0x72 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x310 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x34C DUP2 PUSH2 0x1308 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2E1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36A DUP3 PUSH2 0x8C5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37A PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x38B PUSH2 0x448 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x110C JUMP JUMPDEST POP PUSH1 0x70 DUP1 SLOAD PUSH1 0xFF NOT DUP2 AND PUSH1 0xFF SWAP2 DUP3 AND ISZERO OR SWAP2 DUP3 SWAP1 SSTORE AND SWAP1 JUMP JUMPDEST PUSH1 0x67 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x6E SLOAD DUP2 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x69 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x405 PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x416 PUSH2 0x448 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x110C JUMP JUMPDEST PUSH2 0x446 PUSH1 0x0 PUSH2 0x8E7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x68 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6D SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6C SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x68 SLOAD DUP3 LT ISZERO PUSH2 0x48D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x116D JUMP JUMPDEST PUSH1 0x69 SLOAD DUP3 GT ISZERO PUSH2 0x4AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x11DB JUMP JUMPDEST PUSH1 0x6E SLOAD PUSH2 0x4BC SWAP1 DUP4 PUSH2 0x939 JUMP JUMPDEST PUSH1 0x6E DUP2 SWAP1 SSTORE PUSH1 0x6D SLOAD LT ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x509 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0xF4A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x71 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x539 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0xFFB JUMP JUMPDEST TIMESTAMP PUSH1 0x6B SLOAD LT PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x1209 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x71 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x6C SLOAD TIMESTAMP GT ISZERO PUSH2 0x5A5 JUMPI PUSH1 0x6F SLOAD DUP3 GT ISZERO PUSH2 0x5A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x1141 JUMP JUMPDEST PUSH2 0x5FA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x72 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x5D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x104C JUMP JUMPDEST PUSH1 0x6C SLOAD TIMESTAMP LT PUSH2 0x5FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x67 SLOAD PUSH2 0x612 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP6 PUSH2 0x94C JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x67 SLOAD PUSH2 0x62F SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND DUP5 PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63A DUP4 PUSH2 0x8C5 JUMP JUMPDEST PUSH1 0x65 SLOAD SWAP1 SWAP2 POP PUSH2 0x654 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP4 PUSH2 0x9AA JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x685 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x6A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x6CC JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x6D4 PUSH2 0x9CE JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP14 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x67 DUP1 SLOAD DUP13 DUP5 AND SWAP1 DUP4 AND OR SWAP1 SSTORE PUSH1 0x6A DUP8 SWAP1 SSTORE PUSH1 0x6B DUP7 SWAP1 SSTORE PUSH1 0x6C DUP6 SWAP1 SSTORE PUSH1 0x66 DUP1 SLOAD SWAP3 DUP15 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x68 DUP9 SWAP1 SSTORE PUSH1 0x69 DUP8 SWAP1 SSTORE PUSH1 0x6D DUP7 SWAP1 SSTORE PUSH1 0x6F DUP3 SWAP1 SSTORE PUSH1 0x70 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x753 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x76A PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x77B PUSH2 0x448 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x110C JUMP JUMPDEST POP PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP12 DUP13 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x67 DUP1 SLOAD DUP3 AND SWAP10 DUP12 AND SWAP10 SWAP1 SWAP10 OR SWAP1 SWAP9 SSTORE PUSH1 0x6A SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x6B SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x6C SSTORE PUSH1 0x66 DUP1 SLOAD SWAP1 SWAP6 AND SWAP7 SWAP1 SWAP6 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP3 SSTORE PUSH1 0x68 SSTORE PUSH1 0x69 SSTORE PUSH1 0x6D SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x6F SSTORE PUSH1 0x70 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x6F SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6B SLOAD DUP2 JUMP JUMPDEST PUSH1 0x71 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x83D PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x84E PUSH2 0x448 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x874 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x110C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x89A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0xF6F JUMP JUMPDEST PUSH2 0x8A3 DUP2 PUSH2 0x8E7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x6A SLOAD DUP2 JUMP JUMPDEST PUSH1 0x72 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x6A SLOAD PUSH1 0x0 SWAP1 PUSH2 0x36A SWAP1 PUSH2 0x8E1 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0xA52 JUMP JUMPDEST SWAP1 PUSH2 0xA5E JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x945 DUP3 DUP5 PUSH2 0x1285 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x9A4 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x96D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xECF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xA6A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x9C9 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x96D SWAP3 SWAP2 SWAP1 PUSH2 0xEF3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x9E7 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xA03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xA2E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0xA36 PUSH2 0xAF9 JUMP JUMPDEST PUSH2 0xA3E PUSH2 0xB6C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8A3 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x945 DUP3 DUP5 PUSH2 0x12BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x945 DUP3 DUP5 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xABF DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBDC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x9C9 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xADD SWAP2 SWAP1 PUSH2 0xE67 JUMP JUMPDEST PUSH2 0x9C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x1232 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xB12 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xB2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xA3E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x8A3 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xB85 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xBA1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xBCC JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0xA3E PUSH2 0xBD7 PUSH2 0x8C1 JUMP JUMPDEST PUSH2 0x8E7 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xBEB DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xBF3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xC15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0xFB5 JUMP JUMPDEST PUSH2 0xC1E DUP6 PUSH2 0xCB3 JUMP JUMPDEST PUSH2 0xC3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x11A4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xC56 SWAP2 SWAP1 PUSH2 0xE9F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xC93 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC98 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xCA8 DUP3 DUP3 DUP7 PUSH2 0xCB9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xCC8 JUMPI POP DUP2 PUSH2 0x945 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xCD8 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP2 SWAP1 PUSH2 0xF17 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD1A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x945 DUP3 PUSH2 0xCF2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH2 0xD42 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0xD4B DUP12 PUSH2 0xCF2 JUMP JUMPDEST SWAP10 POP PUSH2 0xD59 PUSH1 0x20 DUP13 ADD PUSH2 0xCF2 JUMP JUMPDEST SWAP9 POP PUSH2 0xD67 PUSH1 0x40 DUP13 ADD PUSH2 0xCF2 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP9 SWAP10 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP10 POP PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP9 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP9 POP PUSH1 0xC0 DUP3 ADD CALLDATALOAD SWAP8 POP PUSH1 0xE0 DUP3 ADD CALLDATALOAD SWAP7 POP PUSH2 0x100 DUP3 ADD CALLDATALOAD SWAP6 POP PUSH2 0x120 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDB8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDCF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDE2 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xDF4 JUMPI PUSH2 0xDF4 PUSH2 0x1339 JUMP JUMPDEST DUP4 DUP2 MUL PUSH1 0x40 MLOAD DUP6 DUP3 DUP3 ADD ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xE13 JUMPI PUSH2 0xE13 PUSH2 0x1339 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP6 DUP2 ADD SWAP4 POP DUP5 DUP7 ADD DUP3 DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 0xE31 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xE5A JUMPI PUSH2 0xE46 DUP2 PUSH2 0xCF2 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 DUP7 ADD PUSH2 0xE35 JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE78 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x945 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE98 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xEB1 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x12DC JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xF36 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x12DC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x139BDD081CDD185C9D1959 PUSH1 0xAA SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x105B1C9958591E481C185C9D1A58DA5C185D1959 PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x9 SWAP1 DUP3 ADD MSTORE PUSH9 0x29B0B6329037BB32B9 PUSH1 0xB9 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x139BDD081DDA1A5D195B1A5CDD1959 PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x54686520616D6F756E7420656E746572656420657863656564732046756E6472 PUSH1 0x40 DUP3 ADD MSTORE PUSH9 0x185A5CD94811DBD85B PUSH1 0xBA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x115E18D95959195908125113C81B1A5B5A5D PUSH1 0x72 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656C6F77206D696E696D756D20616C6C6F636174696F6E0000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x26B7B932903A3430B71030B63637B1B0BA34B7B7 PUSH1 0x61 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x139BDD081CDD185C9D1959081E595D PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1298 JUMPI PUSH2 0x1298 PUSH2 0x1323 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x12B8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x12D7 JUMPI PUSH2 0x12D7 PUSH2 0x1323 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x12F7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x12DF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x9A4 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x131C JUMPI PUSH2 0x131C PUSH2 0x1323 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 SWAP11 0x5C GT DUP5 CODECOPY 0xB4 0x28 OR SWAP15 0xCB 0xDB 0x26 0x1F 0x27 PUSH5 0x7FEBA2F834 0xAE GAS 0xE8 PUSH15 0x6A176AC4F7435B64736F6C63430008 STOP STOP CALLER ",
							"sourceMap": "473:4270:7:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:11535:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "65:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "75:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "97:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "84:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "84:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "75:5:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "167:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "176:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "179:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "169:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "169:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "169:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "126:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "137:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "152:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "157:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "148:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "148:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "161:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "144:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "144:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "133:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "133:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "123:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "123:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "116:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "116:50:8"
															},
															"nodeType": "YulIf",
															"src": "113:2:8"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "44:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "55:5:8",
														"type": ""
													}
												],
												"src": "14:175:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "264:128:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "310:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "319:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "327:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "312:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "312:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "312:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "285:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "294:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "281:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "281:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "306:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "277:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "277:32:8"
															},
															"nodeType": "YulIf",
															"src": "274:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "345:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "376:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "355:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "355:31:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "345:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "230:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "241:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "253:6:8",
														"type": ""
													}
												],
												"src": "194:198:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "620:610:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "667:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "676:6:8"
																				},
																				{
																					"name": "value4",
																					"nodeType": "YulIdentifier",
																					"src": "684:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "669:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "669:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "669:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "641:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "650:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "637:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "637:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "662:3:8",
																		"type": "",
																		"value": "320"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "633:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "633:33:8"
															},
															"nodeType": "YulIf",
															"src": "630:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "702:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "733:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "712:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "712:31:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "702:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "752:50:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "787:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "798:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "783:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "783:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "762:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "762:40:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "752:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "811:50:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "846:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "857:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "842:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "842:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "821:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "821:40:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "811:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "870:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "897:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "908:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "893:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "893:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "880:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "880:32:8"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "870:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "921:43:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "948:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "959:3:8",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "944:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "944:19:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "931:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "931:33:8"
															},
															"variableNames": [
																{
																	"name": "value4",
																	"nodeType": "YulIdentifier",
																	"src": "921:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "973:43:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1000:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1011:3:8",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "996:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "996:19:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "983:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "983:33:8"
															},
															"variableNames": [
																{
																	"name": "value5",
																	"nodeType": "YulIdentifier",
																	"src": "973:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1025:43:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1052:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1063:3:8",
																				"type": "",
																				"value": "192"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1048:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1048:19:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1035:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1035:33:8"
															},
															"variableNames": [
																{
																	"name": "value6",
																	"nodeType": "YulIdentifier",
																	"src": "1025:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1077:43:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1104:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1115:3:8",
																				"type": "",
																				"value": "224"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1100:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1100:19:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1087:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1087:33:8"
															},
															"variableNames": [
																{
																	"name": "value7",
																	"nodeType": "YulIdentifier",
																	"src": "1077:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1129:43:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1156:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1167:3:8",
																				"type": "",
																				"value": "256"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1152:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1152:19:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1139:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1139:33:8"
															},
															"variableNames": [
																{
																	"name": "value8",
																	"nodeType": "YulIdentifier",
																	"src": "1129:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1181:43:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1208:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1219:3:8",
																				"type": "",
																				"value": "288"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1204:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1204:19:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1191:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1191:33:8"
															},
															"variableNames": [
																{
																	"name": "value9",
																	"nodeType": "YulIdentifier",
																	"src": "1181:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256t_uint256t_uint256t_uint256t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "514:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "525:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "537:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "545:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "553:6:8",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "561:6:8",
														"type": ""
													},
													{
														"name": "value4",
														"nodeType": "YulTypedName",
														"src": "569:6:8",
														"type": ""
													},
													{
														"name": "value5",
														"nodeType": "YulTypedName",
														"src": "577:6:8",
														"type": ""
													},
													{
														"name": "value6",
														"nodeType": "YulTypedName",
														"src": "585:6:8",
														"type": ""
													},
													{
														"name": "value7",
														"nodeType": "YulTypedName",
														"src": "593:6:8",
														"type": ""
													},
													{
														"name": "value8",
														"nodeType": "YulTypedName",
														"src": "601:6:8",
														"type": ""
													},
													{
														"name": "value9",
														"nodeType": "YulTypedName",
														"src": "609:6:8",
														"type": ""
													}
												],
												"src": "397:833:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1330:1071:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1340:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1350:2:8",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "1344:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1397:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1406:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1414:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1399:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1399:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1399:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1372:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1381:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1368:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1368:23:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1393:2:8"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1364:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1364:32:8"
															},
															"nodeType": "YulIf",
															"src": "1361:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1432:37:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1459:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1446:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1446:23:8"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "1436:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1478:28:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1488:18:8",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "1482:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1533:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1542:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1550:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1535:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1535:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1535:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1521:6:8"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "1529:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1518:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1518:14:8"
															},
															"nodeType": "YulIf",
															"src": "1515:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1568:32:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1582:9:8"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1593:6:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1578:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1578:22:8"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "1572:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1648:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1657:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1665:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1650:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1650:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1650:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "1627:2:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1631:4:8",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1623:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1623:13:8"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1638:7:8"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "1619:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1619:27:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1612:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1612:35:8"
															},
															"nodeType": "YulIf",
															"src": "1609:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1683:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "1706:2:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1693:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1693:16:8"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "1687:2:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1732:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1734:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1734:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1734:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "1724:2:8"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "1728:2:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1721:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1721:10:8"
															},
															"nodeType": "YulIf",
															"src": "1718:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1763:21:8",
															"value": {
																"arguments": [
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "1777:2:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1781:2:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1773:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1773:11:8"
															},
															"variables": [
																{
																	"name": "_5",
																	"nodeType": "YulTypedName",
																	"src": "1767:2:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1793:23:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1813:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1807:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1807:9:8"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "1797:6:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1825:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1851:6:8"
																			},
																			{
																				"name": "_5",
																				"nodeType": "YulIdentifier",
																				"src": "1859:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1847:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1847:15:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "1864:2:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1843:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1843:24:8"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "1829:10:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1926:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "1928:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1928:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1928:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1885:10:8"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "1897:2:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1882:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1882:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "1905:10:8"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "1917:6:8"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1902:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1902:22:8"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "1879:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1879:46:8"
															},
															"nodeType": "YulIf",
															"src": "1876:2:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1964:2:8",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "1968:10:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1957:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1957:22:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1957:22:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1988:17:8",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1999:6:8"
															},
															"variables": [
																{
																	"name": "dst",
																	"nodeType": "YulTypedName",
																	"src": "1992:3:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2021:6:8"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "2029:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2014:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2014:18:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2014:18:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2041:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "2052:6:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2060:2:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2048:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2048:15:8"
															},
															"variableNames": [
																{
																	"name": "dst",
																	"nodeType": "YulIdentifier",
																	"src": "2041:3:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2072:22:8",
															"value": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "2087:2:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2091:2:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2083:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2083:11:8"
															},
															"variables": [
																{
																	"name": "src",
																	"nodeType": "YulTypedName",
																	"src": "2076:3:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2140:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2149:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2157:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2142:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2142:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2142:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "2117:2:8"
																					},
																					{
																						"name": "_5",
																						"nodeType": "YulIdentifier",
																						"src": "2121:2:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "2113:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2113:11:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "2126:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2109:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2109:20:8"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "2131:7:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2106:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2106:33:8"
															},
															"nodeType": "YulIf",
															"src": "2103:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2175:15:8",
															"value": {
																"name": "value0",
																"nodeType": "YulIdentifier",
																"src": "2184:6:8"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "2179:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2244:126:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "2265:3:8"
																				},
																				{
																					"arguments": [
																						{
																							"name": "src",
																							"nodeType": "YulIdentifier",
																							"src": "2291:3:8"
																						}
																					],
																					"functionName": {
																						"name": "abi_decode_t_address",
																						"nodeType": "YulIdentifier",
																						"src": "2270:20:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2270:25:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2258:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2258:38:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2258:38:8"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2309:19:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "dst",
																					"nodeType": "YulIdentifier",
																					"src": "2320:3:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "2325:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2316:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2316:12:8"
																		},
																		"variableNames": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "2309:3:8"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "2341:19:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "src",
																					"nodeType": "YulIdentifier",
																					"src": "2352:3:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "2357:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2348:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2348:12:8"
																		},
																		"variableNames": [
																			{
																				"name": "src",
																				"nodeType": "YulIdentifier",
																				"src": "2341:3:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2210:1:8"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "2213:2:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2207:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2207:9:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "2217:18:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2219:14:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "2228:1:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2231:1:8",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2224:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2224:9:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "2219:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "2203:3:8",
																"statements": []
															},
															"src": "2199:171:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2379:16:8",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "2389:6:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2379:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1296:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1307:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1319:6:8",
														"type": ""
													}
												],
												"src": "1235:1166:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2484:219:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2530:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2539:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2547:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2532:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2532:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2532:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2505:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2514:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2501:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2501:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2526:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2497:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2497:32:8"
															},
															"nodeType": "YulIf",
															"src": "2494:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2565:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2584:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2578:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2578:16:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "2569:5:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2647:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2656:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2664:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2649:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2649:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2649:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2616:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "2637:5:8"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "2630:6:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2630:13:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2623:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2623:21:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2613:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2613:32:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2606:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2606:40:8"
															},
															"nodeType": "YulIf",
															"src": "2603:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2682:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "2692:5:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2682:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2450:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2461:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2473:6:8",
														"type": ""
													}
												],
												"src": "2406:297:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2778:120:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2824:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2833:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "2841:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2826:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2826:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2826:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2799:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2808:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2795:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2795:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2820:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2791:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2791:32:8"
															},
															"nodeType": "YulIf",
															"src": "2788:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2859:33:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2882:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2869:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2869:23:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2859:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2744:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2755:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2767:6:8",
														"type": ""
													}
												],
												"src": "2708:190:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3040:137:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3050:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "3070:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3064:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3064:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "3054:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3112:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3120:4:8",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3108:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3108:17:8"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3127:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3132:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "3086:21:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3086:53:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3086:53:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3148:23:8",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "3159:3:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "3164:6:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3155:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3155:16:8"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "3148:3:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "3016:3:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3021:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "3032:3:8",
														"type": ""
													}
												],
												"src": "2903:274:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3283:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3293:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3305:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3316:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3301:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3301:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3293:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3335:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3350:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3366:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3371:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3362:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3362:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3375:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3358:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3358:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3346:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3346:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3328:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3328:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3328:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3252:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3263:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3274:4:8",
														"type": ""
													}
												],
												"src": "3182:203:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3547:218:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3557:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3569:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3580:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3565:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3565:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3557:4:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3592:29:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3610:3:8",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3615:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3606:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3606:11:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3619:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "3602:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3602:19:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "3596:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3637:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3652:6:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3660:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3648:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3648:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3630:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3630:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3630:34:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3684:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3695:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3680:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3680:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "3704:6:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "3712:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3700:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3700:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3673:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3673:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3673:43:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3736:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3747:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3732:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3732:18:8"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "3752:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3725:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3725:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3725:34:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3500:9:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "3511:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3519:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3527:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3538:4:8",
														"type": ""
													}
												],
												"src": "3390:375:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3899:145:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "3909:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3921:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3932:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3917:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3917:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3909:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3951:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3966:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3982:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3987:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3978:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3978:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3991:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3974:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3974:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3962:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3962:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3944:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3944:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3944:51:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4015:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4026:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4011:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4011:18:8"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "4031:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4004:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4004:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4004:34:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3860:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3871:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3879:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3890:4:8",
														"type": ""
													}
												],
												"src": "3770:274:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4144:92:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4154:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4166:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4177:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4162:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4162:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4154:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4196:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "4221:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4214:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4214:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4207:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4207:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4189:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4189:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4189:41:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4113:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4124:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4135:4:8",
														"type": ""
													}
												],
												"src": "4049:187:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4362:262:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4379:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4390:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4372:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4372:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4372:21:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4402:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "4422:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4416:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4416:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "4406:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4449:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4460:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4445:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4445:18:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4465:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4438:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4438:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4438:34:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4507:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4515:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4503:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4503:15:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4524:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4535:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4520:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4520:18:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "4540:6:8"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory",
																	"nodeType": "YulIdentifier",
																	"src": "4481:21:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4481:66:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4481:66:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4556:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4572:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "4591:6:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4599:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "4587:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4587:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4608:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "4604:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4604:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "4583:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4583:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4568:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4568:45:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4615:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4564:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4564:54:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4556:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4331:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4342:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4353:4:8",
														"type": ""
													}
												],
												"src": "4241:383:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4803:161:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4820:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4831:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4813:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4813:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4813:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4854:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4865:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4850:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4850:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4870:2:8",
																		"type": "",
																		"value": "11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4843:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4843:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4843:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4893:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4904:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4889:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4889:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4909:13:8",
																		"type": "",
																		"value": "Not started"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4882:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4882:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4882:41:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4932:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4944:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4955:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4940:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4940:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4932:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4780:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4794:4:8",
														"type": ""
													}
												],
												"src": "4629:335:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5143:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5160:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5171:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5153:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5153:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5153:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5194:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5205:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5190:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5190:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5210:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5183:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5183:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5183:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5233:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5244:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5229:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5229:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5249:34:8",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5222:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5222:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5222:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5304:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5315:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5300:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5300:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5320:8:8",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5293:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5293:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5293:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5338:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5350:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5361:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5346:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5346:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5338:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5120:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5134:4:8",
														"type": ""
													}
												],
												"src": "4969:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5550:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5567:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5578:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5560:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5560:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5560:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5601:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5612:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5597:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5597:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5617:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5590:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5590:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5590:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5640:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5651:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5636:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5636:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5656:34:8",
																		"type": "",
																		"value": "Address: insufficient balance fo"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5629:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5629:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5629:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5711:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5722:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5707:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5707:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5727:8:8",
																		"type": "",
																		"value": "r call"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5700:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5700:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5700:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5745:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5757:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5768:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5753:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5753:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5745:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5527:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5541:4:8",
														"type": ""
													}
												],
												"src": "5376:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5957:170:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5974:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5985:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5967:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5967:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5967:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6008:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6019:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6004:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6004:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6024:2:8",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5997:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5997:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5997:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6047:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6058:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6043:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6043:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6063:22:8",
																		"type": "",
																		"value": "Already participated"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6036:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6036:50:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6036:50:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6095:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6107:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6118:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6103:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6103:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6095:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_56d2dfa42e94b97ce4f8bcd78ec72cfde368892527b2f6491331b727bd44b34c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5934:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5948:4:8",
														"type": ""
													}
												],
												"src": "5783:344:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6306:158:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6323:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6334:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6316:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6316:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6316:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6357:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6368:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6353:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6353:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6373:1:8",
																		"type": "",
																		"value": "9"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6346:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6346:29:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6346:29:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6395:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6406:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6391:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6391:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6411:11:8",
																		"type": "",
																		"value": "Sale over"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6384:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6384:39:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6384:39:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6432:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6444:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6455:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6440:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6440:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6432:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_603d2f0f89382de599654e09a8a30363709a2abc5a7d803f8af949136a973c6c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6283:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6297:4:8",
														"type": ""
													}
												],
												"src": "6132:332:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6643:165:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6660:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6671:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6653:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6653:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6653:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6694:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6705:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6690:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6690:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6710:2:8",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6683:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6683:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6683:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6733:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6744:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6729:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6729:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6749:17:8",
																		"type": "",
																		"value": "Not whitelisted"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6722:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6722:45:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6722:45:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6776:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6788:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6799:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6784:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6784:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6776:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_72830cd2e69a452b3989df2d6c124f1de4827fe8ed6c5116814e4b49c3fcbdd0__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6620:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6634:4:8",
														"type": ""
													}
												],
												"src": "6469:339:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6987:231:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7004:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7015:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6997:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6997:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6997:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7038:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7049:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7034:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7034:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7054:2:8",
																		"type": "",
																		"value": "41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7027:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7027:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7027:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7077:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7088:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7073:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7073:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7093:34:8",
																		"type": "",
																		"value": "The amount entered exceeds Fundr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7066:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7066:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7066:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7148:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7159:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7144:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7144:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7164:11:8",
																		"type": "",
																		"value": "aise Goal"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7137:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7137:39:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7137:39:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7185:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7197:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7208:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7193:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7193:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7185:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7322b66b13c822301c69736fce0e723c89dc652154df0aadcb2f45ec4a798cec__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6964:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6978:4:8",
														"type": ""
													}
												],
												"src": "6813:405:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7397:236:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7414:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7425:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7407:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7407:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7407:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7448:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7459:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7444:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7444:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7464:2:8",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7437:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7437:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7437:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7487:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7498:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7483:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7483:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7503:34:8",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7476:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7476:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7476:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7558:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7569:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7554:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7554:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7574:16:8",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7547:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7547:44:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7547:44:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7600:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7612:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7623:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7608:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7608:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7600:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7374:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7388:4:8",
														"type": ""
													}
												],
												"src": "7223:410:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7812:182:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7829:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7840:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7822:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7822:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7822:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7863:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7874:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7859:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7859:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7879:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7852:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7852:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7852:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7902:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7913:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7898:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7898:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7918:34:8",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7891:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7891:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7891:62:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7962:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7974:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7985:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7970:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7970:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7962:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7789:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7803:4:8",
														"type": ""
													}
												],
												"src": "7638:356:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8173:168:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8190:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8201:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8183:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8183:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8183:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8224:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8235:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8220:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8220:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8240:2:8",
																		"type": "",
																		"value": "18"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8213:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8213:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8213:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8263:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8274:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8259:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8259:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8279:20:8",
																		"type": "",
																		"value": "Exceeded IDO limit"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8252:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8252:48:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8252:48:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8309:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8321:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8332:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8317:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8317:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8309:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a62f0c3750bdf64b55014a8446c4a1742deba625e4238690a01562f44c5b0116__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8150:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8164:4:8",
														"type": ""
													}
												],
												"src": "7999:342:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8520:174:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8537:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8548:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8530:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8530:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8530:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8571:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8582:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8567:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8567:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8587:2:8",
																		"type": "",
																		"value": "24"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8560:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8560:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8560:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8610:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8621:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8606:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8606:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8626:26:8",
																		"type": "",
																		"value": "Below minimum allocation"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8599:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8599:54:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8599:54:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8662:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8674:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8685:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8670:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8670:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8662:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c1a0527b69d92f3769756868f9e0e04a4bdadb149ddfac50ec5680e2006dd867__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8497:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8511:4:8",
														"type": ""
													}
												],
												"src": "8346:348:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8873:179:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8890:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8901:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8883:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8883:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8883:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8924:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8935:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8920:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8920:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8940:2:8",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8913:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8913:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8913:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8963:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8974:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8959:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8959:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8979:31:8",
																		"type": "",
																		"value": "Address: call to non-contract"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8952:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8952:59:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8952:59:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9020:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9032:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9043:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9028:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9028:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9020:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8850:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8864:4:8",
														"type": ""
													}
												],
												"src": "8699:353:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9231:170:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9248:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9259:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9241:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9241:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9241:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9282:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9293:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9278:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9278:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9298:2:8",
																		"type": "",
																		"value": "20"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9271:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9271:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9271:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9321:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9332:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9317:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9317:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9337:22:8",
																		"type": "",
																		"value": "More than allocation"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9310:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9310:50:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9310:50:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9369:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9381:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9392:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9377:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9377:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9369:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_ce879fc736948aee7d11788c1dd31a7740846135320e036fae250d429fab6906__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9208:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9222:4:8",
														"type": ""
													}
												],
												"src": "9057:344:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9580:165:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9597:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9608:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9590:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9590:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9590:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9631:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9642:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9627:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9627:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9647:2:8",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9620:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9620:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9620:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9670:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9681:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9666:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9666:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "9686:17:8",
																		"type": "",
																		"value": "Not started yet"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9659:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9659:45:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9659:45:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9713:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9725:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9736:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "9721:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9721:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "9713:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d50d58d9845759fa0f4f88546440afafe96f6ae942a43a12bfaee08bbfd20ab5__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9557:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9571:4:8",
														"type": ""
													}
												],
												"src": "9406:339:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9924:232:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "9941:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9952:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9934:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9934:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9934:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "9975:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9986:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "9971:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9971:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9991:2:8",
																		"type": "",
																		"value": "42"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "9964:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9964:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9964:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10014:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10025:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10010:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10010:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10030:34:8",
																		"type": "",
																		"value": "SafeERC20: ERC20 operation did n"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10003:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10003:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10003:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "10085:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "10096:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "10081:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10081:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "10101:12:8",
																		"type": "",
																		"value": "ot succeed"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10074:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10074:40:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10074:40:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10123:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10135:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10146:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10131:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10131:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10123:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "9901:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "9915:4:8",
														"type": ""
													}
												],
												"src": "9750:406:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10262:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "10272:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10284:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10295:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10280:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10280:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "10272:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "10314:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "10325:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "10307:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10307:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "10307:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "10231:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "10242:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "10253:4:8",
														"type": ""
													}
												],
												"src": "10161:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10391:80:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10418:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10420:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10420:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10420:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10407:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "10414:1:8"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "10410:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10410:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10404:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10404:13:8"
															},
															"nodeType": "YulIf",
															"src": "10401:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10449:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10460:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10463:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "10456:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10456:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "10449:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10374:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10377:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "10383:3:8",
														"type": ""
													}
												],
												"src": "10343:128:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10522:171:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10553:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "10574:1:8"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "10581:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "10586:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "10577:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10577:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10567:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10567:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10567:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10618:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10621:4:8",
																					"type": "",
																					"value": "0x12"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "10611:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10611:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10611:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "r",
																					"nodeType": "YulIdentifier",
																					"src": "10646:1:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10649:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "10639:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10639:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10639:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10542:1:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "10535:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10535:9:8"
															},
															"nodeType": "YulIf",
															"src": "10532:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10673:14:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10682:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10685:1:8"
																	}
																],
																"functionName": {
																	"name": "div",
																	"nodeType": "YulIdentifier",
																	"src": "10678:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10678:9:8"
															},
															"variableNames": [
																{
																	"name": "r",
																	"nodeType": "YulIdentifier",
																	"src": "10673:1:8"
																}
															]
														}
													]
												},
												"name": "checked_div_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10507:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10510:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "r",
														"nodeType": "YulTypedName",
														"src": "10516:1:8",
														"type": ""
													}
												],
												"src": "10476:217:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10750:116:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "10809:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "10811:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10811:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "10811:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "10781:1:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "10774:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10774:9:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "10767:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10767:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "10789:1:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "10800:1:8",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "10796:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "10796:6:8"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "10804:1:8"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "10792:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10792:14:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "10786:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10786:21:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "10763:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10763:45:8"
															},
															"nodeType": "YulIf",
															"src": "10760:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "10840:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "10855:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "10858:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "10851:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10851:9:8"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "10840:7:8"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "10729:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "10732:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "10738:7:8",
														"type": ""
													}
												],
												"src": "10698:168:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "10924:205:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10934:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10943:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "10938:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11003:63:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "11028:3:8"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "11033:1:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "11024:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11024:11:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "11047:3:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "11052:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "11043:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "11043:11:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "11037:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11037:18:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "11017:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11017:39:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11017:39:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "10964:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "10967:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "10961:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10961:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "10975:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "10977:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "10986:1:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10989:2:8",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "10982:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "10982:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "10977:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "10957:3:8",
																"statements": []
															},
															"src": "10953:113:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11092:31:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "11105:3:8"
																						},
																						{
																							"name": "length",
																							"nodeType": "YulIdentifier",
																							"src": "11110:6:8"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "11101:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11101:16:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "11119:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "11094:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11094:27:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11094:27:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "11081:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "11084:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "11078:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11078:13:8"
															},
															"nodeType": "YulIf",
															"src": "11075:2:8"
														}
													]
												},
												"name": "copy_memory_to_memory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "10902:3:8",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "10907:3:8",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "10912:6:8",
														"type": ""
													}
												],
												"src": "10871:258:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11181:88:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "11212:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "11214:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "11214:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "11214:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11197:5:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11208:1:8",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "11204:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11204:6:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "11194:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11194:17:8"
															},
															"nodeType": "YulIf",
															"src": "11191:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "11243:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "11254:5:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11261:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "11250:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11250:13:8"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "11243:3:8"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "11163:5:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "11173:3:8",
														"type": ""
													}
												],
												"src": "11134:135:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11306:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11323:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11330:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11335:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "11326:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11326:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11316:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11316:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11316:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11363:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11366:4:8",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11356:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11356:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11356:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11387:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11390:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11380:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11380:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11380:15:8"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "11274:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "11438:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11455:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11462:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "11467:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "11458:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "11458:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11448:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11448:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11448:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11495:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11498:4:8",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "11488:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11488:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11488:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11519:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "11522:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "11512:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "11512:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "11512:15:8"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "11406:127:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_addresst_addresst_uint256t_uint256t_uint256t_uint256t_uint256t_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7, value8, value9\n    {\n        if slt(sub(dataEnd, headStart), 320) { revert(value4, value4) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n        value2 := abi_decode_t_address(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n        value4 := calldataload(add(headStart, 128))\n        value5 := calldataload(add(headStart, 160))\n        value6 := calldataload(add(headStart, 192))\n        value7 := calldataload(add(headStart, 224))\n        value8 := calldataload(add(headStart, 256))\n        value9 := calldataload(add(headStart, 288))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_memory_ptr(headStart, dataEnd) -> value0\n    {\n        let _1 := 32\n        if slt(sub(dataEnd, headStart), _1) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _2 := 0xffffffffffffffff\n        if gt(offset, _2) { revert(value0, value0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(value0, value0) }\n        let _4 := calldataload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := mul(_4, _1)\n        let memPtr := mload(64)\n        let newFreePtr := add(add(memPtr, _5), _1)\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        let dst := memPtr\n        mstore(memPtr, _4)\n        dst := add(memPtr, _1)\n        let src := add(_3, _1)\n        if gt(add(add(_3, _5), _1), dataEnd) { revert(value0, value0) }\n        let i := value0\n        for { } lt(i, _4) { i := add(i, 1) }\n        {\n            mstore(dst, abi_decode_t_address(src))\n            dst := add(dst, _1)\n            src := add(src, _1)\n        }\n        value0 := memPtr\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 11)\n        mstore(add(headStart, 64), \"Not started\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_56d2dfa42e94b97ce4f8bcd78ec72cfde368892527b2f6491331b727bd44b34c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Already participated\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_603d2f0f89382de599654e09a8a30363709a2abc5a7d803f8af949136a973c6c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 9)\n        mstore(add(headStart, 64), \"Sale over\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_72830cd2e69a452b3989df2d6c124f1de4827fe8ed6c5116814e4b49c3fcbdd0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Not whitelisted\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_7322b66b13c822301c69736fce0e723c89dc652154df0aadcb2f45ec4a798cec__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"The amount entered exceeds Fundr\")\n        mstore(add(headStart, 96), \"aise Goal\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a62f0c3750bdf64b55014a8446c4a1742deba625e4238690a01562f44c5b0116__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 18)\n        mstore(add(headStart, 64), \"Exceeded IDO limit\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_c1a0527b69d92f3769756868f9e0e04a4bdadb149ddfac50ec5680e2006dd867__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Below minimum allocation\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ce879fc736948aee7d11788c1dd31a7740846135320e036fae250d429fab6906__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"More than allocation\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d50d58d9845759fa0f4f88546440afafe96f6ae942a43a12bfaee08bbfd20ab5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Not started yet\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x14D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x9E623AE4 GT PUSH2 0xC3 JUMPI DUP1 PUSH4 0xE58BF43A GT PUSH2 0x7C JUMPI DUP1 PUSH4 0xE58BF43A EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0xE6FD48BC EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0xEF8CDAA4 EQ PUSH2 0x253 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x266 JUMPI DUP1 PUSH4 0xF51F96DD EQ PUSH2 0x279 JUMPI DUP1 PUSH4 0xFA0FCA84 EQ PUSH2 0x281 JUMPI PUSH2 0x14D JUMP JUMPDEST DUP1 PUSH4 0x9E623AE4 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0xA85ADEAB EQ PUSH2 0x1FA JUMPI DUP1 PUSH4 0xB2292994 EQ PUSH2 0x202 JUMPI DUP1 PUSH4 0xD392EAB1 EQ PUSH2 0x215 JUMPI DUP1 PUSH4 0xD45FC1A9 EQ PUSH2 0x21D JUMPI DUP1 PUSH4 0xE3BEF142 EQ PUSH2 0x230 JUMPI PUSH2 0x14D JUMP JUMPDEST DUP1 PUSH4 0x492CC4E3 GT PUSH2 0x115 JUMPI DUP1 PUSH4 0x492CC4E3 EQ PUSH2 0x1C0 JUMPI DUP1 PUSH4 0x5C474F9E EQ PUSH2 0x1C8 JUMPI DUP1 PUSH4 0x5F48F393 EQ PUSH2 0x1D0 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1D8 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1E2 JUMPI DUP1 PUSH4 0x9B2CB5D8 EQ PUSH2 0x1EA JUMPI PUSH2 0x14D JUMP JUMPDEST DUP1 PUSH4 0x1EEF7659 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x2092C12B EQ PUSH2 0x17B JUMPI DUP1 PUSH4 0x35975A37 EQ PUSH2 0x19B JUMPI DUP1 PUSH4 0x3E413BEE EQ PUSH2 0x1A3 JUMPI DUP1 PUSH4 0x3F407B84 EQ PUSH2 0x1B8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x165 PUSH2 0x160 CALLDATASIZE PUSH1 0x4 PUSH2 0xDA6 JUMP JUMPDEST PUSH2 0x294 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x172 SWAP2 SWAP1 PUSH2 0xF0C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x18E PUSH2 0x189 CALLDATASIZE PUSH1 0x4 PUSH2 0xE87 JUMP JUMPDEST PUSH2 0x35F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x172 SWAP2 SWAP1 PUSH2 0x127C JUMP JUMPDEST PUSH2 0x165 PUSH2 0x370 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x3CA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x172 SWAP2 SWAP1 PUSH2 0xEBB JUMP JUMPDEST PUSH2 0x18E PUSH2 0x3D9 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x3DF JUMP JUMPDEST PUSH2 0x165 PUSH2 0x3EE JUMP JUMPDEST PUSH2 0x18E PUSH2 0x3F7 JUMP JUMPDEST PUSH2 0x1E0 PUSH2 0x3FD JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1AB PUSH2 0x448 JUMP JUMPDEST PUSH2 0x18E PUSH2 0x457 JUMP JUMPDEST PUSH2 0x18E PUSH2 0x45D JUMP JUMPDEST PUSH2 0x18E PUSH2 0x463 JUMP JUMPDEST PUSH2 0x165 PUSH2 0x210 CALLDATASIZE PUSH1 0x4 PUSH2 0xE87 JUMP JUMPDEST PUSH2 0x469 JUMP JUMPDEST PUSH2 0x1AB PUSH2 0x65D JUMP JUMPDEST PUSH2 0x1E0 PUSH2 0x22B CALLDATASIZE PUSH1 0x4 PUSH2 0xD23 JUMP JUMPDEST PUSH2 0x66C JUMP JUMPDEST PUSH2 0x165 PUSH2 0x23E CALLDATASIZE PUSH1 0x4 PUSH2 0xD23 JUMP JUMPDEST PUSH2 0x760 JUMP JUMPDEST PUSH2 0x18E PUSH2 0x814 JUMP JUMPDEST PUSH2 0x18E PUSH2 0x81A JUMP JUMPDEST PUSH2 0x165 PUSH2 0x261 CALLDATASIZE PUSH1 0x4 PUSH2 0xD09 JUMP JUMPDEST PUSH2 0x820 JUMP JUMPDEST PUSH2 0x1E0 PUSH2 0x274 CALLDATASIZE PUSH1 0x4 PUSH2 0xD09 JUMP JUMPDEST PUSH2 0x835 JUMP JUMPDEST PUSH2 0x18E PUSH2 0x8A6 JUMP JUMPDEST PUSH2 0x165 PUSH2 0x28F CALLDATASIZE PUSH1 0x4 PUSH2 0xD09 JUMP JUMPDEST PUSH2 0x8AC JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29E PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x2AF PUSH2 0x448 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x2DE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x110C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 0x354 JUMPI PUSH1 0x1 PUSH1 0x72 PUSH1 0x0 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 0x310 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x20 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 0x34C DUP2 PUSH2 0x1308 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2E1 JUMP JUMPDEST POP PUSH1 0x1 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x36A DUP3 PUSH2 0x8C5 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x37A PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x38B PUSH2 0x448 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3B1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x110C JUMP JUMPDEST POP PUSH1 0x70 DUP1 SLOAD PUSH1 0xFF NOT DUP2 AND PUSH1 0xFF SWAP2 DUP3 AND ISZERO OR SWAP2 DUP3 SWAP1 SSTORE AND SWAP1 JUMP JUMPDEST PUSH1 0x67 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x6E SLOAD DUP2 JUMP JUMPDEST PUSH1 0x65 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x69 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x405 PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x416 PUSH2 0x448 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x43C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x110C JUMP JUMPDEST PUSH2 0x446 PUSH1 0x0 PUSH2 0x8E7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x68 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6D SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6C SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x68 SLOAD DUP3 LT ISZERO PUSH2 0x48D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x116D JUMP JUMPDEST PUSH1 0x69 SLOAD DUP3 GT ISZERO PUSH2 0x4AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x11DB JUMP JUMPDEST PUSH1 0x6E SLOAD PUSH2 0x4BC SWAP1 DUP4 PUSH2 0x939 JUMP JUMPDEST PUSH1 0x6E DUP2 SWAP1 SSTORE PUSH1 0x6D SLOAD LT ISZERO PUSH2 0x4E2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x1075 JUMP JUMPDEST PUSH1 0x70 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x509 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0xF4A JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x71 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x539 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0xFFB JUMP JUMPDEST TIMESTAMP PUSH1 0x6B SLOAD LT PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x1209 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x71 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH1 0x6C SLOAD TIMESTAMP GT ISZERO PUSH2 0x5A5 JUMPI PUSH1 0x6F SLOAD DUP3 GT ISZERO PUSH2 0x5A0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x1141 JUMP JUMPDEST PUSH2 0x5FA JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x72 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x1 EQ PUSH2 0x5D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x104C JUMP JUMPDEST PUSH1 0x6C SLOAD TIMESTAMP LT PUSH2 0x5FA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x1029 JUMP JUMPDEST PUSH1 0x67 SLOAD PUSH2 0x612 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER ADDRESS DUP6 PUSH2 0x94C JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x67 SLOAD PUSH2 0x62F SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND SWAP2 AND DUP5 PUSH2 0x9AA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63A DUP4 PUSH2 0x8C5 JUMP JUMPDEST PUSH1 0x65 SLOAD SWAP1 SWAP2 POP PUSH2 0x654 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP4 PUSH2 0x9AA JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x66 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x685 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x6A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x6CC JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x6D4 PUSH2 0x9CE JUMP JUMPDEST PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP14 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x67 DUP1 SLOAD DUP13 DUP5 AND SWAP1 DUP4 AND OR SWAP1 SSTORE PUSH1 0x6A DUP8 SWAP1 SSTORE PUSH1 0x6B DUP7 SWAP1 SSTORE PUSH1 0x6C DUP6 SWAP1 SSTORE PUSH1 0x66 DUP1 SLOAD SWAP3 DUP15 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x68 DUP9 SWAP1 SSTORE PUSH1 0x69 DUP8 SWAP1 SSTORE PUSH1 0x6D DUP7 SWAP1 SSTORE PUSH1 0x6F DUP3 SWAP1 SSTORE PUSH1 0x70 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x753 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x76A PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x77B PUSH2 0x448 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x7A1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x110C JUMP JUMPDEST POP PUSH1 0x65 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP1 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP12 DUP13 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x67 DUP1 SLOAD DUP3 AND SWAP10 DUP12 AND SWAP10 SWAP1 SWAP10 OR SWAP1 SWAP9 SSTORE PUSH1 0x6A SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x6B SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x6C SSTORE PUSH1 0x66 DUP1 SLOAD SWAP1 SWAP6 AND SWAP7 SWAP1 SWAP6 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP3 SSTORE PUSH1 0x68 SSTORE PUSH1 0x69 SSTORE PUSH1 0x6D SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x6F SSTORE PUSH1 0x70 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 0x6F SLOAD DUP2 JUMP JUMPDEST PUSH1 0x6B SLOAD DUP2 JUMP JUMPDEST PUSH1 0x71 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x83D PUSH2 0x8C1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x84E PUSH2 0x448 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x874 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x110C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x89A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0xF6F JUMP JUMPDEST PUSH2 0x8A3 DUP2 PUSH2 0x8E7 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x6A SLOAD DUP2 JUMP JUMPDEST PUSH1 0x72 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x6A SLOAD PUSH1 0x0 SWAP1 PUSH2 0x36A SWAP1 PUSH2 0x8E1 PUSH8 0xDE0B6B3A7640000 DUP6 PUSH2 0xA52 JUMP JUMPDEST SWAP1 PUSH2 0xA5E JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x945 DUP3 DUP5 PUSH2 0x1285 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x9A4 DUP5 PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x96D SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xECF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F NOT DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0xA6A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x9C9 DUP4 PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP5 DUP5 PUSH1 0x40 MLOAD PUSH1 0x24 ADD PUSH2 0x96D SWAP3 SWAP2 SWAP1 PUSH2 0xEF3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x9E7 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xA03 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xA2E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0xA36 PUSH2 0xAF9 JUMP JUMPDEST PUSH2 0xA3E PUSH2 0xB6C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8A3 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x945 DUP3 DUP5 PUSH2 0x12BD JUMP JUMPDEST PUSH1 0x0 PUSH2 0x945 DUP3 DUP5 PUSH2 0x129D JUMP JUMPDEST PUSH1 0x0 PUSH2 0xABF DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0xBDC SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x9C9 JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0xADD SWAP2 SWAP1 PUSH2 0xE67 JUMP JUMPDEST PUSH2 0x9C9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x1232 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xB12 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xB2E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xA3E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x8A3 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xB85 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xBA1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x10BE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xBCC JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0xA3E PUSH2 0xBD7 PUSH2 0x8C1 JUMP JUMPDEST PUSH2 0x8E7 JUMP JUMPDEST PUSH1 0x60 PUSH2 0xBEB DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0xBF3 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0xC15 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0xFB5 JUMP JUMPDEST PUSH2 0xC1E DUP6 PUSH2 0xCB3 JUMP JUMPDEST PUSH2 0xC3A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP1 PUSH2 0x11A4 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0xC56 SWAP2 SWAP1 PUSH2 0xE9F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0xC93 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xC98 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0xCA8 DUP3 DUP3 DUP7 PUSH2 0xCB9 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0xCC8 JUMPI POP DUP2 PUSH2 0x945 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0xCD8 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D5 SWAP2 SWAP1 PUSH2 0xF17 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x35A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD1A JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x945 DUP3 PUSH2 0xCF2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH2 0x140 DUP12 DUP14 SUB SLT ISZERO PUSH2 0xD42 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0xD4B DUP12 PUSH2 0xCF2 JUMP JUMPDEST SWAP10 POP PUSH2 0xD59 PUSH1 0x20 DUP13 ADD PUSH2 0xCF2 JUMP JUMPDEST SWAP9 POP PUSH2 0xD67 PUSH1 0x40 DUP13 ADD PUSH2 0xCF2 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP9 SWAP10 PUSH1 0x60 DUP2 ADD CALLDATALOAD SWAP10 POP PUSH1 0x80 DUP2 ADD CALLDATALOAD SWAP9 PUSH1 0xA0 DUP3 ADD CALLDATALOAD SWAP9 POP PUSH1 0xC0 DUP3 ADD CALLDATALOAD SWAP8 POP PUSH1 0xE0 DUP3 ADD CALLDATALOAD SWAP7 POP PUSH2 0x100 DUP3 ADD CALLDATALOAD SWAP6 POP PUSH2 0x120 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xDB8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xDCF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xDE2 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xDF4 JUMPI PUSH2 0xDF4 PUSH2 0x1339 JUMP JUMPDEST DUP4 DUP2 MUL PUSH1 0x40 MLOAD DUP6 DUP3 DUP3 ADD ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 0xE13 JUMPI PUSH2 0xE13 PUSH2 0x1339 JUMP JUMPDEST PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP6 DUP2 ADD SWAP4 POP DUP5 DUP7 ADD DUP3 DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 0xE31 JUMPI DUP8 DUP9 REVERT JUMPDEST DUP8 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 0xE5A JUMPI PUSH2 0xE46 DUP2 PUSH2 0xCF2 JUMP JUMPDEST DUP6 MSTORE PUSH1 0x1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 DUP7 ADD PUSH2 0xE35 JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE78 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x945 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE98 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0xEB1 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x12DC JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0xF36 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x12DC JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xB SWAP1 DUP3 ADD MSTORE PUSH11 0x139BDD081CDD185C9D1959 PUSH1 0xAA SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x1C8818D85B1B PUSH1 0xD2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x105B1C9958591E481C185C9D1A58DA5C185D1959 PUSH1 0x62 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x9 SWAP1 DUP3 ADD MSTORE PUSH9 0x29B0B6329037BB32B9 PUSH1 0xB9 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x139BDD081DDA1A5D195B1A5CDD1959 PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x29 SWAP1 DUP3 ADD MSTORE PUSH32 0x54686520616D6F756E7420656E746572656420657863656564732046756E6472 PUSH1 0x40 DUP3 ADD MSTORE PUSH9 0x185A5CD94811DBD85B PUSH1 0xBA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x12 SWAP1 DUP3 ADD MSTORE PUSH18 0x115E18D95959195908125113C81B1A5B5A5D PUSH1 0x72 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x18 SWAP1 DUP3 ADD MSTORE PUSH32 0x42656C6F77206D696E696D756D20616C6C6F636174696F6E0000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1D SWAP1 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x14 SWAP1 DUP3 ADD MSTORE PUSH20 0x26B7B932903A3430B71030B63637B1B0BA34B7B7 PUSH1 0x61 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x139BDD081CDD185C9D1959081E595D PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2A SWAP1 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x40 DUP3 ADD MSTORE PUSH10 0x1BDD081CDD58D8D95959 PUSH1 0xB2 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1298 JUMPI PUSH2 0x1298 PUSH2 0x1323 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x12B8 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x12D7 JUMPI PUSH2 0x12D7 PUSH2 0x1323 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x12F7 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x12DF JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x9A4 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x131C JUMPI PUSH2 0x131C PUSH2 0x1323 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 SWAP11 0x5C GT DUP5 CODECOPY 0xB4 0x28 OR SWAP15 0xCB 0xDB 0x26 0x1F 0x27 PUSH5 0x7FEBA2F834 0xAE GAS 0xE8 PUSH15 0x6A176AC4F7435B64736F6C63430008 STOP STOP CALLER ",
							"sourceMap": "473:4270:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1114:246;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4570:171;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;2985:125::-;;;:::i;694:19::-;;;:::i;:::-;;;;;;;:::i;910:25::-;;;:::i;634:23::-;;;:::i;987:::-;;;:::i;750:24::-;;;:::i;1934:101:0:-;;;:::i;:::-;;1302:85;;;:::i;720:24:7:-;;;:::i;878:26::-;;;:::i;845:27::-;;;:::i;3116:1236::-;;;;;;:::i;:::-;;:::i;663:25::-;;;:::i;1366:829::-;;;;;;:::i;:::-;;:::i;2201:778::-;;;;;;:::i;:::-;;:::i;941:39::-;;;:::i;810:29::-;;;:::i;1017:41::-;;;;;;:::i;:::-;;:::i;2184:198:0:-;;;;;;:::i;:::-;;:::i;780:24:7:-;;;:::i;1064:43::-;;;;;;:::i;:::-;;:::i;1114:246::-;1217:4;1525:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;;;;;;;;;1242:9:7::1;1237:96;1257:7;:14;1253:1;:18;1237:96;;;1318:4;1292:11;:23;1304:7;1312:1;1304:10;;;;;;-1:-1:-1::0;;;1304:10:7::1;;;;;;;;;;::::0;;::::1;::::0;;;;;;;-1:-1:-1;;;;;1292:23:7::1;::::0;;;::::1;::::0;;;;;;-1:-1:-1;1292:23:7;:30;;-1:-1:-1;;1292:30:7::1;::::0;::::1;;::::0;;;::::1;::::0;;1273:3;::::1;::::0;::::1;:::i;:::-;;;;1237:96;;;;1349:4;1342:11;;1584:1:0;1114:246:7::0;;;:::o;4570:171::-;4669:7;4699:35;4719:14;4699:19;:35::i;:::-;4692:42;4570:171;-1:-1:-1;;4570:171:7:o;2985:125::-;3033:4;1525:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;-1:-1:-1;3064:11:7::1;::::0;;-1:-1:-1;;3049:26:7;::::1;3064:11;::::0;;::::1;3063:12;3049:26;::::0;;;;3092:11:::1;2985:125:::0;:::o;694:19::-;;;-1:-1:-1;;;;;694:19:7;;:::o;910:25::-;;;;:::o;634:23::-;;;-1:-1:-1;;;;;634:23:7;;:::o;987:::-;;;;;;:::o;750:24::-;;;;:::o;1934:101:0:-;1525:12;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;1998:30:::1;2025:1;1998:18;:30::i;:::-;1934:101::o:0;1302:85::-;1374:6;;-1:-1:-1;;;;;1374:6:0;1302:85;:::o;720:24:7:-;;;;:::o;878:26::-;;;;:::o;845:27::-;;;;:::o;3116:1236::-;3170:4;3202:9;;3194:4;:17;;3186:54;;;;-1:-1:-1;;;3186:54:7;;;;;;;:::i;:::-;3266:9;;3258:4;:17;;3250:50;;;;-1:-1:-1;;;3250:50:7;;;;;;;:::i;:::-;3323:10;;:20;;3338:4;3323:14;:20::i;:::-;3310:10;:33;;;3388:11;;-1:-1:-1;3374:25:7;3353:113;;;;-1:-1:-1;;;3353:113:7;;;;;;;:::i;:::-;3484:11;;;;:19;;:11;:19;3476:43;;;;-1:-1:-1;;;3476:43:7;;;;;;;:::i;:::-;3547:10;3537:21;;;;:9;:21;;;;;;;;:30;3529:63;;;;-1:-1:-1;;;3529:63:7;;;;;;;:::i;:::-;3627:15;3610:14;;:32;3602:60;;;;-1:-1:-1;;;3602:60:7;;;;;;;:::i;:::-;3683:10;3673:21;;;;:9;:21;;;;;:28;;-1:-1:-1;;3673:28:7;3697:4;3673:28;;;3716:12;;3731:15;-1:-1:-1;3712:280:7;;;3778:24;;3770:4;:32;;3762:63;;;;-1:-1:-1;;;3762:63:7;;;;;;;:::i;:::-;3712:280;;;3876:10;3864:23;;;;:11;:23;;;;;;;;:31;;:23;:31;3856:59;;;;-1:-1:-1;;;3856:59:7;;;;;;;:::i;:::-;3955:12;;3937:15;:30;3929:52;;;;-1:-1:-1;;;3929:52:7;;;;;;;:::i;:::-;4019:4;;4001:119;;-1:-1:-1;;;;;4019:4:7;4055:10;4087:4;4106;4001:40;:119::i;:::-;4167:10;;4148:4;;4130:54;;-1:-1:-1;;;;;4148:4:7;;;;4167:10;4179:4;4130:36;:54::i;:::-;4194:23;4220:25;4240:4;4220:19;:25::i;:::-;4273:8;;4194:51;;-1:-1:-1;4255:69:7;;-1:-1:-1;;;;;4273:8:7;4296:10;4194:51;4255:40;:69::i;:::-;-1:-1:-1;4341:4:7;;3116:1236;-1:-1:-1;;3116:1236:7:o;663:25::-;;;-1:-1:-1;;;;;663:25:7;;:::o;1366:829::-;539:13:1;;;;;;;;:30;;-1:-1:-1;557:12:1;;;;556:13;539:30;531:89;;;;-1:-1:-1;;;531:89:1;;;;;;;:::i;:::-;631:19;654:13;;;;;;653:14;677:98;;;;711:13;:20;;-1:-1:-1;;;;711:20:1;;;;;745:19;727:4;745:19;;;677:98;1784:16:7::1;:14;:16::i;:::-;1810:8;:20:::0;;-1:-1:-1;;;;;1810:20:7;;::::1;-1:-1:-1::0;;;;;;1810:20:7;;::::1;;::::0;;;1840:4:::1;:12:::0;;;;::::1;::::0;;::::1;;::::0;;1862:9:::1;:22:::0;;;1894:14:::1;:32:::0;;;1936:12:::1;:28:::0;;;1974:10:::1;:24:::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;2008:9:::1;:22:::0;;;2040:9:::1;:22:::0;;;2072:11:::1;:26:::0;;;2108:24:::1;:52:::0;;;2170:11:::1;:18:::0;;-1:-1:-1;;2170:18:7::1;1810:20:::0;2170:18:::1;::::0;;797:66:1;;;;847:5;831:21;;-1:-1:-1;;831:21:1;;;797:66;1366:829:7;;;;;;;;;;;:::o;2201:778::-;2548:4;1525:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;-1:-1:-1;2564:8:7::1;:20:::0;;-1:-1:-1;;;;;;2564:20:7;;::::1;-1:-1:-1::0;;;;;2564:20:7;;::::1;;::::0;;;2595:4:::1;:12:::0;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;2618:9:::1;:22:::0;;;;2651:14:::1;:32:::0;;;;2693:12:::1;:28:::0;2732:10:::1;:24:::0;;;;::::1;::::0;;;::::1;::::0;;;::::1;::::0;;;2767:9:::1;:22:::0;2800:9:::1;:22:::0;2833:11:::1;:26:::0;;;;2870:24:::1;:52:::0;2933:11:::1;:18:::0;;-1:-1:-1;;2933:18:7::1;-1:-1:-1::0;2933:18:7;;::::1;::::0;;;-1:-1:-1;2201:778:7:o;941:39::-;;;;:::o;810:29::-;;;;:::o;1017:41::-;;;;;;;;;;;;;;;:::o;2184:198:0:-;1525:12;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2272:22:0;::::1;2264:73;;;;-1:-1:-1::0;;;2264:73:0::1;;;;;;;:::i;:::-;2347:28;2366:8;2347:18;:28::i;:::-;2184:198:::0;:::o;780:24:7:-;;;;:::o;1064:43::-;;;;;;;;;;;;;;;:::o;876:96:5:-;955:10;876:96;:::o;4358:206:7:-;4526:9;;4458:7;;4488:48;;:33;4496:4;4506:14;4488:17;:33::i;:::-;:37;;:48::i;2536:187:0:-;2628:6;;;-1:-1:-1;;;;;2644:17:0;;;-1:-1:-1;;;;;;2644:17:0;;;;;;;2676:40;;2628:6;;;2644:17;2628:6;;2676:40;;2609:16;;2676:40;2536:187;;:::o;2752:96:6:-;2810:7;2836:5;2840:1;2836;:5;:::i;:::-;2829:12;2752:96;-1:-1:-1;;;2752:96:6:o;967:252:3:-;1116:96;1136:5;1166:27;;;1195:4;1201:2;1205:5;1143:68;;;;;;;;;;:::i;:::-;;;;-1:-1:-1;;1143:68:3;;;;;;;;;;;;;;-1:-1:-1;;;;;1143:68:3;-1:-1:-1;;;;;;1143:68:3;;;;;;;;;;1116:19;:96::i;:::-;967:252;;;;:::o;745:216::-;868:86;888:5;918:23;;;943:2;947:5;895:58;;;;;;;;;:::i;868:86::-;745:216;;;:::o;988:126:0:-;539:13:1;;;;;;;;:30;;-1:-1:-1;557:12:1;;;;556:13;539:30;531:89;;;;-1:-1:-1;;;531:89:1;;;;;;;:::i;:::-;631:19;654:13;;;;;;653:14;677:98;;;;711:13;:20;;-1:-1:-1;;;;711:20:1;;;;;745:19;727:4;745:19;;;677:98;1045:26:0::1;:24;:26::i;:::-;1081;:24;:26::i;:::-;801:14:1::0;797:66;;;847:5;831:21;;-1:-1:-1;;831:21:1;;;988:126:0;:::o;3462:96:6:-;3520:7;3546:5;3550:1;3546;:5;:::i;3847:96::-;3905:7;3931:5;3935:1;3931;:5;:::i;3306:717:3:-;3736:23;3762:69;3790:4;3762:69;;;;;;;;;;;;;;;;;3770:5;-1:-1:-1;;;;;3762:27:3;;;:69;;;;;:::i;:::-;3845:17;;3736:95;;-1:-1:-1;3845:21:3;3841:176;;3940:10;3929:30;;;;;;;;;;;;:::i;:::-;3921:85;;;;-1:-1:-1;;;3921:85:3;;;;;;;:::i;807:64:5:-;539:13:1;;;;;;;;:30;;-1:-1:-1;557:12:1;;;;556:13;539:30;531:89;;;;-1:-1:-1;;;531:89:1;;;;;;;:::i;:::-;631:19;654:13;;;;;;653:14;677:98;;;;711:13;:20;;-1:-1:-1;;;;711:20:1;;;;;745:19;727:4;745:19;;;801:14;797:66;;;847:5;831:21;;-1:-1:-1;;831:21:1;;;807:64:5;:::o;1120:106:0:-;539:13:1;;;;;;;;:30;;-1:-1:-1;557:12:1;;;;556:13;539:30;531:89;;;;-1:-1:-1;;;531:89:1;;;;;;;:::i;:::-;631:19;654:13;;;;;;653:14;677:98;;;;711:13;:20;;-1:-1:-1;;;;711:20:1;;;;;745:19;727:4;745:19;;;677:98;1187:32:0::1;1206:12;:10;:12::i;:::-;1187:18;:32::i;3525:223:4:-:0;3658:12;3689:52;3711:6;3719:4;3725:1;3728:12;3689:21;:52::i;:::-;3682:59;3525:223;-1:-1:-1;;;;3525:223:4:o;4612:499::-;4777:12;4834:5;4809:21;:30;;4801:81;;;;-1:-1:-1;;;4801:81:4;;;;;;;:::i;:::-;4900:18;4911:6;4900:10;:18::i;:::-;4892:60;;;;-1:-1:-1;;;4892:60:4;;;;;;;:::i;:::-;4964:12;4978:23;5005:6;-1:-1:-1;;;;;5005:11:4;5024:5;5031:4;5005:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4963:73;;;;5053:51;5070:7;5079:10;5091:12;5053:16;:51::i;:::-;5046:58;4612:499;-1:-1:-1;;;;;;;4612:499:4:o;782:377::-;1098:20;1144:8;;;782:377::o;6275:692::-;6421:12;6449:7;6445:516;;;-1:-1:-1;6479:10:4;6472:17;;6445:516;6590:17;;:21;6586:365;;6784:10;6778:17;6844:15;6831:10;6827:2;6823:19;6816:44;6733:145;6923:12;6916:20;;-1:-1:-1;;;6916:20:4;;;;;;;;:::i;14:175:8:-;84:20;;-1:-1:-1;;;;;133:31:8;;123:42;;113:2;;179:1;176;169:12;194:198;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;397:833::-;;;;;;;;;;;662:3;650:9;641:7;637:23;633:33;630:2;;;684:6;676;669:22;630:2;712:31;733:9;712:31;:::i;:::-;702:41;;762:40;798:2;787:9;783:18;762:40;:::i;:::-;752:50;;821:40;857:2;846:9;842:18;821:40;:::i;:::-;620:610;;;;-1:-1:-1;811:50:8;;908:2;893:18;;880:32;;-1:-1:-1;959:3:8;944:19;;931:33;;1011:3;996:19;;983:33;;-1:-1:-1;1063:3:8;1048:19;;1035:33;;-1:-1:-1;1115:3:8;1100:19;;1087:33;;-1:-1:-1;1167:3:8;1152:19;;1139:33;;-1:-1:-1;1219:3:8;1204:19;;;1191:33;;-1:-1:-1;620:610:8;-1:-1:-1;;620:610:8:o;1235:1166::-;;1350:2;1393;1381:9;1372:7;1368:23;1364:32;1361:2;;;1414:6;1406;1399:22;1361:2;1459:9;1446:23;1488:18;1529:2;1521:6;1518:14;1515:2;;;1550:6;1542;1535:22;1515:2;1593:6;1582:9;1578:22;1568:32;;1638:7;1631:4;1627:2;1623:13;1619:27;1609:2;;1665:6;1657;1650:22;1609:2;1706;1693:16;1728:2;1724;1721:10;1718:2;;;1734:18;;:::i;:::-;1781:2;1777;1773:11;1813:2;1807:9;1864:2;1859;1851:6;1847:15;1843:24;1917:6;1905:10;1902:22;1897:2;1885:10;1882:18;1879:46;1876:2;;;1928:18;;:::i;:::-;1964:2;1957:22;2014:18;;;2048:15;;;;-1:-1:-1;2083:11:8;;;2113;;;2109:20;;2106:33;-1:-1:-1;2103:2:8;;;2157:6;2149;2142:22;2103:2;2184:6;2175:15;;2199:171;2213:2;2210:1;2207:9;2199:171;;;2270:25;2291:3;2270:25;:::i;:::-;2258:38;;2231:1;2224:9;;;;;2316:12;;;;2348;;2199:171;;;-1:-1:-1;2389:6:8;1330:1071;-1:-1:-1;;;;;;;;1330:1071:8:o;2406:297::-;;2526:2;2514:9;2505:7;2501:23;2497:32;2494:2;;;2547:6;2539;2532:22;2494:2;2584:9;2578:16;2637:5;2630:13;2623:21;2616:5;2613:32;2603:2;;2664:6;2656;2649:22;2708:190;;2820:2;2808:9;2799:7;2795:23;2791:32;2788:2;;;2841:6;2833;2826:22;2788:2;-1:-1:-1;2869:23:8;;2778:120;-1:-1:-1;2778:120:8:o;2903:274::-;;3070:6;3064:13;3086:53;3132:6;3127:3;3120:4;3112:6;3108:17;3086:53;:::i;:::-;3155:16;;;;;3040:137;-1:-1:-1;;3040:137:8:o;3182:203::-;-1:-1:-1;;;;;3346:32:8;;;;3328:51;;3316:2;3301:18;;3283:102::o;3390:375::-;-1:-1:-1;;;;;3648:15:8;;;3630:34;;3700:15;;;;3695:2;3680:18;;3673:43;3747:2;3732:18;;3725:34;;;;3580:2;3565:18;;3547:218::o;3770:274::-;-1:-1:-1;;;;;3962:32:8;;;;3944:51;;4026:2;4011:18;;4004:34;3932:2;3917:18;;3899:145::o;4049:187::-;4214:14;;4207:22;4189:41;;4177:2;4162:18;;4144:92::o;4241:383::-;;4390:2;4379:9;4372:21;4422:6;4416:13;4465:6;4460:2;4449:9;4445:18;4438:34;4481:66;4540:6;4535:2;4524:9;4520:18;4515:2;4507:6;4503:15;4481:66;:::i;:::-;4608:2;4587:15;-1:-1:-1;;4583:29:8;4568:45;;;;4615:2;4564:54;;4362:262;-1:-1:-1;;4362:262:8:o;4629:335::-;4831:2;4813:21;;;4870:2;4850:18;;;4843:30;-1:-1:-1;;;4904:2:8;4889:18;;4882:41;4955:2;4940:18;;4803:161::o;4969:402::-;5171:2;5153:21;;;5210:2;5190:18;;;5183:30;5249:34;5244:2;5229:18;;5222:62;-1:-1:-1;;;5315:2:8;5300:18;;5293:36;5361:3;5346:19;;5143:228::o;5376:402::-;5578:2;5560:21;;;5617:2;5597:18;;;5590:30;5656:34;5651:2;5636:18;;5629:62;-1:-1:-1;;;5722:2:8;5707:18;;5700:36;5768:3;5753:19;;5550:228::o;5783:344::-;5985:2;5967:21;;;6024:2;6004:18;;;5997:30;-1:-1:-1;;;6058:2:8;6043:18;;6036:50;6118:2;6103:18;;5957:170::o;6132:332::-;6334:2;6316:21;;;6373:1;6353:18;;;6346:29;-1:-1:-1;;;6406:2:8;6391:18;;6384:39;6455:2;6440:18;;6306:158::o;6469:339::-;6671:2;6653:21;;;6710:2;6690:18;;;6683:30;-1:-1:-1;;;6744:2:8;6729:18;;6722:45;6799:2;6784:18;;6643:165::o;6813:405::-;7015:2;6997:21;;;7054:2;7034:18;;;7027:30;7093:34;7088:2;7073:18;;7066:62;-1:-1:-1;;;7159:2:8;7144:18;;7137:39;7208:3;7193:19;;6987:231::o;7223:410::-;7425:2;7407:21;;;7464:2;7444:18;;;7437:30;7503:34;7498:2;7483:18;;7476:62;-1:-1:-1;;;7569:2:8;7554:18;;7547:44;7623:3;7608:19;;7397:236::o;7638:356::-;7840:2;7822:21;;;7859:18;;;7852:30;7918:34;7913:2;7898:18;;7891:62;7985:2;7970:18;;7812:182::o;7999:342::-;8201:2;8183:21;;;8240:2;8220:18;;;8213:30;-1:-1:-1;;;8274:2:8;8259:18;;8252:48;8332:2;8317:18;;8173:168::o;8346:348::-;8548:2;8530:21;;;8587:2;8567:18;;;8560:30;8626:26;8621:2;8606:18;;8599:54;8685:2;8670:18;;8520:174::o;8699:353::-;8901:2;8883:21;;;8940:2;8920:18;;;8913:30;8979:31;8974:2;8959:18;;8952:59;9043:2;9028:18;;8873:179::o;9057:344::-;9259:2;9241:21;;;9298:2;9278:18;;;9271:30;-1:-1:-1;;;9332:2:8;9317:18;;9310:50;9392:2;9377:18;;9231:170::o;9406:339::-;9608:2;9590:21;;;9647:2;9627:18;;;9620:30;-1:-1:-1;;;9681:2:8;9666:18;;9659:45;9736:2;9721:18;;9580:165::o;9750:406::-;9952:2;9934:21;;;9991:2;9971:18;;;9964:30;10030:34;10025:2;10010:18;;10003:62;-1:-1:-1;;;10096:2:8;10081:18;;10074:40;10146:3;10131:19;;9924:232::o;10161:177::-;10307:25;;;10295:2;10280:18;;10262:76::o;10343:128::-;;10414:1;10410:6;10407:1;10404:13;10401:2;;;10420:18;;:::i;:::-;-1:-1:-1;10456:9:8;;10391:80::o;10476:217::-;;10542:1;10532:2;;-1:-1:-1;;;10567:31:8;;10621:4;10618:1;10611:15;10649:4;10574:1;10639:15;10532:2;-1:-1:-1;10678:9:8;;10522:171::o;10698:168::-;;10804:1;10800;10796:6;10792:14;10789:1;10786:21;10781:1;10774:9;10767:17;10763:45;10760:2;;;10811:18;;:::i;:::-;-1:-1:-1;10851:9:8;;10750:116::o;10871:258::-;10943:1;10953:113;10967:6;10964:1;10961:13;10953:113;;;11043:11;;;11037:18;11024:11;;;11017:39;10989:2;10982:10;10953:113;;;11084:6;11081:1;11078:13;11075:2;;;-1:-1:-1;;11119:1:8;11101:16;;11094:27;10924:205::o;11134:135::-;;-1:-1:-1;;11194:17:8;;11191:2;;;11214:18;;:::i;:::-;-1:-1:-1;11261:1:8;11250:13;;11181:88::o;11274:127::-;11335:10;11330:3;11326:20;11323:1;11316:31;11366:4;11363:1;11356:15;11390:4;11387:1;11380:15;11406:127;11467:10;11462:3;11458:20;11455:1;11448:31;11498:4;11495:1;11488:15;11522:4;11519:1;11512:15"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "999400",
								"executionCost": "1041",
								"totalCost": "1000441"
							},
							"external": {
								"DAOAddress()": "1159",
								"SET(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": "infinite",
								"alphaSEA()": "1093",
								"boughtSEA(address)": "1330",
								"calculateSaleQuote(uint256)": "infinite",
								"endTimestamp()": "1073",
								"initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": "infinite",
								"maxAmount()": "1095",
								"minAmount()": "1161",
								"owner()": "1181",
								"purchaseaSEA(uint256)": "infinite",
								"remainingPurchasesMaxAmt()": "1050",
								"renounceOwnership()": "23596",
								"salePrice()": "1138",
								"saleStarted()": "1085",
								"sellAmount()": "1140",
								"setStart()": "22082",
								"startTimestamp()": "1072",
								"toTalAmount()": "1051",
								"transferOwnership(address)": "23790",
								"usdc()": "1160",
								"whiteListBuyers(address[])": "infinite",
								"whiteListed(address)": "1396"
							},
							"internal": {
								"_calculateSaleQuote(uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 473,
									"end": 4743,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 473,
									"end": 4743,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220989a5c118439b428179ecbdb261f27647feba2f834ae5ae86e6a176ac4f7435b64736f6c63430008000033",
									".code": [
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "9E623AE4"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "E58BF43A"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "E58BF43A"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "E6FD48BC"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "EF8CDAA4"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "F2FDE38B"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "F51F96DD"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "FA0FCA84"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "9E623AE4"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "A85ADEAB"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "B2292994"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "D392EAB1"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "D45FC1A9"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "E3BEF142"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "tag",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "492CC4E3"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "492CC4E3"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "5C474F9E"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "5F48F393"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "715018A6"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "8DA5CB5B"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "9B2CB5D8"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "tag",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "1EEF7659"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "2092C12B"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "35975A37"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "3E413BEE"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "3F407B84"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 473,
											"end": 4743,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "tag",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "tag",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "tag",
											"source": 7,
											"value": "36"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "tag",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2985,
											"end": 3110,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 2985,
											"end": 3110,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2985,
											"end": 3110,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 2985,
											"end": 3110,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 2985,
											"end": 3110,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 694,
											"end": 713,
											"name": "tag",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 694,
											"end": 713,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 694,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 694,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 694,
											"end": 713,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 694,
											"end": 713,
											"name": "tag",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 694,
											"end": 713,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 694,
											"end": 713,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 694,
											"end": 713,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 694,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 694,
											"end": 713,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 694,
											"end": 713,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 694,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 694,
											"end": 713,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 910,
											"end": 935,
											"name": "tag",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 910,
											"end": 935,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 910,
											"end": 935,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 910,
											"end": 935,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 910,
											"end": 935,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 634,
											"end": 657,
											"name": "tag",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 634,
											"end": 657,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 634,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 634,
											"end": 657,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 634,
											"end": 657,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "tag",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 750,
											"end": 774,
											"name": "tag",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 750,
											"end": 774,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 750,
											"end": 774,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 750,
											"end": 774,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 750,
											"end": 774,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 720,
											"end": 744,
											"name": "tag",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 720,
											"end": 744,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 720,
											"end": 744,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 720,
											"end": 744,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 720,
											"end": 744,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 878,
											"end": 904,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 878,
											"end": 904,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 878,
											"end": 904,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 878,
											"end": 904,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 878,
											"end": 904,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 845,
											"end": 872,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 845,
											"end": 872,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 845,
											"end": 872,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 845,
											"end": 872,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 845,
											"end": 872,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "tag",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "75"
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "37"
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "tag",
											"source": 7,
											"value": "75"
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "76"
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 663,
											"end": 688,
											"name": "tag",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 663,
											"end": 688,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 663,
											"end": 688,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "44"
										},
										{
											"begin": 663,
											"end": 688,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 663,
											"end": 688,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "tag",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "60"
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "tag",
											"source": 7,
											"value": "82"
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "tag",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "83"
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "tag",
											"source": 7,
											"value": "86"
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 941,
											"end": 980,
											"name": "tag",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 941,
											"end": 980,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 941,
											"end": 980,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 941,
											"end": 980,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 941,
											"end": 980,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 810,
											"end": 839,
											"name": "tag",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 810,
											"end": 839,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 810,
											"end": 839,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 810,
											"end": 839,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 810,
											"end": 839,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "tag",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "tag",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "97"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "tag",
											"source": 0,
											"value": "101"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 780,
											"end": 804,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 780,
											"end": 804,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 780,
											"end": 804,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "35"
										},
										{
											"begin": 780,
											"end": 804,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 780,
											"end": 804,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "29"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "107"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "tag",
											"source": 7,
											"value": "107"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "tag",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1217,
											"end": 1221,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "114"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1242,
											"end": 1251,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1237,
											"end": 1333,
											"name": "tag",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 1237,
											"end": 1333,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1257,
											"end": 1264,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1257,
											"end": 1271,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1253,
											"end": 1254,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1253,
											"end": 1271,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1237,
											"end": 1333,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1237,
											"end": 1333,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 1237,
											"end": 1333,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1318,
											"end": 1322,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1292,
											"end": 1303,
											"name": "PUSH",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1304,
											"end": 1311,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1312,
											"end": 1313,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "PUSH",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "PUSH",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "tag",
											"source": 7,
											"value": "121"
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1304,
											"end": 1314,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": 1292,
											"end": 1315,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1292,
											"end": 1322,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1273,
											"end": 1276,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1273,
											"end": 1276,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "122"
										},
										{
											"begin": 1273,
											"end": 1276,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1273,
											"end": 1276,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "123"
										},
										{
											"begin": 1273,
											"end": 1276,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1273,
											"end": 1276,
											"name": "tag",
											"source": 7,
											"value": "122"
										},
										{
											"begin": 1273,
											"end": 1276,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1273,
											"end": 1276,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1273,
											"end": 1276,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1273,
											"end": 1276,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1237,
											"end": 1333,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "118"
										},
										{
											"begin": 1237,
											"end": 1333,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 1237,
											"end": 1333,
											"name": "tag",
											"source": 7,
											"value": "119"
										},
										{
											"begin": 1237,
											"end": 1333,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1237,
											"end": 1333,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1349,
											"end": 1353,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 1342,
											"end": 1353,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1342,
											"end": 1353,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1584,
											"end": 1585,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1584,
											"end": 1585,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1114,
											"end": 1360,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "tag",
											"source": 7,
											"value": "38"
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4669,
											"end": 4676,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4699,
											"end": 4734,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "125"
										},
										{
											"begin": 4719,
											"end": 4733,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4699,
											"end": 4718,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 4699,
											"end": 4734,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4699,
											"end": 4734,
											"name": "tag",
											"source": 7,
											"value": "125"
										},
										{
											"begin": 4699,
											"end": 4734,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4692,
											"end": 4734,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4570,
											"end": 4741,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2985,
											"end": 3110,
											"name": "tag",
											"source": 7,
											"value": "42"
										},
										{
											"begin": 2985,
											"end": 3110,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3033,
											"end": 3037,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "128"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "129"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "130"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3064,
											"end": 3075,
											"name": "PUSH",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 3064,
											"end": 3075,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3064,
											"end": 3075,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3049,
											"end": 3075,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3049,
											"end": 3075,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3064,
											"end": 3075,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 3064,
											"end": 3075,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3064,
											"end": 3075,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3064,
											"end": 3075,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3063,
											"end": 3075,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3049,
											"end": 3075,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 3049,
											"end": 3075,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 3049,
											"end": 3075,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3049,
											"end": 3075,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3049,
											"end": 3075,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3092,
											"end": 3103,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2985,
											"end": 3110,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2985,
											"end": 3110,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 694,
											"end": 713,
											"name": "tag",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 694,
											"end": 713,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 694,
											"end": 713,
											"name": "PUSH",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 694,
											"end": 713,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 694,
											"end": 713,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 694,
											"end": 713,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 694,
											"end": 713,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 910,
											"end": 935,
											"name": "tag",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 910,
											"end": 935,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 910,
											"end": 935,
											"name": "PUSH",
											"source": 7,
											"value": "6E"
										},
										{
											"begin": 910,
											"end": 935,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 910,
											"end": 935,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 910,
											"end": 935,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 634,
											"end": 657,
											"name": "tag",
											"source": 7,
											"value": "52"
										},
										{
											"begin": 634,
											"end": 657,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 634,
											"end": 657,
											"name": "PUSH",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 634,
											"end": 657,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 634,
											"end": 657,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 634,
											"end": 657,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 634,
											"end": 657,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "tag",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "PUSH",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 987,
											"end": 1010,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 750,
											"end": 774,
											"name": "tag",
											"source": 7,
											"value": "58"
										},
										{
											"begin": 750,
											"end": 774,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 750,
											"end": 774,
											"name": "PUSH",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 750,
											"end": 774,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 750,
											"end": 774,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 750,
											"end": 774,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "134"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "135"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "136"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2028,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 2025,
											"end": 2026,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1998,
											"end": 2016,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1998,
											"end": 2028,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1998,
											"end": 2028,
											"name": "tag",
											"source": 0,
											"value": "139"
										},
										{
											"begin": 1998,
											"end": 2028,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1374,
											"end": 1380,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1374,
											"end": 1380,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1374,
											"end": 1380,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 720,
											"end": 744,
											"name": "tag",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 720,
											"end": 744,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 720,
											"end": 744,
											"name": "PUSH",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 720,
											"end": 744,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 720,
											"end": 744,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 720,
											"end": 744,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 878,
											"end": 904,
											"name": "tag",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 878,
											"end": 904,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 878,
											"end": 904,
											"name": "PUSH",
											"source": 7,
											"value": "6D"
										},
										{
											"begin": 878,
											"end": 904,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 878,
											"end": 904,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 878,
											"end": 904,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 845,
											"end": 872,
											"name": "tag",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 845,
											"end": 872,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 845,
											"end": 872,
											"name": "PUSH",
											"source": 7,
											"value": "6C"
										},
										{
											"begin": 845,
											"end": 872,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 845,
											"end": 872,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 845,
											"end": 872,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "tag",
											"source": 7,
											"value": "76"
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3170,
											"end": 3174,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3202,
											"end": 3211,
											"name": "PUSH",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 3202,
											"end": 3211,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3194,
											"end": 3198,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3194,
											"end": 3211,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 3194,
											"end": 3211,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "tag",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 3186,
											"end": 3240,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3266,
											"end": 3275,
											"name": "PUSH",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 3266,
											"end": 3275,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3258,
											"end": 3262,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3258,
											"end": 3275,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3258,
											"end": 3275,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "tag",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 3250,
											"end": 3300,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3323,
											"end": 3333,
											"name": "PUSH",
											"source": 7,
											"value": "6E"
										},
										{
											"begin": 3323,
											"end": 3333,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3323,
											"end": 3343,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 3323,
											"end": 3343,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3338,
											"end": 3342,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 3323,
											"end": 3337,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 3323,
											"end": 3343,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3323,
											"end": 3343,
											"name": "tag",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 3323,
											"end": 3343,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3310,
											"end": 3320,
											"name": "PUSH",
											"source": 7,
											"value": "6E"
										},
										{
											"begin": 3310,
											"end": 3343,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3310,
											"end": 3343,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3310,
											"end": 3343,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3388,
											"end": 3399,
											"name": "PUSH",
											"source": 7,
											"value": "6D"
										},
										{
											"begin": 3388,
											"end": 3399,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 3374,
											"end": 3399,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "153"
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "tag",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 3353,
											"end": 3466,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3484,
											"end": 3495,
											"name": "PUSH",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 3484,
											"end": 3495,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3484,
											"end": 3495,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 3484,
											"end": 3495,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3484,
											"end": 3503,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3484,
											"end": 3503,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3484,
											"end": 3495,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3484,
											"end": 3503,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "156"
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "tag",
											"source": 7,
											"value": "154"
										},
										{
											"begin": 3476,
											"end": 3519,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3547,
											"end": 3557,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3537,
											"end": 3558,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3537,
											"end": 3558,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3537,
											"end": 3558,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3537,
											"end": 3558,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3537,
											"end": 3546,
											"name": "PUSH",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 3537,
											"end": 3558,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3537,
											"end": 3558,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3537,
											"end": 3558,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3537,
											"end": 3558,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3537,
											"end": 3558,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3537,
											"end": 3558,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3537,
											"end": 3558,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 3537,
											"end": 3558,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3537,
											"end": 3567,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "157"
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "159"
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "tag",
											"source": 7,
											"value": "157"
										},
										{
											"begin": 3529,
											"end": 3592,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3627,
											"end": 3642,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 3610,
											"end": 3624,
											"name": "PUSH",
											"source": 7,
											"value": "6B"
										},
										{
											"begin": 3610,
											"end": 3624,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3610,
											"end": 3642,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "162"
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "tag",
											"source": 7,
											"value": "160"
										},
										{
											"begin": 3602,
											"end": 3662,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3683,
											"end": 3693,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3673,
											"end": 3694,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3673,
											"end": 3694,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3673,
											"end": 3694,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3673,
											"end": 3694,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3673,
											"end": 3682,
											"name": "PUSH",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 3673,
											"end": 3694,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3673,
											"end": 3694,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3673,
											"end": 3694,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3673,
											"end": 3694,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3673,
											"end": 3694,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3673,
											"end": 3701,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 3673,
											"end": 3701,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3673,
											"end": 3701,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3697,
											"end": 3701,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3673,
											"end": 3701,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 3673,
											"end": 3701,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3673,
											"end": 3701,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 3716,
											"end": 3728,
											"name": "PUSH",
											"source": 7,
											"value": "6C"
										},
										{
											"begin": 3716,
											"end": 3728,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3731,
											"end": 3746,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "GT",
											"source": -1
										},
										{
											"begin": 3712,
											"end": 3992,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3712,
											"end": 3992,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 3712,
											"end": 3992,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3778,
											"end": 3802,
											"name": "PUSH",
											"source": 7,
											"value": "6F"
										},
										{
											"begin": 3778,
											"end": 3802,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3770,
											"end": 3774,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 3770,
											"end": 3802,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 3770,
											"end": 3802,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "166"
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "tag",
											"source": 7,
											"value": "164"
										},
										{
											"begin": 3762,
											"end": 3825,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3712,
											"end": 3992,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "171"
										},
										{
											"begin": 3712,
											"end": 3992,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 3712,
											"end": 3992,
											"name": "tag",
											"source": 7,
											"value": "163"
										},
										{
											"begin": 3712,
											"end": 3992,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3876,
											"end": 3886,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3864,
											"end": 3875,
											"name": "PUSH",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 3864,
											"end": 3895,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3864,
											"end": 3895,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 3864,
											"end": 3887,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 3864,
											"end": 3895,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "168"
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "170"
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "tag",
											"source": 7,
											"value": "168"
										},
										{
											"begin": 3856,
											"end": 3915,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3955,
											"end": 3967,
											"name": "PUSH",
											"source": 7,
											"value": "6C"
										},
										{
											"begin": 3955,
											"end": 3967,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 3937,
											"end": 3952,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 3937,
											"end": 3967,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "171"
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "115"
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "173"
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "tag",
											"source": 7,
											"value": "171"
										},
										{
											"begin": 3929,
											"end": 3981,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4019,
											"end": 4023,
											"name": "PUSH",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 4019,
											"end": 4023,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4001,
											"end": 4120,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 4001,
											"end": 4120,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4019,
											"end": 4023,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4055,
											"end": 4065,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4087,
											"end": 4091,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 4106,
											"end": 4110,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4001,
											"end": 4041,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "175"
										},
										{
											"begin": 4001,
											"end": 4120,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4001,
											"end": 4120,
											"name": "tag",
											"source": 7,
											"value": "174"
										},
										{
											"begin": 4001,
											"end": 4120,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4167,
											"end": 4177,
											"name": "PUSH",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 4167,
											"end": 4177,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4148,
											"end": 4152,
											"name": "PUSH",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 4148,
											"end": 4152,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4130,
											"end": 4184,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 4130,
											"end": 4184,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4148,
											"end": 4152,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4148,
											"end": 4152,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 4148,
											"end": 4152,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4148,
											"end": 4152,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 4167,
											"end": 4177,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4179,
											"end": 4183,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 4130,
											"end": 4166,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 4130,
											"end": 4184,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4130,
											"end": 4184,
											"name": "tag",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 4130,
											"end": 4184,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4194,
											"end": 4217,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4220,
											"end": 4245,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "178"
										},
										{
											"begin": 4240,
											"end": 4244,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4220,
											"end": 4239,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 4220,
											"end": 4245,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4220,
											"end": 4245,
											"name": "tag",
											"source": 7,
											"value": "178"
										},
										{
											"begin": 4220,
											"end": 4245,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4273,
											"end": 4281,
											"name": "PUSH",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 4273,
											"end": 4281,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4194,
											"end": 4245,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4194,
											"end": 4245,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4255,
											"end": 4324,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 4255,
											"end": 4324,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4273,
											"end": 4281,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 4296,
											"end": 4306,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4194,
											"end": 4245,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 4255,
											"end": 4295,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 4255,
											"end": 4324,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4255,
											"end": 4324,
											"name": "tag",
											"source": 7,
											"value": "179"
										},
										{
											"begin": 4255,
											"end": 4324,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4341,
											"end": 4345,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 4341,
											"end": 4345,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3116,
											"end": 4352,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 663,
											"end": 688,
											"name": "tag",
											"source": 7,
											"value": "79"
										},
										{
											"begin": 663,
											"end": 688,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 663,
											"end": 688,
											"name": "PUSH",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 663,
											"end": 688,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 663,
											"end": 688,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 663,
											"end": 688,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 663,
											"end": 688,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "tag",
											"source": 7,
											"value": "84"
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "181"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 556,
											"end": 569,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "tag",
											"source": 1,
											"value": "181"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "182"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "184"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "tag",
											"source": 1,
											"value": "182"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 631,
											"end": 650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 653,
											"end": 667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "185"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 711,
											"end": 724,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 764,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "tag",
											"source": 1,
											"value": "185"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1784,
											"end": 1800,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 1784,
											"end": 1798,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "188"
										},
										{
											"begin": 1784,
											"end": 1800,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1784,
											"end": 1800,
											"name": "tag",
											"source": 7,
											"value": "187"
										},
										{
											"begin": 1784,
											"end": 1800,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1810,
											"end": 1818,
											"name": "PUSH",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "DUP14",
											"source": 7
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "AND",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1840,
											"end": 1844,
											"name": "PUSH",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 1840,
											"end": 1852,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1840,
											"end": 1852,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1840,
											"end": 1852,
											"name": "DUP13",
											"source": 7
										},
										{
											"begin": 1840,
											"end": 1852,
											"name": "DUP5",
											"source": 7
										},
										{
											"begin": 1840,
											"end": 1852,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1840,
											"end": 1852,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1840,
											"end": 1852,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1840,
											"end": 1852,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1840,
											"end": 1852,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 1840,
											"end": 1852,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1840,
											"end": 1852,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1862,
											"end": 1871,
											"name": "PUSH",
											"source": 7,
											"value": "6A"
										},
										{
											"begin": 1862,
											"end": 1884,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 1862,
											"end": 1884,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1862,
											"end": 1884,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1908,
											"name": "PUSH",
											"source": 7,
											"value": "6B"
										},
										{
											"begin": 1894,
											"end": 1926,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1926,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1894,
											"end": 1926,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1936,
											"end": 1948,
											"name": "PUSH",
											"source": 7,
											"value": "6C"
										},
										{
											"begin": 1936,
											"end": 1964,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 1936,
											"end": 1964,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1936,
											"end": 1964,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1984,
											"name": "PUSH",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "DUP15",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1974,
											"end": 1998,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2008,
											"end": 2017,
											"name": "PUSH",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 2008,
											"end": 2030,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 2008,
											"end": 2030,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2008,
											"end": 2030,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2049,
											"name": "PUSH",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 2040,
											"end": 2062,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2062,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2062,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2072,
											"end": 2083,
											"name": "PUSH",
											"source": 7,
											"value": "6D"
										},
										{
											"begin": 2072,
											"end": 2098,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 2072,
											"end": 2098,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2072,
											"end": 2098,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2108,
											"end": 2132,
											"name": "PUSH",
											"source": 7,
											"value": "6F"
										},
										{
											"begin": 2108,
											"end": 2160,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2108,
											"end": 2160,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2108,
											"end": 2160,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2170,
											"end": 2181,
											"name": "PUSH",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 2170,
											"end": 2188,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2170,
											"end": 2188,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2170,
											"end": 2188,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1810,
											"end": 1830,
											"name": "PUSH",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 2170,
											"end": 2188,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 2170,
											"end": 2188,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2170,
											"end": 2188,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 797,
											"end": 863,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "189"
										},
										{
											"begin": 797,
											"end": 863,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 847,
											"end": 852,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 831,
											"end": 852,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "tag",
											"source": 1,
											"value": "189"
										},
										{
											"begin": 797,
											"end": 863,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1366,
											"end": 2195,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "tag",
											"source": 7,
											"value": "87"
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2548,
											"end": 2552,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "191"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "192"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "193"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2564,
											"end": 2572,
											"name": "PUSH",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 2564,
											"end": 2584,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2564,
											"end": 2584,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2564,
											"end": 2584,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2564,
											"end": 2584,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2564,
											"end": 2584,
											"name": "AND",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2564,
											"end": 2584,
											"name": "SWAP12",
											"source": 7
										},
										{
											"begin": 2564,
											"end": 2584,
											"name": "DUP13",
											"source": 7
										},
										{
											"begin": 2564,
											"end": 2584,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2564,
											"end": 2584,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 2564,
											"end": 2584,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2564,
											"end": 2584,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2564,
											"end": 2584,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2599,
											"name": "PUSH",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP10",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "DUP12",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP10",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP10",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SWAP9",
											"source": 7
										},
										{
											"begin": 2595,
											"end": 2607,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2618,
											"end": 2627,
											"name": "PUSH",
											"source": 7,
											"value": "6A"
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 2618,
											"end": 2640,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 2665,
											"name": "PUSH",
											"source": 7,
											"value": "6B"
										},
										{
											"begin": 2651,
											"end": 2683,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 2683,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 2683,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2651,
											"end": 2683,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2693,
											"end": 2705,
											"name": "PUSH",
											"source": 7,
											"value": "6C"
										},
										{
											"begin": 2693,
											"end": 2721,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2742,
											"name": "PUSH",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "SWAP7",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "SWAP6",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2732,
											"end": 2756,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2767,
											"end": 2776,
											"name": "PUSH",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 2767,
											"end": 2789,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2800,
											"end": 2809,
											"name": "PUSH",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 2800,
											"end": 2822,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2833,
											"end": 2844,
											"name": "PUSH",
											"source": 7,
											"value": "6D"
										},
										{
											"begin": 2833,
											"end": 2859,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2833,
											"end": 2859,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2833,
											"end": 2859,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2833,
											"end": 2859,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2870,
											"end": 2894,
											"name": "PUSH",
											"source": 7,
											"value": "6F"
										},
										{
											"begin": 2870,
											"end": 2922,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 2944,
											"name": "PUSH",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "AND",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2933,
											"end": 2951,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 2201,
											"end": 2979,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 941,
											"end": 980,
											"name": "tag",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 941,
											"end": 980,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 941,
											"end": 980,
											"name": "PUSH",
											"source": 7,
											"value": "6F"
										},
										{
											"begin": 941,
											"end": 980,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 941,
											"end": 980,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 941,
											"end": 980,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 810,
											"end": 839,
											"name": "tag",
											"source": 7,
											"value": "93"
										},
										{
											"begin": 810,
											"end": 839,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 810,
											"end": 839,
											"name": "PUSH",
											"source": 7,
											"value": "6B"
										},
										{
											"begin": 810,
											"end": 839,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 810,
											"end": 839,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 810,
											"end": 839,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "tag",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "PUSH",
											"source": 7,
											"value": "71"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1017,
											"end": 1058,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "tag",
											"source": 0,
											"value": "102"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "197"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "197"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "198"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "198"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "199"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "199"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2272,
											"end": 2294,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2272,
											"end": 2294,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "115"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "204"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "tag",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2347,
											"end": 2375,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 2366,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2347,
											"end": 2365,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 2347,
											"end": 2375,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2347,
											"end": 2375,
											"name": "tag",
											"source": 0,
											"value": "205"
										},
										{
											"begin": 2347,
											"end": 2375,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 780,
											"end": 804,
											"name": "tag",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 780,
											"end": 804,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 780,
											"end": 804,
											"name": "PUSH",
											"source": 7,
											"value": "6A"
										},
										{
											"begin": 780,
											"end": 804,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 780,
											"end": 804,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 780,
											"end": 804,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "tag",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "PUSH",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1064,
											"end": 1107,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 876,
											"end": 972,
											"name": "tag",
											"source": 5,
											"value": "112"
										},
										{
											"begin": 876,
											"end": 972,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 955,
											"end": 965,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 876,
											"end": 972,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 876,
											"end": 972,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 4358,
											"end": 4564,
											"name": "tag",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 4358,
											"end": 4564,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4526,
											"end": 4535,
											"name": "PUSH",
											"source": 7,
											"value": "6A"
										},
										{
											"begin": 4526,
											"end": 4535,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 4458,
											"end": 4465,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 4458,
											"end": 4465,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4488,
											"end": 4536,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "125"
										},
										{
											"begin": 4488,
											"end": 4536,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4488,
											"end": 4521,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 4496,
											"end": 4500,
											"name": "PUSH",
											"source": 7,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 4506,
											"end": 4520,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 4488,
											"end": 4505,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "210"
										},
										{
											"begin": 4488,
											"end": 4521,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 4488,
											"end": 4521,
											"name": "tag",
											"source": 7,
											"value": "209"
										},
										{
											"begin": 4488,
											"end": 4521,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 4488,
											"end": 4525,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 4488,
											"end": 4525,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "211"
										},
										{
											"begin": 4488,
											"end": 4536,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "tag",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2609,
											"end": 2625,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2609,
											"end": 2625,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2752,
											"end": 2848,
											"name": "tag",
											"source": 6,
											"value": "150"
										},
										{
											"begin": 2752,
											"end": 2848,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2810,
											"end": 2817,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2836,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 2840,
											"end": 2841,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2836,
											"end": 2837,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2836,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "215"
										},
										{
											"begin": 2836,
											"end": 2841,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2836,
											"end": 2841,
											"name": "tag",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 2836,
											"end": 2841,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2829,
											"end": 2841,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2752,
											"end": 2848,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2752,
											"end": 2848,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "tag",
											"source": 3,
											"value": "175"
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1116,
											"end": 1212,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "217"
										},
										{
											"begin": 1136,
											"end": 1141,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1166,
											"end": 1193,
											"name": "PUSH",
											"source": 3,
											"value": "23B872DD"
										},
										{
											"begin": 1166,
											"end": 1193,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 1166,
											"end": 1193,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 1195,
											"end": 1199,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1201,
											"end": 1203,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1205,
											"end": 1210,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "218"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "219"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "tag",
											"source": 3,
											"value": "218"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1143,
											"end": 1211,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 1116,
											"end": 1135,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "220"
										},
										{
											"begin": 1116,
											"end": 1212,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 1116,
											"end": 1212,
											"name": "tag",
											"source": 3,
											"value": "217"
										},
										{
											"begin": 1116,
											"end": 1212,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 967,
											"end": 1219,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 745,
											"end": 961,
											"name": "tag",
											"source": 3,
											"value": "177"
										},
										{
											"begin": 745,
											"end": 961,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 868,
											"end": 954,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 888,
											"end": 893,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 918,
											"end": 941,
											"name": "PUSH",
											"source": 3,
											"value": "A9059CBB"
										},
										{
											"begin": 918,
											"end": 941,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 918,
											"end": 941,
											"name": "SHL",
											"source": 3
										},
										{
											"begin": 943,
											"end": 945,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 947,
											"end": 952,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "218"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 895,
											"end": 953,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 895,
											"end": 953,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 895,
											"end": 953,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "224"
										},
										{
											"begin": 895,
											"end": 953,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 868,
											"end": 954,
											"name": "tag",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 868,
											"end": 954,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 745,
											"end": 961,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 745,
											"end": 961,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 745,
											"end": 961,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 745,
											"end": 961,
											"name": "JUMP",
											"source": 3,
											"value": "[out]"
										},
										{
											"begin": 988,
											"end": 1114,
											"name": "tag",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 988,
											"end": 1114,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "226"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 556,
											"end": 569,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "tag",
											"source": 1,
											"value": "226"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "227"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "184"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "tag",
											"source": 1,
											"value": "227"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 631,
											"end": 650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 653,
											"end": 667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "229"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 711,
											"end": 724,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 764,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "tag",
											"source": 1,
											"value": "229"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1045,
											"end": 1071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 1045,
											"end": 1069,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "232"
										},
										{
											"begin": 1045,
											"end": 1071,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1045,
											"end": 1071,
											"name": "tag",
											"source": 0,
											"value": "231"
										},
										{
											"begin": 1045,
											"end": 1071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1081,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 1081,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 1081,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1081,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 1081,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 801,
											"end": 815,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "205"
										},
										{
											"begin": 797,
											"end": 863,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 847,
											"end": 852,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 831,
											"end": 852,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1114,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 988,
											"end": 1114,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 3462,
											"end": 3558,
											"name": "tag",
											"source": 6,
											"value": "210"
										},
										{
											"begin": 3462,
											"end": 3558,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3520,
											"end": 3527,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3546,
											"end": 3551,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 3550,
											"end": 3551,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3546,
											"end": 3547,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3546,
											"end": 3551,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "238"
										},
										{
											"begin": 3546,
											"end": 3551,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3847,
											"end": 3943,
											"name": "tag",
											"source": 6,
											"value": "211"
										},
										{
											"begin": 3847,
											"end": 3943,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 3905,
											"end": 3912,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 3931,
											"end": 3936,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "214"
										},
										{
											"begin": 3935,
											"end": 3936,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 3931,
											"end": 3932,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 3931,
											"end": 3936,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "241"
										},
										{
											"begin": 3931,
											"end": 3936,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 3306,
											"end": 4023,
											"name": "tag",
											"source": 3,
											"value": "220"
										},
										{
											"begin": 3306,
											"end": 4023,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3736,
											"end": 3759,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "243"
										},
										{
											"begin": 3790,
											"end": 3794,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 3,
											"value": "5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3770,
											"end": 3775,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3762,
											"end": 3789,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3789,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "244"
										},
										{
											"begin": 3762,
											"end": 3789,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "PUSH",
											"source": 3,
											"value": "FFFFFFFF"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "tag",
											"source": 3,
											"value": "243"
										},
										{
											"begin": 3762,
											"end": 3831,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3845,
											"end": 3862,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3845,
											"end": 3862,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3736,
											"end": 3831,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3736,
											"end": 3831,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3845,
											"end": 3866,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 3841,
											"end": 4017,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 3841,
											"end": 4017,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3940,
											"end": 3950,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "246"
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "247"
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "tag",
											"source": 3,
											"value": "246"
										},
										{
											"begin": 3929,
											"end": 3959,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "115"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "250"
										},
										{
											"begin": 3921,
											"end": 4006,
											"name": "JUMP",
											"source": 3,
											"value": "[in]"
										},
										{
											"begin": 807,
											"end": 871,
											"name": "tag",
											"source": 5,
											"value": "232"
										},
										{
											"begin": 807,
											"end": 871,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "252"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 556,
											"end": 569,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "tag",
											"source": 1,
											"value": "252"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "253"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "184"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "tag",
											"source": 1,
											"value": "253"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 631,
											"end": 650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 653,
											"end": 667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "233"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 711,
											"end": 724,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 764,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 801,
											"end": 815,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "205"
										},
										{
											"begin": 797,
											"end": 863,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 847,
											"end": 852,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 831,
											"end": 852,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 807,
											"end": 871,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 807,
											"end": 871,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1120,
											"end": 1226,
											"name": "tag",
											"source": 0,
											"value": "234"
										},
										{
											"begin": 1120,
											"end": 1226,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "259"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 556,
											"end": 569,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "tag",
											"source": 1,
											"value": "259"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "260"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "115"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "184"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "tag",
											"source": 1,
											"value": "260"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 631,
											"end": 650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 653,
											"end": 667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "262"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 711,
											"end": 724,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 764,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "tag",
											"source": 1,
											"value": "262"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1187,
											"end": 1219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "233"
										},
										{
											"begin": 1206,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "265"
										},
										{
											"begin": 1206,
											"end": 1216,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1206,
											"end": 1218,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1206,
											"end": 1218,
											"name": "tag",
											"source": 0,
											"value": "265"
										},
										{
											"begin": 1206,
											"end": 1218,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1187,
											"end": 1205,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "140"
										},
										{
											"begin": 1187,
											"end": 1219,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 3525,
											"end": 3748,
											"name": "tag",
											"source": 4,
											"value": "244"
										},
										{
											"begin": 3525,
											"end": 3748,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3658,
											"end": 3670,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 3689,
											"end": 3741,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "268"
										},
										{
											"begin": 3711,
											"end": 3717,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 3719,
											"end": 3723,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 3725,
											"end": 3726,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 3728,
											"end": 3740,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 3689,
											"end": 3710,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "269"
										},
										{
											"begin": 3689,
											"end": 3741,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 3689,
											"end": 3741,
											"name": "tag",
											"source": 4,
											"value": "268"
										},
										{
											"begin": 3689,
											"end": 3741,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 3682,
											"end": 3741,
											"name": "SWAP5",
											"source": 4
										},
										{
											"begin": 3525,
											"end": 3748,
											"name": "SWAP4",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3525,
											"end": 3748,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 4612,
											"end": 5111,
											"name": "tag",
											"source": 4,
											"value": "269"
										},
										{
											"begin": 4612,
											"end": 5111,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4777,
											"end": 4789,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 4834,
											"end": 4839,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 4809,
											"end": 4830,
											"name": "SELFBALANCE",
											"source": 4
										},
										{
											"begin": 4809,
											"end": 4839,
											"name": "LT",
											"source": 4
										},
										{
											"begin": 4809,
											"end": 4839,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "271"
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "115"
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "273"
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "tag",
											"source": 4,
											"value": "271"
										},
										{
											"begin": 4801,
											"end": 4882,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4900,
											"end": 4918,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "274"
										},
										{
											"begin": 4911,
											"end": 4917,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 4900,
											"end": 4910,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "275"
										},
										{
											"begin": 4900,
											"end": 4918,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4900,
											"end": 4918,
											"name": "tag",
											"source": 4,
											"value": "274"
										},
										{
											"begin": 4900,
											"end": 4918,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "276"
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "115"
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "278"
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "tag",
											"source": 4,
											"value": "276"
										},
										{
											"begin": 4892,
											"end": 4952,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 4964,
											"end": 4976,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 4978,
											"end": 5001,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5011,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5005,
											"end": 5016,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5024,
											"end": 5029,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5031,
											"end": 5035,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "279"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "280"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "tag",
											"source": 4,
											"value": "279"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "SUB",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "DUP6",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "DUP8",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "GAS",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "CALL",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "SWAP3",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "283"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH",
											"source": 4,
											"value": "1F"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "NOT",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH",
											"source": 4,
											"value": "3F"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "AND",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "RETURNDATASIZE",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "RETURNDATACOPY",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "282"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "tag",
											"source": 4,
											"value": "283"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "tag",
											"source": 4,
											"value": "282"
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5005,
											"end": 5036,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4963,
											"end": 5036,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4963,
											"end": 5036,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 4963,
											"end": 5036,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 4963,
											"end": 5036,
											"name": "POP",
											"source": 4
										},
										{
											"begin": 5053,
											"end": 5104,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "284"
										},
										{
											"begin": 5070,
											"end": 5077,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5079,
											"end": 5089,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 5091,
											"end": 5103,
											"name": "DUP7",
											"source": 4
										},
										{
											"begin": 5053,
											"end": 5069,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "285"
										},
										{
											"begin": 5053,
											"end": 5104,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 5053,
											"end": 5104,
											"name": "tag",
											"source": 4,
											"value": "284"
										},
										{
											"begin": 5053,
											"end": 5104,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 5046,
											"end": 5104,
											"name": "SWAP8",
											"source": 4
										},
										{
											"begin": 4612,
											"end": 5111,
											"name": "SWAP7",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4612,
											"end": 5111,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 782,
											"end": 1159,
											"name": "tag",
											"source": 4,
											"value": "275"
										},
										{
											"begin": 782,
											"end": 1159,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 1098,
											"end": 1118,
											"name": "EXTCODESIZE",
											"source": 4
										},
										{
											"begin": 1144,
											"end": 1152,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1144,
											"end": 1152,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 1144,
											"end": 1152,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 782,
											"end": 1159,
											"name": "JUMP",
											"source": 4,
											"value": "[out]"
										},
										{
											"begin": 6275,
											"end": 6967,
											"name": "tag",
											"source": 4,
											"value": "285"
										},
										{
											"begin": 6275,
											"end": 6967,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6421,
											"end": 6433,
											"name": "PUSH",
											"source": 4,
											"value": "60"
										},
										{
											"begin": 6449,
											"end": 6456,
											"name": "DUP4",
											"source": 4
										},
										{
											"begin": 6445,
											"end": 6961,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 6445,
											"end": 6961,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "288"
										},
										{
											"begin": 6445,
											"end": 6961,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6479,
											"end": 6489,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6472,
											"end": 6489,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "214"
										},
										{
											"begin": 6472,
											"end": 6489,
											"name": "JUMP",
											"source": 4
										},
										{
											"begin": 6445,
											"end": 6961,
											"name": "tag",
											"source": 4,
											"value": "288"
										},
										{
											"begin": 6445,
											"end": 6961,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6590,
											"end": 6607,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6590,
											"end": 6607,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6590,
											"end": 6611,
											"name": "ISZERO",
											"source": 4
										},
										{
											"begin": 6586,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "290"
										},
										{
											"begin": 6586,
											"end": 6951,
											"name": "JUMPI",
											"source": 4
										},
										{
											"begin": 6784,
											"end": 6794,
											"name": "DUP3",
											"source": 4
										},
										{
											"begin": 6778,
											"end": 6795,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": 6844,
											"end": 6859,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 6831,
											"end": 6841,
											"name": "DUP5",
											"source": 4
										},
										{
											"begin": 6827,
											"end": 6829,
											"name": "PUSH",
											"source": 4,
											"value": "20"
										},
										{
											"begin": 6823,
											"end": 6842,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6816,
											"end": 6860,
											"name": "REVERT",
											"source": 4
										},
										{
											"begin": 6733,
											"end": 6878,
											"name": "tag",
											"source": 4,
											"value": "290"
										},
										{
											"begin": 6733,
											"end": 6878,
											"name": "JUMPDEST",
											"source": 4
										},
										{
											"begin": 6923,
											"end": 6935,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6916,
											"end": 6936,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 6916,
											"end": 6936,
											"name": "MLOAD",
											"source": 4
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6916,
											"end": 6936,
											"name": "DUP2",
											"source": 4
										},
										{
											"begin": 6916,
											"end": 6936,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 6916,
											"end": 6936,
											"name": "PUSH",
											"source": 4,
											"value": "4"
										},
										{
											"begin": 6916,
											"end": 6936,
											"name": "ADD",
											"source": 4
										},
										{
											"begin": 6916,
											"end": 6936,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "115"
										},
										{
											"begin": 6916,
											"end": 6936,
											"name": "SWAP2",
											"source": 4
										},
										{
											"begin": 6916,
											"end": 6936,
											"name": "SWAP1",
											"source": 4
										},
										{
											"begin": 6916,
											"end": 6936,
											"name": "PUSH [tag]",
											"source": 4,
											"value": "293"
										},
										{
											"begin": 6916,
											"end": 6936,
											"name": "JUMP",
											"source": 4,
											"value": "[in]"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "tag",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 84,
											"end": 104,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 84,
											"end": 104,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 133,
											"end": 164,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 133,
											"end": 164,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 123,
											"end": 165,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 123,
											"end": 165,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 113,
											"end": 115,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "117"
										},
										{
											"begin": 113,
											"end": 115,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 179,
											"end": 180,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 177,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 169,
											"end": 181,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 194,
											"end": 392,
											"name": "tag",
											"source": 8,
											"value": "97"
										},
										{
											"begin": 194,
											"end": 392,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 194,
											"end": 392,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 306,
											"end": 308,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 294,
											"end": 303,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 285,
											"end": 292,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 281,
											"end": 304,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 277,
											"end": 309,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 274,
											"end": 276,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 274,
											"end": 276,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 327,
											"end": 333,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 319,
											"end": 325,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 312,
											"end": 334,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 274,
											"end": 276,
											"name": "tag",
											"source": 8,
											"value": "299"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "214"
										},
										{
											"begin": 376,
											"end": 385,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 355,
											"end": 386,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 397,
											"end": 1230,
											"name": "tag",
											"source": 8,
											"value": "83"
										},
										{
											"begin": 397,
											"end": 1230,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 397,
											"end": 1230,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 397,
											"end": 1230,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 397,
											"end": 1230,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 397,
											"end": 1230,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 397,
											"end": 1230,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 397,
											"end": 1230,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 397,
											"end": 1230,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 397,
											"end": 1230,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 397,
											"end": 1230,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 397,
											"end": 1230,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 662,
											"end": 665,
											"name": "PUSH",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 650,
											"end": 659,
											"name": "DUP12",
											"source": 8
										},
										{
											"begin": 641,
											"end": 648,
											"name": "DUP14",
											"source": 8
										},
										{
											"begin": 637,
											"end": 660,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 633,
											"end": 666,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 630,
											"end": 632,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 630,
											"end": 632,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "302"
										},
										{
											"begin": 630,
											"end": 632,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 684,
											"end": 690,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 676,
											"end": 682,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 669,
											"end": 691,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 630,
											"end": 632,
											"name": "tag",
											"source": 8,
											"value": "302"
										},
										{
											"begin": 630,
											"end": 632,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 712,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 733,
											"end": 742,
											"name": "DUP12",
											"source": 8
										},
										{
											"begin": 712,
											"end": 743,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 712,
											"end": 743,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 712,
											"end": 743,
											"name": "tag",
											"source": 8,
											"value": "303"
										},
										{
											"begin": 712,
											"end": 743,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 702,
											"end": 743,
											"name": "SWAP10",
											"source": 8
										},
										{
											"begin": 702,
											"end": 743,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 762,
											"end": 802,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 798,
											"end": 800,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 787,
											"end": 796,
											"name": "DUP13",
											"source": 8
										},
										{
											"begin": 783,
											"end": 801,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 762,
											"end": 802,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 762,
											"end": 802,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 762,
											"end": 802,
											"name": "tag",
											"source": 8,
											"value": "304"
										},
										{
											"begin": 762,
											"end": 802,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 752,
											"end": 802,
											"name": "SWAP9",
											"source": 8
										},
										{
											"begin": 752,
											"end": 802,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 821,
											"end": 861,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 857,
											"end": 859,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 846,
											"end": 855,
											"name": "DUP13",
											"source": 8
										},
										{
											"begin": 842,
											"end": 860,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 821,
											"end": 861,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 821,
											"end": 861,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 821,
											"end": 861,
											"name": "tag",
											"source": 8,
											"value": "305"
										},
										{
											"begin": 821,
											"end": 861,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 620,
											"end": 1230,
											"name": "SWAP10",
											"source": 8
										},
										{
											"begin": 620,
											"end": 1230,
											"name": "SWAP13",
											"source": 8
										},
										{
											"begin": 620,
											"end": 1230,
											"name": "SWAP9",
											"source": 8
										},
										{
											"begin": 620,
											"end": 1230,
											"name": "SWAP12",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 811,
											"end": 861,
											"name": "SWAP9",
											"source": 8
										},
										{
											"begin": 811,
											"end": 861,
											"name": "SWAP10",
											"source": 8
										},
										{
											"begin": 908,
											"end": 910,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 893,
											"end": 911,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 893,
											"end": 911,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 880,
											"end": 912,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 880,
											"end": 912,
											"name": "SWAP10",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 959,
											"end": 962,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 944,
											"end": 963,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 944,
											"end": 963,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 931,
											"end": 964,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 931,
											"end": 964,
											"name": "SWAP9",
											"source": 8
										},
										{
											"begin": 1011,
											"end": 1014,
											"name": "PUSH",
											"source": 8,
											"value": "A0"
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 996,
											"end": 1015,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 983,
											"end": 1016,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 983,
											"end": 1016,
											"name": "SWAP9",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1063,
											"end": 1066,
											"name": "PUSH",
											"source": 8,
											"value": "C0"
										},
										{
											"begin": 1048,
											"end": 1067,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1048,
											"end": 1067,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1068,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1035,
											"end": 1068,
											"name": "SWAP8",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1115,
											"end": 1118,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 1100,
											"end": 1119,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1100,
											"end": 1119,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1087,
											"end": 1120,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1087,
											"end": 1120,
											"name": "SWAP7",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1167,
											"end": 1170,
											"name": "PUSH",
											"source": 8,
											"value": "100"
										},
										{
											"begin": 1152,
											"end": 1171,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1152,
											"end": 1171,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1139,
											"end": 1172,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1139,
											"end": 1172,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1219,
											"end": 1222,
											"name": "PUSH",
											"source": 8,
											"value": "120"
										},
										{
											"begin": 1204,
											"end": 1223,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1204,
											"end": 1223,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1204,
											"end": 1223,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1191,
											"end": 1224,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1191,
											"end": 1224,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 620,
											"end": 1230,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 620,
											"end": 1230,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1235,
											"end": 2401,
											"name": "tag",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 1235,
											"end": 2401,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1235,
											"end": 2401,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1350,
											"end": 1352,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1393,
											"end": 1395,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1381,
											"end": 1390,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1372,
											"end": 1379,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1368,
											"end": 1391,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1364,
											"end": 1396,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1361,
											"end": 1363,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1361,
											"end": 1363,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 1361,
											"end": 1363,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1414,
											"end": 1420,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1406,
											"end": 1412,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1399,
											"end": 1421,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1361,
											"end": 1363,
											"name": "tag",
											"source": 8,
											"value": "307"
										},
										{
											"begin": 1361,
											"end": 1363,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1459,
											"end": 1468,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1446,
											"end": 1469,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1488,
											"end": 1506,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1529,
											"end": 1531,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1521,
											"end": 1527,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1518,
											"end": 1532,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1515,
											"end": 1517,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1515,
											"end": 1517,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "308"
										},
										{
											"begin": 1515,
											"end": 1517,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1550,
											"end": 1556,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1542,
											"end": 1548,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1535,
											"end": 1557,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1515,
											"end": 1517,
											"name": "tag",
											"source": 8,
											"value": "308"
										},
										{
											"begin": 1515,
											"end": 1517,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1593,
											"end": 1599,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1582,
											"end": 1591,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1578,
											"end": 1600,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1568,
											"end": 1600,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1568,
											"end": 1600,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1638,
											"end": 1645,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1631,
											"end": 1635,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 1627,
											"end": 1629,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1623,
											"end": 1636,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1619,
											"end": 1646,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "309"
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1665,
											"end": 1671,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1657,
											"end": 1663,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1650,
											"end": 1672,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "tag",
											"source": 8,
											"value": "309"
										},
										{
											"begin": 1609,
											"end": 1611,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1706,
											"end": 1708,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1693,
											"end": 1709,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1728,
											"end": 1730,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1724,
											"end": 1726,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1721,
											"end": 1731,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1718,
											"end": 1720,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1718,
											"end": 1720,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "311"
										},
										{
											"begin": 1718,
											"end": 1720,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1734,
											"end": 1752,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "311"
										},
										{
											"begin": 1734,
											"end": 1752,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 1734,
											"end": 1752,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1734,
											"end": 1752,
											"name": "tag",
											"source": 8,
											"value": "311"
										},
										{
											"begin": 1734,
											"end": 1752,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1781,
											"end": 1783,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 1777,
											"end": 1779,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1773,
											"end": 1784,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 1813,
											"end": 1815,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1807,
											"end": 1816,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1864,
											"end": 1866,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1859,
											"end": 1861,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1851,
											"end": 1857,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1847,
											"end": 1862,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1843,
											"end": 1867,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1917,
											"end": 1923,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1905,
											"end": 1915,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1902,
											"end": 1924,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 1897,
											"end": 1899,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1885,
											"end": 1895,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1882,
											"end": 1900,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 1879,
											"end": 1925,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 1876,
											"end": 1878,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1876,
											"end": 1878,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "314"
										},
										{
											"begin": 1876,
											"end": 1878,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1928,
											"end": 1946,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "314"
										},
										{
											"begin": 1928,
											"end": 1946,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 1928,
											"end": 1946,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1928,
											"end": 1946,
											"name": "tag",
											"source": 8,
											"value": "314"
										},
										{
											"begin": 1928,
											"end": 1946,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1964,
											"end": 1966,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1957,
											"end": 1979,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2014,
											"end": 2032,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2014,
											"end": 2032,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2014,
											"end": 2032,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2048,
											"end": 2063,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2048,
											"end": 2063,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2048,
											"end": 2063,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2048,
											"end": 2063,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2083,
											"end": 2094,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2083,
											"end": 2094,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2083,
											"end": 2094,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2113,
											"end": 2124,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2113,
											"end": 2124,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2113,
											"end": 2124,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2109,
											"end": 2129,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 2109,
											"end": 2129,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2106,
											"end": 2139,
											"name": "DUP11",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "LT",
											"source": -1
										},
										{
											"begin": 2103,
											"end": 2105,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2103,
											"end": 2105,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "315"
										},
										{
											"begin": 2103,
											"end": 2105,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2157,
											"end": 2163,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 2149,
											"end": 2155,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 2142,
											"end": 2164,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2103,
											"end": 2105,
											"name": "tag",
											"source": 8,
											"value": "315"
										},
										{
											"begin": 2103,
											"end": 2105,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2184,
											"end": 2190,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2190,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2190,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2199,
											"end": 2370,
											"name": "tag",
											"source": 8,
											"value": "316"
										},
										{
											"begin": 2199,
											"end": 2370,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2213,
											"end": 2215,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2210,
											"end": 2211,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2207,
											"end": 2216,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2199,
											"end": 2370,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2199,
											"end": 2370,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "318"
										},
										{
											"begin": 2199,
											"end": 2370,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2270,
											"end": 2295,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "319"
										},
										{
											"begin": 2291,
											"end": 2294,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2270,
											"end": 2295,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "295"
										},
										{
											"begin": 2270,
											"end": 2295,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 2270,
											"end": 2295,
											"name": "tag",
											"source": 8,
											"value": "319"
										},
										{
											"begin": 2270,
											"end": 2295,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2258,
											"end": 2296,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2258,
											"end": 2296,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2231,
											"end": 2232,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 2224,
											"end": 2233,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 2224,
											"end": 2233,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2224,
											"end": 2233,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": 2224,
											"end": 2233,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2224,
											"end": 2233,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 2316,
											"end": 2328,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2316,
											"end": 2328,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2316,
											"end": 2328,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2316,
											"end": 2328,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2348,
											"end": 2360,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 2348,
											"end": 2360,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2199,
											"end": 2370,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "316"
										},
										{
											"begin": 2199,
											"end": 2370,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2199,
											"end": 2370,
											"name": "tag",
											"source": 8,
											"value": "318"
										},
										{
											"begin": 2199,
											"end": 2370,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2389,
											"end": 2395,
											"name": "SWAP9",
											"source": 8
										},
										{
											"begin": 1330,
											"end": 2401,
											"name": "SWAP8",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1330,
											"end": 2401,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2406,
											"end": 2703,
											"name": "tag",
											"source": 8,
											"value": "247"
										},
										{
											"begin": 2406,
											"end": 2703,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2406,
											"end": 2703,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2526,
											"end": 2528,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2514,
											"end": 2523,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2505,
											"end": 2512,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2501,
											"end": 2524,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2497,
											"end": 2529,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2494,
											"end": 2496,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2494,
											"end": 2496,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "321"
										},
										{
											"begin": 2494,
											"end": 2496,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2547,
											"end": 2553,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2539,
											"end": 2545,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2532,
											"end": 2554,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2494,
											"end": 2496,
											"name": "tag",
											"source": 8,
											"value": "321"
										},
										{
											"begin": 2494,
											"end": 2496,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2584,
											"end": 2593,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2578,
											"end": 2594,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 2637,
											"end": 2642,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2630,
											"end": 2643,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2623,
											"end": 2644,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2616,
											"end": 2621,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2613,
											"end": 2645,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 2603,
											"end": 2605,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "214"
										},
										{
											"begin": 2603,
											"end": 2605,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2664,
											"end": 2670,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2656,
											"end": 2662,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2649,
											"end": 2671,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2708,
											"end": 2898,
											"name": "tag",
											"source": 8,
											"value": "37"
										},
										{
											"begin": 2708,
											"end": 2898,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2708,
											"end": 2898,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2820,
											"end": 2822,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2808,
											"end": 2817,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2799,
											"end": 2806,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2795,
											"end": 2818,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2791,
											"end": 2823,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2788,
											"end": 2790,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2788,
											"end": 2790,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "324"
										},
										{
											"begin": 2788,
											"end": 2790,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2841,
											"end": 2847,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2833,
											"end": 2839,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2826,
											"end": 2848,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2788,
											"end": 2790,
											"name": "tag",
											"source": 8,
											"value": "324"
										},
										{
											"begin": 2788,
											"end": 2790,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2869,
											"end": 2892,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 2869,
											"end": 2892,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2778,
											"end": 2898,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2778,
											"end": 2898,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2903,
											"end": 3177,
											"name": "tag",
											"source": 8,
											"value": "280"
										},
										{
											"begin": 2903,
											"end": 3177,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2903,
											"end": 3177,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3070,
											"end": 3076,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3064,
											"end": 3077,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 3086,
											"end": 3139,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "326"
										},
										{
											"begin": 3132,
											"end": 3138,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3127,
											"end": 3130,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3120,
											"end": 3124,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3112,
											"end": 3118,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 3108,
											"end": 3125,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3086,
											"end": 3139,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "327"
										},
										{
											"begin": 3086,
											"end": 3139,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 3086,
											"end": 3139,
											"name": "tag",
											"source": 8,
											"value": "326"
										},
										{
											"begin": 3086,
											"end": 3139,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3155,
											"end": 3171,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3155,
											"end": 3171,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3155,
											"end": 3171,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3155,
											"end": 3171,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3155,
											"end": 3171,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3040,
											"end": 3177,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3040,
											"end": 3177,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3182,
											"end": 3385,
											"name": "tag",
											"source": 8,
											"value": "47"
										},
										{
											"begin": 3182,
											"end": 3385,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3346,
											"end": 3378,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3346,
											"end": 3378,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3346,
											"end": 3378,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3346,
											"end": 3378,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3328,
											"end": 3379,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3328,
											"end": 3379,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3316,
											"end": 3318,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3301,
											"end": 3319,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3301,
											"end": 3319,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3283,
											"end": 3385,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3390,
											"end": 3765,
											"name": "tag",
											"source": 8,
											"value": "219"
										},
										{
											"begin": 3390,
											"end": 3765,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3648,
											"end": 3663,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3648,
											"end": 3663,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3648,
											"end": 3663,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3630,
											"end": 3664,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3630,
											"end": 3664,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3700,
											"end": 3715,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3700,
											"end": 3715,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3700,
											"end": 3715,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3700,
											"end": 3715,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3695,
											"end": 3697,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3680,
											"end": 3698,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3680,
											"end": 3698,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3673,
											"end": 3716,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3747,
											"end": 3749,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3732,
											"end": 3750,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3732,
											"end": 3750,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3725,
											"end": 3759,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3725,
											"end": 3759,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3725,
											"end": 3759,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3725,
											"end": 3759,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3580,
											"end": 3582,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3565,
											"end": 3583,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3565,
											"end": 3583,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3547,
											"end": 3765,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3770,
											"end": 4044,
											"name": "tag",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 3770,
											"end": 4044,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3962,
											"end": 3994,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3962,
											"end": 3994,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3962,
											"end": 3994,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3962,
											"end": 3994,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3944,
											"end": 3995,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3944,
											"end": 3995,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4026,
											"end": 4028,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4011,
											"end": 4029,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4011,
											"end": 4029,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4004,
											"end": 4038,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3932,
											"end": 3934,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3917,
											"end": 3935,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3917,
											"end": 3935,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3899,
											"end": 4044,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4049,
											"end": 4236,
											"name": "tag",
											"source": 8,
											"value": "34"
										},
										{
											"begin": 4049,
											"end": 4236,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4214,
											"end": 4228,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4214,
											"end": 4228,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4207,
											"end": 4229,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4189,
											"end": 4230,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4189,
											"end": 4230,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4177,
											"end": 4179,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4144,
											"end": 4236,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4241,
											"end": 4624,
											"name": "tag",
											"source": 8,
											"value": "293"
										},
										{
											"begin": 4241,
											"end": 4624,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4241,
											"end": 4624,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4390,
											"end": 4392,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4379,
											"end": 4388,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4372,
											"end": 4393,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4422,
											"end": 4428,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4416,
											"end": 4429,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 4465,
											"end": 4471,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4460,
											"end": 4462,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4449,
											"end": 4458,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4445,
											"end": 4463,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4438,
											"end": 4472,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4481,
											"end": 4547,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "333"
										},
										{
											"begin": 4540,
											"end": 4546,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4535,
											"end": 4537,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4524,
											"end": 4533,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 4520,
											"end": 4538,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4515,
											"end": 4517,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4507,
											"end": 4513,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 4503,
											"end": 4518,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4481,
											"end": 4547,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "327"
										},
										{
											"begin": 4481,
											"end": 4547,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 4481,
											"end": 4547,
											"name": "tag",
											"source": 8,
											"value": "333"
										},
										{
											"begin": 4481,
											"end": 4547,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4608,
											"end": 4610,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 4587,
											"end": 4602,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4583,
											"end": 4612,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4568,
											"end": 4613,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4568,
											"end": 4613,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4568,
											"end": 4613,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4568,
											"end": 4613,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4615,
											"end": 4617,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4564,
											"end": 4618,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4564,
											"end": 4618,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 4362,
											"end": 4624,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4362,
											"end": 4624,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4629,
											"end": 4964,
											"name": "tag",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 4629,
											"end": 4964,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4831,
											"end": 4833,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4813,
											"end": 4834,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4813,
											"end": 4834,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4813,
											"end": 4834,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4870,
											"end": 4872,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 4850,
											"end": 4868,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4850,
											"end": 4868,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4850,
											"end": 4868,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4843,
											"end": 4873,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "139BDD081CDD185C9D1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "AA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4904,
											"end": 4906,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4889,
											"end": 4907,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4889,
											"end": 4907,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4882,
											"end": 4923,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4955,
											"end": 4957,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 4940,
											"end": 4958,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4940,
											"end": 4958,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4803,
											"end": 4964,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4969,
											"end": 5371,
											"name": "tag",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 4969,
											"end": 5371,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5171,
											"end": 5173,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5153,
											"end": 5174,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5153,
											"end": 5174,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5153,
											"end": 5174,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5210,
											"end": 5212,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 5190,
											"end": 5208,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5190,
											"end": 5208,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5190,
											"end": 5208,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5183,
											"end": 5213,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5249,
											"end": 5283,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 5244,
											"end": 5246,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5229,
											"end": 5247,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5229,
											"end": 5247,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5222,
											"end": 5284,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5315,
											"end": 5317,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 5300,
											"end": 5318,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5300,
											"end": 5318,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5293,
											"end": 5329,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5361,
											"end": 5364,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 5346,
											"end": 5365,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5346,
											"end": 5365,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5143,
											"end": 5371,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5376,
											"end": 5778,
											"name": "tag",
											"source": 8,
											"value": "273"
										},
										{
											"begin": 5376,
											"end": 5778,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5578,
											"end": 5580,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5560,
											"end": 5581,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5617,
											"end": 5619,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 5597,
											"end": 5615,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5615,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5597,
											"end": 5615,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5590,
											"end": 5620,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5656,
											"end": 5690,
											"name": "PUSH",
											"source": 8,
											"value": "416464726573733A20696E73756666696369656E742062616C616E636520666F"
										},
										{
											"begin": 5651,
											"end": 5653,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5636,
											"end": 5654,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5636,
											"end": 5654,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5629,
											"end": 5691,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1C8818D85B1B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5722,
											"end": 5724,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 5707,
											"end": 5725,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5707,
											"end": 5725,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5700,
											"end": 5736,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5768,
											"end": 5771,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 5753,
											"end": 5772,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5753,
											"end": 5772,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5550,
											"end": 5778,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5783,
											"end": 6127,
											"name": "tag",
											"source": 8,
											"value": "159"
										},
										{
											"begin": 5783,
											"end": 6127,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5985,
											"end": 5987,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5967,
											"end": 5988,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5967,
											"end": 5988,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5967,
											"end": 5988,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6024,
											"end": 6026,
											"name": "PUSH",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 6004,
											"end": 6022,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6004,
											"end": 6022,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6004,
											"end": 6022,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5997,
											"end": 6027,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "105B1C9958591E481C185C9D1A58DA5C185D1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "62"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6058,
											"end": 6060,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6043,
											"end": 6061,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6043,
											"end": 6061,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6036,
											"end": 6086,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6118,
											"end": 6120,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 6103,
											"end": 6121,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6103,
											"end": 6121,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5957,
											"end": 6127,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6132,
											"end": 6464,
											"name": "tag",
											"source": 8,
											"value": "173"
										},
										{
											"begin": 6132,
											"end": 6464,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6334,
											"end": 6336,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6316,
											"end": 6337,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6316,
											"end": 6337,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6316,
											"end": 6337,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6373,
											"end": 6374,
											"name": "PUSH",
											"source": 8,
											"value": "9"
										},
										{
											"begin": 6353,
											"end": 6371,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6353,
											"end": 6371,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6353,
											"end": 6371,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6346,
											"end": 6375,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "29B0B6329037BB32B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6406,
											"end": 6408,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6391,
											"end": 6409,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6391,
											"end": 6409,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6384,
											"end": 6423,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6455,
											"end": 6457,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 6440,
											"end": 6458,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6440,
											"end": 6458,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6306,
											"end": 6464,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6469,
											"end": 6808,
											"name": "tag",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 6469,
											"end": 6808,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6671,
											"end": 6673,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6653,
											"end": 6674,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6653,
											"end": 6674,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6653,
											"end": 6674,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6710,
											"end": 6712,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 6690,
											"end": 6708,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6690,
											"end": 6708,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6690,
											"end": 6708,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6683,
											"end": 6713,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "139BDD081DDA1A5D195B1A5CDD1959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6744,
											"end": 6746,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 6729,
											"end": 6747,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6729,
											"end": 6747,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6722,
											"end": 6767,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6799,
											"end": 6801,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 6784,
											"end": 6802,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6784,
											"end": 6802,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6643,
											"end": 6808,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6813,
											"end": 7218,
											"name": "tag",
											"source": 8,
											"value": "153"
										},
										{
											"begin": 6813,
											"end": 7218,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7015,
											"end": 7017,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6997,
											"end": 7018,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6997,
											"end": 7018,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6997,
											"end": 7018,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7054,
											"end": 7056,
											"name": "PUSH",
											"source": 8,
											"value": "29"
										},
										{
											"begin": 7034,
											"end": 7052,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7034,
											"end": 7052,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7034,
											"end": 7052,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7027,
											"end": 7057,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7093,
											"end": 7127,
											"name": "PUSH",
											"source": 8,
											"value": "54686520616D6F756E7420656E746572656420657863656564732046756E6472"
										},
										{
											"begin": 7088,
											"end": 7090,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7073,
											"end": 7091,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7073,
											"end": 7091,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7066,
											"end": 7128,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "185A5CD94811DBD85B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "BA"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7159,
											"end": 7161,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 7144,
											"end": 7162,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7144,
											"end": 7162,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7137,
											"end": 7176,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7208,
											"end": 7211,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 7193,
											"end": 7212,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7193,
											"end": 7212,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6987,
											"end": 7218,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7223,
											"end": 7633,
											"name": "tag",
											"source": 8,
											"value": "184"
										},
										{
											"begin": 7223,
											"end": 7633,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7425,
											"end": 7427,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7407,
											"end": 7428,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7407,
											"end": 7428,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7407,
											"end": 7428,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7464,
											"end": 7466,
											"name": "PUSH",
											"source": 8,
											"value": "2E"
										},
										{
											"begin": 7444,
											"end": 7462,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7444,
											"end": 7462,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7444,
											"end": 7462,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7437,
											"end": 7467,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7503,
											"end": 7537,
											"name": "PUSH",
											"source": 8,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 7498,
											"end": 7500,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7483,
											"end": 7501,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7483,
											"end": 7501,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7476,
											"end": 7538,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7569,
											"end": 7571,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 7554,
											"end": 7572,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7554,
											"end": 7572,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7547,
											"end": 7591,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7623,
											"end": 7626,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 7608,
											"end": 7627,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7608,
											"end": 7627,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7397,
											"end": 7633,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7638,
											"end": 7994,
											"name": "tag",
											"source": 8,
											"value": "116"
										},
										{
											"begin": 7638,
											"end": 7994,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 7840,
											"end": 7842,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7822,
											"end": 7843,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 7822,
											"end": 7843,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7822,
											"end": 7843,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7859,
											"end": 7877,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7859,
											"end": 7877,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 7859,
											"end": 7877,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7852,
											"end": 7882,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7918,
											"end": 7952,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 7913,
											"end": 7915,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 7898,
											"end": 7916,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7898,
											"end": 7916,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7891,
											"end": 7953,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7985,
											"end": 7987,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 7970,
											"end": 7988,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7970,
											"end": 7988,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 7812,
											"end": 7994,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 7999,
											"end": 8341,
											"name": "tag",
											"source": 8,
											"value": "166"
										},
										{
											"begin": 7999,
											"end": 8341,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8201,
											"end": 8203,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8183,
											"end": 8204,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8183,
											"end": 8204,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8183,
											"end": 8204,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8240,
											"end": 8242,
											"name": "PUSH",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 8220,
											"end": 8238,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8220,
											"end": 8238,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8220,
											"end": 8238,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8213,
											"end": 8243,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "115E18D95959195908125113C81B1A5B5A5D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8274,
											"end": 8276,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8259,
											"end": 8277,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8259,
											"end": 8277,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8252,
											"end": 8300,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8332,
											"end": 8334,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 8317,
											"end": 8335,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8317,
											"end": 8335,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8173,
											"end": 8341,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8346,
											"end": 8694,
											"name": "tag",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 8346,
											"end": 8694,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8548,
											"end": 8550,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8530,
											"end": 8551,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8530,
											"end": 8551,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8530,
											"end": 8551,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8587,
											"end": 8589,
											"name": "PUSH",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 8567,
											"end": 8585,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8567,
											"end": 8585,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8567,
											"end": 8585,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8560,
											"end": 8590,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8626,
											"end": 8652,
											"name": "PUSH",
											"source": 8,
											"value": "42656C6F77206D696E696D756D20616C6C6F636174696F6E0000000000000000"
										},
										{
											"begin": 8621,
											"end": 8623,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8606,
											"end": 8624,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8606,
											"end": 8624,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8599,
											"end": 8653,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8685,
											"end": 8687,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 8670,
											"end": 8688,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8670,
											"end": 8688,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8520,
											"end": 8694,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 8699,
											"end": 9052,
											"name": "tag",
											"source": 8,
											"value": "278"
										},
										{
											"begin": 8699,
											"end": 9052,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8901,
											"end": 8903,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8883,
											"end": 8904,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8883,
											"end": 8904,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8883,
											"end": 8904,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8940,
											"end": 8942,
											"name": "PUSH",
											"source": 8,
											"value": "1D"
										},
										{
											"begin": 8920,
											"end": 8938,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8920,
											"end": 8938,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8920,
											"end": 8938,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8913,
											"end": 8943,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8979,
											"end": 9010,
											"name": "PUSH",
											"source": 8,
											"value": "416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000"
										},
										{
											"begin": 8974,
											"end": 8976,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8959,
											"end": 8977,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8959,
											"end": 8977,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8952,
											"end": 9011,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9043,
											"end": 9045,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 9028,
											"end": 9046,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9028,
											"end": 9046,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8873,
											"end": 9052,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9057,
											"end": 9401,
											"name": "tag",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 9057,
											"end": 9401,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9259,
											"end": 9261,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9241,
											"end": 9262,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9241,
											"end": 9262,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9241,
											"end": 9262,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9298,
											"end": 9300,
											"name": "PUSH",
											"source": 8,
											"value": "14"
										},
										{
											"begin": 9278,
											"end": 9296,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9278,
											"end": 9296,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9278,
											"end": 9296,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9271,
											"end": 9301,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "26B7B932903A3430B71030B63637B1B0BA34B7B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "61"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9332,
											"end": 9334,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9317,
											"end": 9335,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9317,
											"end": 9335,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9310,
											"end": 9360,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9392,
											"end": 9394,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 9377,
											"end": 9395,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9377,
											"end": 9395,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9231,
											"end": 9401,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9406,
											"end": 9745,
											"name": "tag",
											"source": 8,
											"value": "162"
										},
										{
											"begin": 9406,
											"end": 9745,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9608,
											"end": 9610,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9590,
											"end": 9611,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9590,
											"end": 9611,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9590,
											"end": 9611,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9647,
											"end": 9649,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 9627,
											"end": 9645,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9627,
											"end": 9645,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9627,
											"end": 9645,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9620,
											"end": 9650,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "139BDD081CDD185C9D1959081E595D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9681,
											"end": 9683,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 9666,
											"end": 9684,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9666,
											"end": 9684,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9659,
											"end": 9704,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9736,
											"end": 9738,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 9721,
											"end": 9739,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9721,
											"end": 9739,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9580,
											"end": 9745,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 9750,
											"end": 10156,
											"name": "tag",
											"source": 8,
											"value": "250"
										},
										{
											"begin": 9750,
											"end": 10156,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9952,
											"end": 9954,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9934,
											"end": 9955,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9934,
											"end": 9955,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9934,
											"end": 9955,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9991,
											"end": 9993,
											"name": "PUSH",
											"source": 8,
											"value": "2A"
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9971,
											"end": 9989,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9964,
											"end": 9994,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10030,
											"end": 10064,
											"name": "PUSH",
											"source": 8,
											"value": "5361666545524332303A204552433230206F7065726174696F6E20646964206E"
										},
										{
											"begin": 10025,
											"end": 10027,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10010,
											"end": 10028,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10010,
											"end": 10028,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10003,
											"end": 10065,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1BDD081CDD58D8D95959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10096,
											"end": 10098,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 10081,
											"end": 10099,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10081,
											"end": 10099,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10074,
											"end": 10114,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10146,
											"end": 10149,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 10131,
											"end": 10150,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10131,
											"end": 10150,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9924,
											"end": 10156,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10161,
											"end": 10338,
											"name": "tag",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 10161,
											"end": 10338,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10307,
											"end": 10332,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10307,
											"end": 10332,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10307,
											"end": 10332,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10295,
											"end": 10297,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10280,
											"end": 10298,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10262,
											"end": 10338,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10343,
											"end": 10471,
											"name": "tag",
											"source": 8,
											"value": "215"
										},
										{
											"begin": 10343,
											"end": 10471,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10343,
											"end": 10471,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10414,
											"end": 10415,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10410,
											"end": 10416,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 10407,
											"end": 10408,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10404,
											"end": 10417,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 10401,
											"end": 10403,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10401,
											"end": 10403,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "352"
										},
										{
											"begin": 10401,
											"end": 10403,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10420,
											"end": 10438,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "352"
										},
										{
											"begin": 10420,
											"end": 10438,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 10420,
											"end": 10438,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10420,
											"end": 10438,
											"name": "tag",
											"source": 8,
											"value": "352"
										},
										{
											"begin": 10420,
											"end": 10438,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10456,
											"end": 10465,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10456,
											"end": 10465,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10391,
											"end": 10471,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10476,
											"end": 10693,
											"name": "tag",
											"source": 8,
											"value": "241"
										},
										{
											"begin": 10476,
											"end": 10693,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10476,
											"end": 10693,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10542,
											"end": 10543,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10532,
											"end": 10534,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "355"
										},
										{
											"begin": 10532,
											"end": 10534,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 10567,
											"end": 10598,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10567,
											"end": 10598,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10621,
											"end": 10625,
											"name": "PUSH",
											"source": 8,
											"value": "12"
										},
										{
											"begin": 10618,
											"end": 10619,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 10611,
											"end": 10626,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10649,
											"end": 10653,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 10574,
											"end": 10575,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10639,
											"end": 10654,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 10532,
											"end": 10534,
											"name": "tag",
											"source": 8,
											"value": "355"
										},
										{
											"begin": 10532,
											"end": 10534,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10678,
											"end": 10687,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 10678,
											"end": 10687,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10522,
											"end": 10693,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10698,
											"end": 10866,
											"name": "tag",
											"source": 8,
											"value": "238"
										},
										{
											"begin": 10698,
											"end": 10866,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10698,
											"end": 10866,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10804,
											"end": 10805,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10800,
											"end": 10801,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10796,
											"end": 10802,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 10792,
											"end": 10806,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 10789,
											"end": 10790,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10786,
											"end": 10807,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 10781,
											"end": 10782,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10774,
											"end": 10783,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10767,
											"end": 10784,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10763,
											"end": 10808,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10760,
											"end": 10762,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10760,
											"end": 10762,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "358"
										},
										{
											"begin": 10760,
											"end": 10762,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10811,
											"end": 10829,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "358"
										},
										{
											"begin": 10811,
											"end": 10829,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 10811,
											"end": 10829,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 10811,
											"end": 10829,
											"name": "tag",
											"source": 8,
											"value": "358"
										},
										{
											"begin": 10811,
											"end": 10829,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10851,
											"end": 10860,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 10851,
											"end": 10860,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10750,
											"end": 10866,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 10871,
											"end": 11129,
											"name": "tag",
											"source": 8,
											"value": "327"
										},
										{
											"begin": 10871,
											"end": 11129,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10943,
											"end": 10944,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10953,
											"end": 11066,
											"name": "tag",
											"source": 8,
											"value": "360"
										},
										{
											"begin": 10953,
											"end": 11066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10967,
											"end": 10973,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10964,
											"end": 10965,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10961,
											"end": 10974,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 10953,
											"end": 11066,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10953,
											"end": 11066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "362"
										},
										{
											"begin": 10953,
											"end": 11066,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 11043,
											"end": 11054,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11043,
											"end": 11054,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11043,
											"end": 11054,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11037,
											"end": 11055,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 11024,
											"end": 11035,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11024,
											"end": 11035,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11024,
											"end": 11035,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11017,
											"end": 11056,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10989,
											"end": 10991,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10982,
											"end": 10992,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10953,
											"end": 11066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "360"
										},
										{
											"begin": 10953,
											"end": 11066,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10953,
											"end": 11066,
											"name": "tag",
											"source": 8,
											"value": "362"
										},
										{
											"begin": 10953,
											"end": 11066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11084,
											"end": 11090,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 11081,
											"end": 11082,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 11078,
											"end": 11091,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 11075,
											"end": 11077,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 11075,
											"end": 11077,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 11075,
											"end": 11077,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11119,
											"end": 11120,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11101,
											"end": 11117,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 11101,
											"end": 11117,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11094,
											"end": 11121,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 10924,
											"end": 11129,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11134,
											"end": 11269,
											"name": "tag",
											"source": 8,
											"value": "123"
										},
										{
											"begin": 11134,
											"end": 11269,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11134,
											"end": 11269,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 11194,
											"end": 11211,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 11194,
											"end": 11211,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 11191,
											"end": 11193,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 11191,
											"end": 11193,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 11191,
											"end": 11193,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 11214,
											"end": 11232,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 11214,
											"end": 11232,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 11214,
											"end": 11232,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 11214,
											"end": 11232,
											"name": "tag",
											"source": 8,
											"value": "366"
										},
										{
											"begin": 11214,
											"end": 11232,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 11261,
											"end": 11262,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 11250,
											"end": 11263,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11250,
											"end": 11263,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 11181,
											"end": 11269,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 11274,
											"end": 11401,
											"name": "tag",
											"source": 8,
											"value": "353"
										},
										{
											"begin": 11274,
											"end": 11401,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11335,
											"end": 11345,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 11330,
											"end": 11333,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 11326,
											"end": 11346,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 11323,
											"end": 11324,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11316,
											"end": 11347,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11366,
											"end": 11370,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 11363,
											"end": 11364,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 11356,
											"end": 11371,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11390,
											"end": 11394,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 11387,
											"end": 11388,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11380,
											"end": 11395,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 11406,
											"end": 11533,
											"name": "tag",
											"source": 8,
											"value": "312"
										},
										{
											"begin": 11406,
											"end": 11533,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 11467,
											"end": 11477,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 11462,
											"end": 11465,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 11458,
											"end": 11478,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 11455,
											"end": 11456,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11448,
											"end": 11479,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11498,
											"end": 11502,
											"name": "PUSH",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 11495,
											"end": 11496,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 11488,
											"end": 11503,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11522,
											"end": 11526,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 11519,
											"end": 11520,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 11512,
											"end": 11527,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"DAOAddress()": "d392eab1",
							"SET(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": "e3bef142",
							"alphaSEA()": "492cc4e3",
							"boughtSEA(address)": "ef8cdaa4",
							"calculateSaleQuote(uint256)": "2092c12b",
							"endTimestamp()": "a85adeab",
							"initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": "d45fc1a9",
							"maxAmount()": "5f48f393",
							"minAmount()": "9b2cb5d8",
							"owner()": "8da5cb5b",
							"purchaseaSEA(uint256)": "b2292994",
							"remainingPurchasesMaxAmt()": "e58bf43a",
							"renounceOwnership()": "715018a6",
							"salePrice()": "f51f96dd",
							"saleStarted()": "5c474f9e",
							"sellAmount()": "3f407b84",
							"setStart()": "35975a37",
							"startTimestamp()": "e6fd48bc",
							"toTalAmount()": "9e623ae4",
							"transferOwnership(address)": "f2fde38b",
							"usdc()": "3e413bee",
							"whiteListBuyers(address[])": "1eef7659",
							"whiteListed(address)": "fa0fca84"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DAOAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DAOAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alphaSEA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toTalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_remainingPurchasesMaxAmt\",\"type\":\"uint256\"}],\"name\":\"SET\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"alphaSEA\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"boughtSEA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paymentAmount_\",\"type\":\"uint256\"}],\"name\":\"calculateSaleQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_DAOAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_alphaSEA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_toTalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_remainingPurchasesMaxAmt\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_val\",\"type\":\"uint256\"}],\"name\":\"purchaseaSEA\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"remainingPurchasesMaxAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"salePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStart\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toTalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdc\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_buyers\",\"type\":\"address[]\"}],\"name\":\"whiteListBuyers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whiteListed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO/SEAPreSale.sol\":\"SEAPreSale\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://272fdc13ea6d62470f1009a1adf0d28b67be2c75415e9f24eee38164dd69fb04\",\"dweb:/ipfs/QmfZDcxQEFdAi1AwMTHozZJrwFoUCEZnbcJcRhqmahuTBR\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x5f13da6a5f023d6e9b3e48a3690458bfceea5872c0e3ddf1b2b528133f87a992\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f10cded435297e67d3720adb22790ee7f8ab7f5d977a815e87f33560800819c\",\"dweb:/ipfs/QmeMx1jpSb66jrT1P184kTuh8p9FSqbYUXoVbXNdnJPqkf\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ff7fe6e13cf851da3cdc27c7c4c58249ca6a53765f1bb40a5b8ec87b1b84599\",\"dweb:/ipfs/QmZ7JzzhpEMBgk7p9TVzwXDduvJJQtZhQwF3R1vZ9EdgMP\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"keccak256\":\"0x7090f66700fbb4955abf72ba8e06e4a1eafb5bae1423032102dcbb2172da5543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb3c830201b945b96b0f7db921aeed52a7a40382ddab6466b5a97ecdd5a1571a\",\"dweb:/ipfs/QmcMWcz6DveTkqXE3EWwf3A9xPXhdUUZTXgKoSvzFyeYe9\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e51755c6934703b61e7edb7d3edef985f429be6bef384b15e1b616ea65176934\",\"dweb:/ipfs/QmQVb4hBJcTMthp5hJquUy5tPsDwgiKQ8nGExckR75G88u\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2125524ea896700181f25ee543d35a980b9477eaf13fd1878ae24be5dcc3ba75\",\"dweb:/ipfs/QmXw9DTW1t1UiTZanfESSJ6jm2xVSQpsdsdKnBTYeBnwqh\"]},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"keccak256\":\"0x23ee0c2d7bcce5d09d40f3a14c91f29000d3a83b8a9c26440cd1b3748a93ea47\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://62f7975f651c46b43acd346786d7cf5f78027d21a2dd694377b271ba97209ada\",\"dweb:/ipfs/QmNS7ppgMivJCJgu6JzEN8MvjWM7ctsDREcNyHTcZzYXRG\"]},\"contracts/IDO/SEAPreSale.sol\":{\"keccak256\":\"0xeeff485de846a88cd9edc568a47051998a92efe963d2007f3c4bd443b52b2157\",\"license\":\"AGPL-3.0-or-later\",\"urls\":[\"bzz-raw://422aff8216eb91d3e4677ea692466ae4cb9bfde8cd4a9352c448e961fb6d3764\",\"dweb:/ipfs/QmZ7JaZeYEWBgvAi4dadHyxUx7ExfxdYgtSETYip67RebW\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 133,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 760,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 124,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 1093,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "alphaSEA",
								"offset": 0,
								"slot": "101",
								"type": "t_address"
							},
							{
								"astId": 1095,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "DAOAddress",
								"offset": 0,
								"slot": "102",
								"type": "t_address"
							},
							{
								"astId": 1097,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "usdc",
								"offset": 0,
								"slot": "103",
								"type": "t_address"
							},
							{
								"astId": 1099,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "minAmount",
								"offset": 0,
								"slot": "104",
								"type": "t_uint256"
							},
							{
								"astId": 1101,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "maxAmount",
								"offset": 0,
								"slot": "105",
								"type": "t_uint256"
							},
							{
								"astId": 1103,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "salePrice",
								"offset": 0,
								"slot": "106",
								"type": "t_uint256"
							},
							{
								"astId": 1105,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "startTimestamp",
								"offset": 0,
								"slot": "107",
								"type": "t_uint256"
							},
							{
								"astId": 1107,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "endTimestamp",
								"offset": 0,
								"slot": "108",
								"type": "t_uint256"
							},
							{
								"astId": 1109,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "toTalAmount",
								"offset": 0,
								"slot": "109",
								"type": "t_uint256"
							},
							{
								"astId": 1111,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "sellAmount",
								"offset": 0,
								"slot": "110",
								"type": "t_uint256"
							},
							{
								"astId": 1113,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "remainingPurchasesMaxAmt",
								"offset": 0,
								"slot": "111",
								"type": "t_uint256"
							},
							{
								"astId": 1115,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "saleStarted",
								"offset": 0,
								"slot": "112",
								"type": "t_bool"
							},
							{
								"astId": 1119,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "boughtSEA",
								"offset": 0,
								"slot": "113",
								"type": "t_mapping(t_address,t_bool)"
							},
							{
								"astId": 1123,
								"contract": "contracts/IDO/SEAPreSale.sol:SEAPreSale",
								"label": "whiteListed",
								"offset": 0,
								"slot": "114",
								"type": "t_mapping(t_address,t_bool)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							761
						],
						"Initializable": [
							170
						],
						"OwnableUpgradeable": [
							125
						]
					},
					"id": 126,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 126,
							"sourceUnit": 762,
							"src": "112:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 3,
							"nodeType": "ImportDirective",
							"scope": 126,
							"sourceUnit": 171,
							"src": "154:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 170,
										"src": "733:13:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "733:13:0"
								},
								{
									"baseName": {
										"id": 7,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 761,
										"src": "748:18:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "748:18:0"
								}
							],
							"contractDependencies": [
								170,
								761
							],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "198:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 125,
							"linearizedBaseContracts": [
								125,
								761,
								170
							],
							"name": "OwnableUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 125,
									"src": "773:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "773:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 16,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "829:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "829:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "860:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "860:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "828:57:0"
									},
									"src": "802:84:0"
								},
								{
									"body": {
										"id": 28,
										"nodeType": "Block",
										"src": "1035:79:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 738,
														"src": "1045:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1045:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1045:26:0"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 25,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 40,
														"src": "1081:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1081:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 27,
												"nodeType": "ExpressionStatement",
												"src": "1081:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "892:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 29,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 20,
											"modifierName": {
												"id": 19,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "1023:11:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1023:11:0"
										}
									],
									"name": "__Ownable_init",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1011:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1035:0:0"
									},
									"scope": 125,
									"src": "988:126:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1177:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 35,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 747,
																"src": "1206:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 36,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1206:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 34,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "1187:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1187:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 38,
												"nodeType": "ExpressionStatement",
												"src": "1187:32:0"
											}
										]
									},
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 32,
											"modifierName": {
												"id": 31,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "1165:11:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1165:11:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1153:2:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1177:0:0"
									},
									"scope": 125,
									"src": "1120:106:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 48,
										"nodeType": "Block",
										"src": "1357:30:0",
										"statements": [
											{
												"expression": {
													"id": 46,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1374:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 45,
												"id": 47,
												"nodeType": "Return",
												"src": "1367:13:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1232:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 49,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1316:2:0"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "1348:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 43,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1347:9:0"
									},
									"scope": 125,
									"src": "1302:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 62,
										"nodeType": "Block",
										"src": "1496:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 57,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 53,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 49,
																	"src": "1514:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1514:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 55,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 747,
																	"src": "1525:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 56,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1525:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1514:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 58,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1539:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 52,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1506:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1506:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 60,
												"nodeType": "ExpressionStatement",
												"src": "1506:68:0"
											},
											{
												"id": 61,
												"nodeType": "PlaceholderStatement",
												"src": "1584:1:0"
											}
										]
									},
									"documentation": {
										"id": 50,
										"nodeType": "StructuredDocumentation",
										"src": "1393:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 63,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1493:2:0"
									},
									"src": "1475:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 76,
										"nodeType": "Block",
										"src": "1988:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 72,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2025:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 71,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2017:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 70,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2017:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 73,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2017:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 69,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "1998:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 74,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 75,
												"nodeType": "ExpressionStatement",
												"src": "1998:30:0"
											}
										]
									},
									"documentation": {
										"id": 64,
										"nodeType": "StructuredDocumentation",
										"src": "1598:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 77,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 67,
											"modifierName": {
												"id": 66,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1960:2:0"
									},
									"returnParameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 125,
									"src": "1934:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 99,
										"nodeType": "Block",
										"src": "2254:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 91,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 86,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 80,
																"src": "2272:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 89,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2292:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 88,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2284:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 87,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2284:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 90,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2284:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2272:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 92,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2296:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 85,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2264:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 93,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2264:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 94,
												"nodeType": "ExpressionStatement",
												"src": "2264:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 96,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 80,
															"src": "2366:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 95,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "2347:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 97,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2347:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 98,
												"nodeType": "ExpressionStatement",
												"src": "2347:28:0"
											}
										]
									},
									"documentation": {
										"id": 78,
										"nodeType": "StructuredDocumentation",
										"src": "2041:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 100,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 83,
											"modifierName": {
												"id": 82,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "2244:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2244:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 100,
												"src": "2211:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 79,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2210:18:0"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2254:0:0"
									},
									"scope": 125,
									"src": "2184:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 119,
										"nodeType": "Block",
										"src": "2599:124:0",
										"statements": [
											{
												"assignments": [
													107
												],
												"declarations": [
													{
														"constant": false,
														"id": 107,
														"mutability": "mutable",
														"name": "oldOwner",
														"nodeType": "VariableDeclaration",
														"scope": 119,
														"src": "2609:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 106,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2609:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 109,
												"initialValue": {
													"id": 108,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "2628:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2609:25:0"
											},
											{
												"expression": {
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 110,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2644:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 111,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2653:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2644:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 113,
												"nodeType": "ExpressionStatement",
												"src": "2644:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 115,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 107,
															"src": "2697:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 116,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 103,
															"src": "2707:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 114,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2676:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2676:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 118,
												"nodeType": "EmitStatement",
												"src": "2671:45:0"
											}
										]
									},
									"documentation": {
										"id": 101,
										"nodeType": "StructuredDocumentation",
										"src": "2388:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 120,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "2564:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 102,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2564:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2563:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2599:0:0"
									},
									"scope": 125,
									"src": "2536:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 124,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"scope": 125,
									"src": "2728:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 121,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2728:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 123,
										"length": {
											"hexValue": "3439",
											"id": 122,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2736:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "2728:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 126,
							"src": "693:2063:0"
						}
					],
					"src": "87:2670:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							170
						]
					},
					"id": 171,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 127,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "98:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 170,
							"linearizedBaseContracts": [
								170
							],
							"name": "Initializable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "161:73:1",
										"text": " @dev Indicates that the contract has been initialized."
									},
									"id": 130,
									"mutability": "mutable",
									"name": "_initialized",
									"nodeType": "VariableDeclaration",
									"scope": 170,
									"src": "239:25:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 129,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "239:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 131,
										"nodeType": "StructuredDocumentation",
										"src": "271:91:1",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 133,
									"mutability": "mutable",
									"name": "_initializing",
									"nodeType": "VariableDeclaration",
									"scope": 170,
									"src": "367:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 132,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "367:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 168,
										"nodeType": "Block",
										"src": "521:348:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 140,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 137,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "539:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"id": 139,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "556:13:1",
																"subExpression": {
																	"id": 138,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "557:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "539:30:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 141,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "571:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 136,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "531:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "531:89:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 143,
												"nodeType": "ExpressionStatement",
												"src": "531:89:1"
											},
											{
												"assignments": [
													145
												],
												"declarations": [
													{
														"constant": false,
														"id": 145,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nodeType": "VariableDeclaration",
														"scope": 168,
														"src": "631:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 144,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "631:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 148,
												"initialValue": {
													"id": 147,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "653:14:1",
													"subExpression": {
														"id": 146,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 133,
														"src": "654:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "631:36:1"
											},
											{
												"condition": {
													"id": 149,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 145,
													"src": "681:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 159,
												"nodeType": "IfStatement",
												"src": "677:98:1",
												"trueBody": {
													"id": 158,
													"nodeType": "Block",
													"src": "697:78:1",
													"statements": [
														{
															"expression": {
																"id": 152,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 150,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "711:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 151,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "727:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "711:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 153,
															"nodeType": "ExpressionStatement",
															"src": "711:20:1"
														},
														{
															"expression": {
																"id": 156,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 154,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "745:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "760:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "745:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 157,
															"nodeType": "ExpressionStatement",
															"src": "745:19:1"
														}
													]
												}
											},
											{
												"id": 160,
												"nodeType": "PlaceholderStatement",
												"src": "785:1:1"
											},
											{
												"condition": {
													"id": 161,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 145,
													"src": "801:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 167,
												"nodeType": "IfStatement",
												"src": "797:66:1",
												"trueBody": {
													"id": 166,
													"nodeType": "Block",
													"src": "817:46:1",
													"statements": [
														{
															"expression": {
																"id": 164,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 162,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "831:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "847:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "831:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 165,
															"nodeType": "ExpressionStatement",
															"src": "831:21:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "400:93:1",
										"text": " @dev Modifier to protect an initializer function from being invoked twice."
									},
									"id": 169,
									"name": "initializer",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "518:2:1"
									},
									"src": "498:371:1",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 171,
							"src": "123:748:1"
						}
					],
					"src": "98:774:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							248
						]
					},
					"id": 249,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 172,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "91:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 173,
								"nodeType": "StructuredDocumentation",
								"src": "116:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 248,
							"linearizedBaseContracts": [
								248
							],
							"name": "IERC20Upgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 174,
										"nodeType": "StructuredDocumentation",
										"src": "221:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 179,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "312:2:2"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "338:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "338:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "337:9:2"
									},
									"scope": 248,
									"src": "292:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 180,
										"nodeType": "StructuredDocumentation",
										"src": "353:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 187,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "449:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "449:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:17:2"
									},
									"returnParameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "489:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "489:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "488:9:2"
									},
									"scope": 248,
									"src": "430:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 188,
										"nodeType": "StructuredDocumentation",
										"src": "504:209:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 197,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "736:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 189,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "736:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "755:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "755:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "735:35:2"
									},
									"returnParameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "789:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 194,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "789:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "788:6:2"
									},
									"scope": 248,
									"src": "718:77:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "801:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 207,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "1089:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1089:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "1104:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1104:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1088:32:2"
									},
									"returnParameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "1144:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1144:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1143:9:2"
									},
									"scope": 248,
									"src": "1070:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 208,
										"nodeType": "StructuredDocumentation",
										"src": "1159:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 217,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1823:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 209,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1823:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1840:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 211,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1840:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1822:33:2"
									},
									"returnParameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1874:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 214,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1874:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1873:6:2"
									},
									"scope": 248,
									"src": "1806:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 218,
										"nodeType": "StructuredDocumentation",
										"src": "1886:296:2",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 229,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "2218:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2218:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "2242:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2242:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "2269:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2269:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2208:81:2"
									},
									"returnParameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "2308:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 226,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2308:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2307:6:2"
									},
									"scope": 248,
									"src": "2187:127:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 230,
										"nodeType": "StructuredDocumentation",
										"src": "2320:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 238,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2498:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2498:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2520:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2520:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2540:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2540:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2497:57:2"
									},
									"src": "2483:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "2561:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 247,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "2729:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2729:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "2752:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 242,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2752:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "2777:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2777:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2728:63:2"
									},
									"src": "2714:78:2"
								}
							],
							"scope": 249,
							"src": "187:2607:2"
						}
					],
					"src": "91:2704:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							717
						],
						"IERC20Upgradeable": [
							248
						],
						"SafeERC20Upgradeable": [
							472
						]
					},
					"id": 473,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 250,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 251,
							"nodeType": "ImportDirective",
							"scope": 473,
							"sourceUnit": 249,
							"src": "125:34:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../../utils/AddressUpgradeable.sol",
							"id": 252,
							"nodeType": "ImportDirective",
							"scope": 473,
							"sourceUnit": 718,
							"src": "160:47:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 253,
								"nodeType": "StructuredDocumentation",
								"src": "209:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 472,
							"linearizedBaseContracts": [
								472
							],
							"name": "SafeERC20Upgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 256,
									"libraryName": {
										"id": 254,
										"name": "AddressUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 717,
										"src": "708:18:3"
									},
									"nodeType": "UsingForDirective",
									"src": "702:37:3",
									"typeName": {
										"id": 255,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "731:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "858:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 267,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 259,
															"src": "888:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 270,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 259,
																			"src": "918:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 271,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 197,
																		"src": "918:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 272,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "918:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 273,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 261,
																	"src": "943:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 274,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 263,
																	"src": "947:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 268,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "895:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 269,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "895:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "895:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 266,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 471,
														"src": "868:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "868:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "868:86:3"
											}
										]
									},
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "776:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 258,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 257,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 248,
														"src": "776:17:3"
													},
													"referencedDeclaration": 248,
													"src": "776:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "809:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "809:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "829:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "829:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "766:82:3"
									},
									"returnParameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:0:3"
									},
									"scope": 472,
									"src": "745:216:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 304,
										"nodeType": "Block",
										"src": "1106:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 292,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 282,
															"src": "1136:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 295,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 282,
																			"src": "1166:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 296,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 229,
																		"src": "1166:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 297,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1166:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 298,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 284,
																	"src": "1195:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 299,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 286,
																	"src": "1201:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 300,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 288,
																	"src": "1205:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 293,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1143:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 294,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1143:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 301,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1143:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 291,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 471,
														"src": "1116:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1116:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 303,
												"nodeType": "ExpressionStatement",
												"src": "1116:96:3"
											}
										]
									},
									"id": 305,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "1002:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 281,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 280,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 248,
														"src": "1002:17:3"
													},
													"referencedDeclaration": 248,
													"src": "1002:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "1035:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1035:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "1057:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1057:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "1077:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1077:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "992:104:3"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1106:0:3"
									},
									"scope": 472,
									"src": "967:252:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 348,
										"nodeType": "Block",
										"src": "1596:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 319,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 317,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 313,
																			"src": "1845:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 318,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1854:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1845:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 320,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1844:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 330,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 325,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1885:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$472",
																								"typeString": "library SafeERC20Upgradeable"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$472",
																								"typeString": "library SafeERC20Upgradeable"
																							}
																						],
																						"id": 324,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1877:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 323,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1877:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 326,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1877:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 327,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 311,
																					"src": "1892:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 321,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 309,
																					"src": "1861:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																						"typeString": "contract IERC20Upgradeable"
																					}
																				},
																				"id": 322,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 207,
																				"src": "1861:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 328,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1861:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 329,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1904:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1861:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 331,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1860:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1844:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 333,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1920:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 316,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1823:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1823:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 335,
												"nodeType": "ExpressionStatement",
												"src": "1823:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 337,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "2016:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 340,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 309,
																			"src": "2046:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 341,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 217,
																		"src": "2046:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 342,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2046:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 343,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 311,
																	"src": "2070:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 344,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 313,
																	"src": "2079:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 338,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2023:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 339,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2023:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2023:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 336,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 471,
														"src": "1996:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1996:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 347,
												"nodeType": "ExpressionStatement",
												"src": "1996:90:3"
											}
										]
									},
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "1225:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 349,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1509:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 308,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 307,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 248,
														"src": "1509:17:3"
													},
													"referencedDeclaration": 248,
													"src": "1509:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 311,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1542:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 310,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 313,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1567:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 312,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1499:87:3"
									},
									"returnParameters": {
										"id": 315,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1596:0:3"
									},
									"scope": 472,
									"src": "1479:614:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 384,
										"nodeType": "Block",
										"src": "2226:194:3",
										"statements": [
											{
												"assignments": [
													360
												],
												"declarations": [
													{
														"constant": false,
														"id": 360,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 384,
														"src": "2236:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 359,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2236:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 371,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 365,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2283:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$472",
																			"typeString": "library SafeERC20Upgradeable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$472",
																			"typeString": "library SafeERC20Upgradeable"
																		}
																	],
																	"id": 364,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2275:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 363,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2275:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 366,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2275:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 367,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 354,
																"src": "2290:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 361,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 352,
																"src": "2259:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																	"typeString": "contract IERC20Upgradeable"
																}
															},
															"id": 362,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 207,
															"src": "2259:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 368,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2259:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 369,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 356,
														"src": "2301:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2259:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2236:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 373,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "2336:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 376,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 352,
																			"src": "2366:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 377,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 217,
																		"src": "2366:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 378,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2366:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 379,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 354,
																	"src": "2390:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 380,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 360,
																	"src": "2399:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 374,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2343:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 375,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2343:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 381,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2343:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 372,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 471,
														"src": "2316:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2316:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 383,
												"nodeType": "ExpressionStatement",
												"src": "2316:97:3"
											}
										]
									},
									"id": 385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "2139:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 351,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 350,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 248,
														"src": "2139:17:3"
													},
													"referencedDeclaration": 248,
													"src": "2139:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "2172:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2172:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "2197:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 355,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2197:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2129:87:3"
									},
									"returnParameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2226:0:3"
									},
									"scope": 472,
									"src": "2099:321:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 432,
										"nodeType": "Block",
										"src": "2553:370:3",
										"statements": [
											{
												"id": 431,
												"nodeType": "UncheckedBlock",
												"src": "2563:354:3",
												"statements": [
													{
														"assignments": [
															396
														],
														"declarations": [
															{
																"constant": false,
																"id": 396,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nodeType": "VariableDeclaration",
																"scope": 431,
																"src": "2587:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 395,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2587:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 405,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 401,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2634:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$472",
																				"typeString": "library SafeERC20Upgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$472",
																				"typeString": "library SafeERC20Upgradeable"
																			}
																		],
																		"id": 400,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2626:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 399,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2626:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2626:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 403,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 390,
																	"src": "2641:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 397,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "2610:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																		"typeString": "contract IERC20Upgradeable"
																	}
																},
																"id": 398,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 207,
																"src": "2610:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 404,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2610:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2587:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 409,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 407,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 396,
																		"src": "2671:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 408,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 392,
																		"src": "2687:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2671:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 410,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2694:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 406,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2663:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2663:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 412,
														"nodeType": "ExpressionStatement",
														"src": "2663:75:3"
													},
													{
														"assignments": [
															414
														],
														"declarations": [
															{
																"constant": false,
																"id": 414,
																"mutability": "mutable",
																"name": "newAllowance",
																"nodeType": "VariableDeclaration",
																"scope": 431,
																"src": "2752:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 413,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2752:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 418,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 415,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 396,
																"src": "2775:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 416,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 392,
																"src": "2790:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2775:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2752:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 420,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "2829:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																		"typeString": "contract IERC20Upgradeable"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 423,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 388,
																					"src": "2859:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																						"typeString": "contract IERC20Upgradeable"
																					}
																				},
																				"id": 424,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 217,
																				"src": "2859:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 425,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2859:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 426,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 390,
																			"src": "2883:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 427,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 414,
																			"src": "2892:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 421,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2836:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 422,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2836:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 428,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2836:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																		"typeString": "contract IERC20Upgradeable"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 419,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 471,
																"src": "2809:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20Upgradeable,bytes memory)"
																}
															},
															"id": 429,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2809:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 430,
														"nodeType": "ExpressionStatement",
														"src": "2809:97:3"
													}
												]
											}
										]
									},
									"id": 433,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "2466:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 387,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 386,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 248,
														"src": "2466:17:3"
													},
													"referencedDeclaration": 248,
													"src": "2466:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "2499:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2499:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "2524:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2524:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2456:87:3"
									},
									"returnParameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2553:0:3"
									},
									"scope": 472,
									"src": "2426:497:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 470,
										"nodeType": "Block",
										"src": "3387:636:3",
										"statements": [
											{
												"assignments": [
													443
												],
												"declarations": [
													{
														"constant": false,
														"id": 443,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 470,
														"src": "3736:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 442,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3736:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 452,
												"initialValue": {
													"arguments": [
														{
															"id": 449,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 439,
															"src": "3790:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 450,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3796:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 446,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 437,
																	"src": "3770:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																		"typeString": "contract IERC20Upgradeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																		"typeString": "contract IERC20Upgradeable"
																	}
																],
																"id": 445,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3762:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 444,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3762:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 447,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3762:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 448,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 563,
														"src": "3762:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3762:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3736:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 453,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 443,
															"src": "3845:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 454,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3845:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 455,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3865:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3845:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 469,
												"nodeType": "IfStatement",
												"src": "3841:176:3",
												"trueBody": {
													"id": 468,
													"nodeType": "Block",
													"src": "3868:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 460,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 443,
																				"src": "3940:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 462,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3953:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 461,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3953:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 463,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3952:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 458,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3929:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 459,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3929:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 464,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3929:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 465,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3961:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 457,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3921:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 466,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3921:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 467,
															"nodeType": "ExpressionStatement",
															"src": "3921:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 434,
										"nodeType": "StructuredDocumentation",
										"src": "2929:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 471,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 471,
												"src": "3335:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 436,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 435,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 248,
														"src": "3335:17:3"
													},
													"referencedDeclaration": 248,
													"src": "3335:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 471,
												"src": "3360:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 438,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3360:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3334:44:3"
									},
									"returnParameters": {
										"id": 441,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3387:0:3"
									},
									"scope": 472,
									"src": "3306:717:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 473,
							"src": "667:3358:3"
						}
					],
					"src": "100:3926:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							717
						]
					},
					"id": 718,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 474,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 475,
								"nodeType": "StructuredDocumentation",
								"src": "111:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 717,
							"linearizedBaseContracts": [
								717
							],
							"name": "AddressUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 491,
										"nodeType": "Block",
										"src": "848:311:4",
										"statements": [
											{
												"assignments": [
													484
												],
												"declarations": [
													{
														"constant": false,
														"id": 484,
														"mutability": "mutable",
														"name": "size",
														"nodeType": "VariableDeclaration",
														"scope": 491,
														"src": "1045:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 483,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1045:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 485,
												"nodeType": "VariableDeclarationStatement",
												"src": "1045:12:4"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1076:52:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1090:28:4",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "1110:7:4"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "1098:11:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1098:20:4"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1090:4:4"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 478,
														"isOffset": false,
														"isSlot": false,
														"src": "1110:7:4",
														"valueSize": 1
													},
													{
														"declaration": 484,
														"isOffset": false,
														"isSlot": false,
														"src": "1090:4:4",
														"valueSize": 1
													}
												],
												"id": 486,
												"nodeType": "InlineAssembly",
												"src": "1067:61:4"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 487,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 484,
														"src": "1144:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 488,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1151:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1144:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 482,
												"id": 490,
												"nodeType": "Return",
												"src": "1137:15:4"
											}
										]
									},
									"documentation": {
										"id": 476,
										"nodeType": "StructuredDocumentation",
										"src": "212:565:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 492,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "802:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 477,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "802:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "801:17:4"
									},
									"returnParameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "842:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 480,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "842:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "841:6:4"
									},
									"scope": 717,
									"src": "782:377:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 525,
										"nodeType": "Block",
										"src": "2147:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 503,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2173:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$717",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$717",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2165:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 501,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2165:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 504,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2165:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 505,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2165:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 506,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 497,
																"src": "2190:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2165:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 508,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2198:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 500,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2157:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2157:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 510,
												"nodeType": "ExpressionStatement",
												"src": "2157:73:4"
											},
											{
												"assignments": [
													512,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 512,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 525,
														"src": "2242:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 511,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2242:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 519,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 517,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2290:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 513,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 495,
																"src": "2260:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 514,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2260:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 516,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 515,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 497,
																"src": "2282:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2260:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 518,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2260:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2241:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 521,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 512,
															"src": "2311:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 522,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2320:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 520,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2303:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 524,
												"nodeType": "ExpressionStatement",
												"src": "2303:78:4"
											}
										]
									},
									"documentation": {
										"id": 493,
										"nodeType": "StructuredDocumentation",
										"src": "1165:906:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 526,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 526,
												"src": "2095:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 494,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2095:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 526,
												"src": "2122:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 496,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2122:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2094:43:4"
									},
									"returnParameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2147:0:4"
									},
									"scope": 717,
									"src": "2076:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 542,
										"nodeType": "Block",
										"src": "3219:84:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 537,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 529,
															"src": "3249:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 538,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 531,
															"src": "3257:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 539,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3263:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 536,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															543,
															563
														],
														"referencedDeclaration": 563,
														"src": "3236:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3236:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 535,
												"id": 541,
												"nodeType": "Return",
												"src": "3229:67:4"
											}
										]
									},
									"documentation": {
										"id": 527,
										"nodeType": "StructuredDocumentation",
										"src": "2394:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 543,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "3152:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3152:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "3168:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 530,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3168:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3151:35:4"
									},
									"returnParameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "3205:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 533,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3205:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3204:14:4"
									},
									"scope": 717,
									"src": "3130:173:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 562,
										"nodeType": "Block",
										"src": "3672:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 556,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "3711:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 557,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 548,
															"src": "3719:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 558,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3725:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 559,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 550,
															"src": "3728:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 555,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															583,
															633
														],
														"referencedDeclaration": 633,
														"src": "3689:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3689:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 554,
												"id": 561,
												"nodeType": "Return",
												"src": "3682:59:4"
											}
										]
									},
									"documentation": {
										"id": 544,
										"nodeType": "StructuredDocumentation",
										"src": "3309:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 563,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "3556:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 545,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3556:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 548,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "3580:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 547,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3580:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 550,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "3607:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 549,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3607:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3546:93:4"
									},
									"returnParameters": {
										"id": 554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 553,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "3658:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 552,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3658:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3657:14:4"
									},
									"scope": 717,
									"src": "3525:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 582,
										"nodeType": "Block",
										"src": "4253:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 576,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 566,
															"src": "4292:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 577,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 568,
															"src": "4300:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 578,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 570,
															"src": "4306:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 579,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4313:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 575,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															583,
															633
														],
														"referencedDeclaration": 633,
														"src": "4270:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4270:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 574,
												"id": 581,
												"nodeType": "Return",
												"src": "4263:94:4"
											}
										]
									},
									"documentation": {
										"id": 564,
										"nodeType": "StructuredDocumentation",
										"src": "3754:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 583,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4150:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 565,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4150:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4174:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 567,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4174:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4201:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 569,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4201:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4140:80:4"
									},
									"returnParameters": {
										"id": 574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4239:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 572,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4239:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4238:14:4"
									},
									"scope": 717,
									"src": "4110:254:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 632,
										"nodeType": "Block",
										"src": "4791:320:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 604,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 600,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4817:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$717",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$717",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 599,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4809:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 598,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4809:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 601,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4809:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 602,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "4809:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 603,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 590,
																"src": "4834:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4809:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 605,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4841:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 597,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4801:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4801:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 607,
												"nodeType": "ExpressionStatement",
												"src": "4801:81:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 610,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 586,
																	"src": "4911:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 609,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 492,
																"src": "4900:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 611,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4900:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 612,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4920:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 608,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4892:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4892:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 614,
												"nodeType": "ExpressionStatement",
												"src": "4892:60:4"
											},
											{
												"assignments": [
													616,
													618
												],
												"declarations": [
													{
														"constant": false,
														"id": 616,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 632,
														"src": "4964:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 615,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4964:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 618,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 632,
														"src": "4978:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 617,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4978:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 625,
												"initialValue": {
													"arguments": [
														{
															"id": 623,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "5031:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 619,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 586,
																"src": "5005:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5005:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 622,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 621,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 590,
																"src": "5024:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5005:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 624,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5005:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4963:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 627,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 616,
															"src": "5070:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 628,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "5079:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 629,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 592,
															"src": "5091:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 626,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 716,
														"src": "5053:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5053:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 596,
												"id": 631,
												"nodeType": "Return",
												"src": "5046:58:4"
											}
										]
									},
									"documentation": {
										"id": 584,
										"nodeType": "StructuredDocumentation",
										"src": "4370:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 633,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "4652:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 585,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4652:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 588,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "4676:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 587,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4676:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "4703:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 589,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4703:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "4726:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 591,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4726:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4642:116:4"
									},
									"returnParameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "4777:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 594,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4777:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4776:14:4"
									},
									"scope": 717,
									"src": "4612:499:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 649,
										"nodeType": "Block",
										"src": "5388:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 644,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "5424:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 645,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 638,
															"src": "5432:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 646,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5438:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 643,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															650,
															685
														],
														"referencedDeclaration": 685,
														"src": "5405:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 647,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5405:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 642,
												"id": 648,
												"nodeType": "Return",
												"src": "5398:80:4"
											}
										]
									},
									"documentation": {
										"id": 634,
										"nodeType": "StructuredDocumentation",
										"src": "5117:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 650,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "5316:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 635,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5316:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "5332:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 637,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5332:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5315:35:4"
									},
									"returnParameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 641,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "5374:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 640,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5374:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5373:14:4"
									},
									"scope": 717,
									"src": "5288:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 684,
										"nodeType": "Block",
										"src": "5827:228:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 664,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 653,
																	"src": "5856:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 663,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 492,
																"src": "5845:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 665,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5845:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 666,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5865:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 662,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5837:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 667,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5837:67:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 668,
												"nodeType": "ExpressionStatement",
												"src": "5837:67:4"
											},
											{
												"assignments": [
													670,
													672
												],
												"declarations": [
													{
														"constant": false,
														"id": 670,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 684,
														"src": "5916:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 669,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5916:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 672,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 684,
														"src": "5930:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 671,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5930:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 677,
												"initialValue": {
													"arguments": [
														{
															"id": 675,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 655,
															"src": "5975:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 673,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 653,
															"src": "5957:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 674,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "5957:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5957:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5915:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 679,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "6014:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 680,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "6023:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 681,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 657,
															"src": "6035:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 678,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 716,
														"src": "5997:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5997:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 661,
												"id": 683,
												"nodeType": "Return",
												"src": "5990:58:4"
											}
										]
									},
									"documentation": {
										"id": 651,
										"nodeType": "StructuredDocumentation",
										"src": "5491:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 685,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "5706:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5706:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "5730:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 654,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5730:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "5757:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 656,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5757:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5696:93:4"
									},
									"returnParameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "5813:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 659,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5813:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5812:14:4"
									},
									"scope": 717,
									"src": "5669:386:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 715,
										"nodeType": "Block",
										"src": "6435:532:4",
										"statements": [
											{
												"condition": {
													"id": 697,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 688,
													"src": "6449:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 713,
													"nodeType": "Block",
													"src": "6506:455:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 704,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 701,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 690,
																		"src": "6590:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 702,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "6590:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 703,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6610:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6590:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 711,
																"nodeType": "Block",
																"src": "6898:53:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 708,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 692,
																					"src": "6923:12:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 707,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "6916:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 709,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6916:20:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 710,
																		"nodeType": "ExpressionStatement",
																		"src": "6916:20:4"
																	}
																]
															},
															"id": 712,
															"nodeType": "IfStatement",
															"src": "6586:365:4",
															"trueBody": {
																"id": 706,
																"nodeType": "Block",
																"src": "6613:279:4",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "6733:145:4",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "6755:40:4",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "6784:10:4"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "6778:5:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6778:17:4"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "6759:15:4",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "6827:2:4",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "6831:10:4"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6823:3:4"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6823:19:4"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "6844:15:4"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "6816:6:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6816:44:4"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "6816:44:4"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 690,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6784:10:4",
																				"valueSize": 1
																			},
																			{
																				"declaration": 690,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6831:10:4",
																				"valueSize": 1
																			}
																		],
																		"id": 705,
																		"nodeType": "InlineAssembly",
																		"src": "6724:154:4"
																	}
																]
															}
														}
													]
												},
												"id": 714,
												"nodeType": "IfStatement",
												"src": "6445:516:4",
												"trueBody": {
													"id": 700,
													"nodeType": "Block",
													"src": "6458:42:4",
													"statements": [
														{
															"expression": {
																"id": 698,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 690,
																"src": "6479:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 696,
															"id": 699,
															"nodeType": "Return",
															"src": "6472:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 686,
										"nodeType": "StructuredDocumentation",
										"src": "6061:209:4",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 716,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 693,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "6310:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 687,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6310:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "returndata",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "6332:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 689,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6332:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 692,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "6365:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 691,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6365:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6300:97:4"
									},
									"returnParameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "6421:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 694,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6421:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6420:14:4"
									},
									"scope": 717,
									"src": "6275:692:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 718,
							"src": "179:6790:4"
						}
					],
					"src": "86:6884:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							761
						],
						"Initializable": [
							170
						]
					},
					"id": 762,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 719,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 720,
							"nodeType": "ImportDirective",
							"scope": 762,
							"sourceUnit": 171,
							"src": "110:42:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 722,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 170,
										"src": "691:13:5"
									},
									"id": 723,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:5"
								}
							],
							"contractDependencies": [
								170
							],
							"contractKind": "contract",
							"documentation": {
								"id": 721,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 761,
							"linearizedBaseContracts": [
								761,
								170
							],
							"name": "ContextUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 731,
										"nodeType": "Block",
										"src": "758:43:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 728,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 738,
														"src": "768:24:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "768:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 730,
												"nodeType": "ExpressionStatement",
												"src": "768:26:5"
											}
										]
									},
									"id": 732,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 726,
											"modifierName": {
												"id": 725,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "746:11:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:11:5"
										}
									],
									"name": "__Context_init",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:5"
									},
									"returnParameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "758:0:5"
									},
									"scope": 761,
									"src": "711:90:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 737,
										"nodeType": "Block",
										"src": "864:7:5",
										"statements": []
									},
									"id": 738,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 735,
											"modifierName": {
												"id": 734,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "852:11:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "852:11:5"
										}
									],
									"name": "__Context_init_unchained",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "840:2:5"
									},
									"returnParameters": {
										"id": 736,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "864:0:5"
									},
									"scope": 761,
									"src": "807:64:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 746,
										"nodeType": "Block",
										"src": "938:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 743,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "955:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 744,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "955:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 742,
												"id": 745,
												"nodeType": "Return",
												"src": "948:17:5"
											}
										]
									},
									"id": 747,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 739,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "895:2:5"
									},
									"returnParameters": {
										"id": 742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 741,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 747,
												"src": "929:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 740,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "929:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "928:9:5"
									},
									"scope": 761,
									"src": "876:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 755,
										"nodeType": "Block",
										"src": "1045:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 752,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1062:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1062:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 751,
												"id": 754,
												"nodeType": "Return",
												"src": "1055:15:5"
											}
										]
									},
									"id": 756,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "995:2:5"
									},
									"returnParameters": {
										"id": 751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "1029:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 749,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1029:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1028:16:5"
									},
									"scope": 761,
									"src": "978:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 760,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"scope": 761,
									"src": "1082:25:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 757,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1082:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 759,
										"length": {
											"hexValue": "3530",
											"id": 758,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1090:2:5",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1082:11:5",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 762,
							"src": "651:459:5"
						}
					],
					"src": "86:1025:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol",
					"exportedSymbols": {
						"SafeMathUpgradeable": [
							1073
						]
					},
					"id": 1074,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 763,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "92:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 764,
								"nodeType": "StructuredDocumentation",
								"src": "270:196:6",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 1073,
							"linearizedBaseContracts": [
								1073
							],
							"name": "SafeMathUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 795,
										"nodeType": "Block",
										"src": "713:140:6",
										"statements": [
											{
												"id": 794,
												"nodeType": "UncheckedBlock",
												"src": "723:124:6",
												"statements": [
													{
														"assignments": [
															777
														],
														"declarations": [
															{
																"constant": false,
																"id": 777,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 794,
																"src": "747:9:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 776,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "747:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 781,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 780,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 778,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 767,
																"src": "759:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 779,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 769,
																"src": "763:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "759:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "747:17:6"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 784,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 782,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 777,
																"src": "782:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 783,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 767,
																"src": "786:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "782:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 789,
														"nodeType": "IfStatement",
														"src": "778:28:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 785,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "797:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 786,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "804:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 787,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "796:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 775,
															"id": 788,
															"nodeType": "Return",
															"src": "789:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 790,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "828:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 791,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 777,
																	"src": "834:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 792,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "827:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 775,
														"id": 793,
														"nodeType": "Return",
														"src": "820:16:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 765,
										"nodeType": "StructuredDocumentation",
										"src": "501:131:6",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 796,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "653:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 766,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "664:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 768,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "664:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "652:22:6"
									},
									"returnParameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "698:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 771,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "698:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "704:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "704:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "697:15:6"
									},
									"scope": 1073,
									"src": "637:216:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 823,
										"nodeType": "Block",
										"src": "1075:113:6",
										"statements": [
											{
												"id": 822,
												"nodeType": "UncheckedBlock",
												"src": "1085:97:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 808,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 801,
																"src": "1113:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 809,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 799,
																"src": "1117:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1113:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 815,
														"nodeType": "IfStatement",
														"src": "1109:28:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 811,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1128:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 812,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1135:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 813,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1127:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 807,
															"id": 814,
															"nodeType": "Return",
															"src": "1120:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 816,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1159:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 819,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 817,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 799,
																		"src": "1165:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 818,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 801,
																		"src": "1169:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1165:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 820,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1158:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 807,
														"id": 821,
														"nodeType": "Return",
														"src": "1151:20:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 797,
										"nodeType": "StructuredDocumentation",
										"src": "859:135:6",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 824,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 802,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "1015:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 798,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1015:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 801,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "1026:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 800,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1026:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1014:22:6"
									},
									"returnParameters": {
										"id": 807,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 804,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "1060:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 803,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1060:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "1066:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 805,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1066:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1059:15:6"
									},
									"scope": 1073,
									"src": "999:189:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 865,
										"nodeType": "Block",
										"src": "1412:417:6",
										"statements": [
											{
												"id": 864,
												"nodeType": "UncheckedBlock",
												"src": "1422:401:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 838,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 836,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 827,
																"src": "1680:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 837,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1685:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1680:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 843,
														"nodeType": "IfStatement",
														"src": "1676:28:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 839,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1696:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 840,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1702:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 841,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1695:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 835,
															"id": 842,
															"nodeType": "Return",
															"src": "1688:16:6"
														}
													},
													{
														"assignments": [
															845
														],
														"declarations": [
															{
																"constant": false,
																"id": 845,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 864,
																"src": "1718:9:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 844,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1718:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 849,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 848,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 846,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 827,
																"src": "1730:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 847,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 829,
																"src": "1734:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1730:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1718:17:6"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 854,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 852,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 850,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "1753:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 851,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 827,
																	"src": "1757:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1753:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 853,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 829,
																"src": "1762:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1753:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 859,
														"nodeType": "IfStatement",
														"src": "1749:33:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 855,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1773:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 856,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1780:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 857,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1772:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 835,
															"id": 858,
															"nodeType": "Return",
															"src": "1765:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 860,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1804:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 861,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "1810:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 862,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1803:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 835,
														"id": 863,
														"nodeType": "Return",
														"src": "1796:16:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 825,
										"nodeType": "StructuredDocumentation",
										"src": "1194:137:6",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 866,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "1352:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 826,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1352:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "1363:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 828,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1363:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1351:22:6"
									},
									"returnParameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "1397:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 831,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1397:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "1403:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 833,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1403:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1396:15:6"
									},
									"scope": 1073,
									"src": "1336:493:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 893,
										"nodeType": "Block",
										"src": "2054:114:6",
										"statements": [
											{
												"id": 892,
												"nodeType": "UncheckedBlock",
												"src": "2064:98:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 880,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 878,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 871,
																"src": "2092:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 879,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2097:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2092:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 885,
														"nodeType": "IfStatement",
														"src": "2088:29:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 881,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2108:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2115:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 883,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2107:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 877,
															"id": 884,
															"nodeType": "Return",
															"src": "2100:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 886,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2139:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 889,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 887,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 869,
																		"src": "2145:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 888,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 871,
																		"src": "2149:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2145:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 890,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2138:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 877,
														"id": 891,
														"nodeType": "Return",
														"src": "2131:20:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 867,
										"nodeType": "StructuredDocumentation",
										"src": "1835:138:6",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 894,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "1994:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 868,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "2005:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2005:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1993:22:6"
									},
									"returnParameters": {
										"id": 877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "2039:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 873,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2039:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 876,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "2045:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 875,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2045:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2038:15:6"
									},
									"scope": 1073,
									"src": "1978:190:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 921,
										"nodeType": "Block",
										"src": "2403:114:6",
										"statements": [
											{
												"id": 920,
												"nodeType": "UncheckedBlock",
												"src": "2413:98:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 906,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 899,
																"src": "2441:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 907,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2446:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2441:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 913,
														"nodeType": "IfStatement",
														"src": "2437:29:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 909,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2457:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 910,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2464:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 911,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2456:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 905,
															"id": 912,
															"nodeType": "Return",
															"src": "2449:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 914,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2488:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 917,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 915,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 897,
																		"src": "2494:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 916,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 899,
																		"src": "2498:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2494:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 918,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2487:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 905,
														"id": 919,
														"nodeType": "Return",
														"src": "2480:20:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 895,
										"nodeType": "StructuredDocumentation",
										"src": "2174:148:6",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 922,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2343:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 896,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2354:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2354:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2342:22:6"
									},
									"returnParameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2388:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 901,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2388:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2394:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 903,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2394:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2387:15:6"
									},
									"scope": 1073,
									"src": "2327:190:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 936,
										"nodeType": "Block",
										"src": "2819:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 932,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 925,
														"src": "2836:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 933,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 927,
														"src": "2840:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2836:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 931,
												"id": 935,
												"nodeType": "Return",
												"src": "2829:12:6"
											}
										]
									},
									"documentation": {
										"id": 923,
										"nodeType": "StructuredDocumentation",
										"src": "2523:224:6",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 937,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2765:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2765:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2776:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2776:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2764:22:6"
									},
									"returnParameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 930,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2810:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 929,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2810:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2809:9:6"
									},
									"scope": 1073,
									"src": "2752:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 951,
										"nodeType": "Block",
										"src": "3186:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 947,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 940,
														"src": "3203:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 948,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 942,
														"src": "3207:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3203:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 946,
												"id": 950,
												"nodeType": "Return",
												"src": "3196:12:6"
											}
										]
									},
									"documentation": {
										"id": 938,
										"nodeType": "StructuredDocumentation",
										"src": "2854:260:6",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 952,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "3132:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 939,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3132:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "3143:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3143:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3131:22:6"
									},
									"returnParameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "3177:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 944,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3177:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3176:9:6"
									},
									"scope": 1073,
									"src": "3119:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 966,
										"nodeType": "Block",
										"src": "3529:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 962,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 955,
														"src": "3546:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 963,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 957,
														"src": "3550:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3546:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 961,
												"id": 965,
												"nodeType": "Return",
												"src": "3539:12:6"
											}
										]
									},
									"documentation": {
										"id": 953,
										"nodeType": "StructuredDocumentation",
										"src": "3221:236:6",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 967,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "3475:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 954,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 957,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "3486:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 956,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3486:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3474:22:6"
									},
									"returnParameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "3520:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 959,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3520:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3519:9:6"
									},
									"scope": 1073,
									"src": "3462:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 981,
										"nodeType": "Block",
										"src": "3914:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 977,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 970,
														"src": "3931:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 978,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 972,
														"src": "3935:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3931:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 976,
												"id": 980,
												"nodeType": "Return",
												"src": "3924:12:6"
											}
										]
									},
									"documentation": {
										"id": 968,
										"nodeType": "StructuredDocumentation",
										"src": "3564:278:6",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 982,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 973,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 970,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "3860:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3860:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 972,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "3871:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 971,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3871:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3859:22:6"
									},
									"returnParameters": {
										"id": 976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 975,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "3905:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 974,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3905:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3904:9:6"
									},
									"scope": 1073,
									"src": "3847:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 996,
										"nodeType": "Block",
										"src": "4463:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 994,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 992,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 985,
														"src": "4480:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 993,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 987,
														"src": "4484:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4480:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 991,
												"id": 995,
												"nodeType": "Return",
												"src": "4473:12:6"
											}
										]
									},
									"documentation": {
										"id": 983,
										"nodeType": "StructuredDocumentation",
										"src": "3949:442:6",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 997,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 997,
												"src": "4409:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 984,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4409:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 997,
												"src": "4420:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 986,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4420:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4408:22:6"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 997,
												"src": "4454:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 989,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4454:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4453:9:6"
									},
									"scope": 1073,
									"src": "4396:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1021,
										"nodeType": "Block",
										"src": "5081:106:6",
										"statements": [
											{
												"id": 1020,
												"nodeType": "UncheckedBlock",
												"src": "5091:90:6",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1012,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1010,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1002,
																		"src": "5123:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 1011,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1000,
																		"src": "5128:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5123:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1013,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1004,
																	"src": "5131:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1009,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5115:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5115:29:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1015,
														"nodeType": "ExpressionStatement",
														"src": "5115:29:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1018,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1016,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1000,
																"src": "5165:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1017,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1002,
																"src": "5169:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5165:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1008,
														"id": 1019,
														"nodeType": "Return",
														"src": "5158:12:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 998,
										"nodeType": "StructuredDocumentation",
										"src": "4498:453:6",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1022,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "4978:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 999,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4978:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "4997:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1001,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4997:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1004,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "5016:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1003,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5016:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4968:80:6"
									},
									"returnParameters": {
										"id": 1008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "5072:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5072:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5071:9:6"
									},
									"scope": 1073,
									"src": "4956:231:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1046,
										"nodeType": "Block",
										"src": "5796:105:6",
										"statements": [
											{
												"id": 1045,
												"nodeType": "UncheckedBlock",
												"src": "5806:89:6",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1037,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1035,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1027,
																		"src": "5838:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1036,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5842:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5838:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1038,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1029,
																	"src": "5845:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1034,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5830:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5830:28:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1040,
														"nodeType": "ExpressionStatement",
														"src": "5830:28:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1043,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1041,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1025,
																"src": "5879:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1042,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1027,
																"src": "5883:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5879:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1033,
														"id": 1044,
														"nodeType": "Return",
														"src": "5872:12:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1023,
										"nodeType": "StructuredDocumentation",
										"src": "5193:473:6",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1047,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1025,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "5693:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1024,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5693:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "5712:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5712:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "5731:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1028,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5731:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5683:80:6"
									},
									"returnParameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1032,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "5787:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5786:9:6"
									},
									"scope": 1073,
									"src": "5671:230:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1071,
										"nodeType": "Block",
										"src": "6672:105:6",
										"statements": [
											{
												"id": 1070,
												"nodeType": "UncheckedBlock",
												"src": "6682:89:6",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1062,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1060,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1052,
																		"src": "6714:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1061,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6718:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6714:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1063,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1054,
																	"src": "6721:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1059,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6706:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1064,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6706:28:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1065,
														"nodeType": "ExpressionStatement",
														"src": "6706:28:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1068,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1066,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1050,
																"src": "6755:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 1067,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1052,
																"src": "6759:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6755:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1058,
														"id": 1069,
														"nodeType": "Return",
														"src": "6748:12:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1048,
										"nodeType": "StructuredDocumentation",
										"src": "5907:635:6",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1072,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "6569:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1049,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6569:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1052,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "6588:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1051,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6588:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1054,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "6607:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1053,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6607:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6559:80:6"
									},
									"returnParameters": {
										"id": 1058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "6663:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1056,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6663:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6662:9:6"
									},
									"scope": 1073,
									"src": "6547:230:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1074,
							"src": "467:6312:6"
						}
					],
					"src": "92:6688:6"
				},
				"id": 6
			},
			"contracts/IDO/SEAPreSale.sol": {
				"ast": {
					"absolutePath": "contracts/IDO/SEAPreSale.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							717
						],
						"ContextUpgradeable": [
							761
						],
						"IERC20Upgradeable": [
							248
						],
						"Initializable": [
							170
						],
						"OwnableUpgradeable": [
							125
						],
						"SEAPreSale": [
							1488
						],
						"SafeERC20Upgradeable": [
							472
						],
						"SafeMathUpgradeable": [
							1073
						]
					},
					"id": 1489,
					"license": "AGPL-3.0-or-later",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1075,
							"literals": [
								"solidity",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "46:22:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"id": 1076,
							"nodeType": "ImportDirective",
							"scope": 1489,
							"sourceUnit": 249,
							"src": "70:79:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
							"id": 1077,
							"nodeType": "ImportDirective",
							"scope": 1489,
							"sourceUnit": 473,
							"src": "150:88:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"id": 1078,
							"nodeType": "ImportDirective",
							"scope": 1489,
							"sourceUnit": 171,
							"src": "239:75:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 1079,
							"nodeType": "ImportDirective",
							"scope": 1489,
							"sourceUnit": 126,
							"src": "315:75:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol",
							"id": 1080,
							"nodeType": "ImportDirective",
							"scope": 1489,
							"sourceUnit": 1074,
							"src": "391:80:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1081,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 170,
										"src": "496:13:7"
									},
									"id": 1082,
									"nodeType": "InheritanceSpecifier",
									"src": "496:13:7"
								},
								{
									"baseName": {
										"id": 1083,
										"name": "OwnableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 125,
										"src": "511:18:7"
									},
									"id": 1084,
									"nodeType": "InheritanceSpecifier",
									"src": "511:18:7"
								}
							],
							"contractDependencies": [
								125,
								170,
								761
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1488,
							"linearizedBaseContracts": [
								1488,
								125,
								761,
								170
							],
							"name": "SEAPreSale",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1088,
									"libraryName": {
										"id": 1085,
										"name": "SafeERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 472,
										"src": "542:20:7"
									},
									"nodeType": "UsingForDirective",
									"src": "536:49:7",
									"typeName": {
										"id": 1087,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1086,
											"name": "IERC20Upgradeable",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 248,
											"src": "567:17:7"
										},
										"referencedDeclaration": 248,
										"src": "567:17:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
											"typeString": "contract IERC20Upgradeable"
										}
									}
								},
								{
									"id": 1091,
									"libraryName": {
										"id": 1089,
										"name": "SafeMathUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1073,
										"src": "596:19:7"
									},
									"nodeType": "UsingForDirective",
									"src": "590:38:7",
									"typeName": {
										"id": 1090,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "620:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "492cc4e3",
									"id": 1093,
									"mutability": "mutable",
									"name": "alphaSEA",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "634:23:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1092,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "634:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "d392eab1",
									"id": 1095,
									"mutability": "mutable",
									"name": "DAOAddress",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "663:25:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1094,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "663:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3e413bee",
									"id": 1097,
									"mutability": "mutable",
									"name": "usdc",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "694:19:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 1096,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "694:7:7",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9b2cb5d8",
									"id": 1099,
									"mutability": "mutable",
									"name": "minAmount",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "720:24:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1098,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "720:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "5f48f393",
									"id": 1101,
									"mutability": "mutable",
									"name": "maxAmount",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "750:24:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1100,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "750:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f51f96dd",
									"id": 1103,
									"mutability": "mutable",
									"name": "salePrice",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "780:24:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1102,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "780:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e6fd48bc",
									"id": 1105,
									"mutability": "mutable",
									"name": "startTimestamp",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "810:29:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1104,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "810:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a85adeab",
									"id": 1107,
									"mutability": "mutable",
									"name": "endTimestamp",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "845:27:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1106,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "845:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "9e623ae4",
									"id": 1109,
									"mutability": "mutable",
									"name": "toTalAmount",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "878:26:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1108,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "878:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "3f407b84",
									"id": 1111,
									"mutability": "mutable",
									"name": "sellAmount",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "910:25:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1110,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "910:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e58bf43a",
									"id": 1113,
									"mutability": "mutable",
									"name": "remainingPurchasesMaxAmt",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "941:39:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1112,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "941:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "5c474f9e",
									"id": 1115,
									"mutability": "mutable",
									"name": "saleStarted",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "987:23:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 1114,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "987:4:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "ef8cdaa4",
									"id": 1119,
									"mutability": "mutable",
									"name": "boughtSEA",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "1017:41:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 1118,
										"keyType": {
											"id": 1116,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1025:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1017:24:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 1117,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "1036:4:7",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "fa0fca84",
									"id": 1123,
									"mutability": "mutable",
									"name": "whiteListed",
									"nodeType": "VariableDeclaration",
									"scope": 1488,
									"src": "1064:43:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
										"typeString": "mapping(address => bool)"
									},
									"typeName": {
										"id": 1122,
										"keyType": {
											"id": 1120,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1072:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1064:24:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
											"typeString": "mapping(address => bool)"
										},
										"valueType": {
											"id": 1121,
											"name": "bool",
											"nodeType": "ElementaryTypeName",
											"src": "1083:4:7",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1155,
										"nodeType": "Block",
										"src": "1227:133:7",
										"statements": [
											{
												"body": {
													"id": 1151,
													"nodeType": "Block",
													"src": "1278:55:7",
													"statements": [
														{
															"expression": {
																"id": 1149,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1143,
																		"name": "whiteListed",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1123,
																		"src": "1292:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																			"typeString": "mapping(address => bool)"
																		}
																	},
																	"id": 1147,
																	"indexExpression": {
																		"baseExpression": {
																			"id": 1144,
																			"name": "_buyers",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1126,
																			"src": "1304:7:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																				"typeString": "address[] memory"
																			}
																		},
																		"id": 1146,
																		"indexExpression": {
																			"id": 1145,
																			"name": "i",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1134,
																			"src": "1312:1:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"isConstant": false,
																		"isLValue": true,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "IndexAccess",
																		"src": "1304:10:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "1292:23:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 1148,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1318:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1292:30:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1150,
															"nodeType": "ExpressionStatement",
															"src": "1292:30:7"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1139,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1136,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1134,
														"src": "1253:1:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1137,
															"name": "_buyers",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1126,
															"src": "1257:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
																"typeString": "address[] memory"
															}
														},
														"id": 1138,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1257:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1253:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1152,
												"initializationExpression": {
													"assignments": [
														1134
													],
													"declarations": [
														{
															"constant": false,
															"id": 1134,
															"mutability": "mutable",
															"name": "i",
															"nodeType": "VariableDeclaration",
															"scope": 1152,
															"src": "1242:9:7",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1133,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "1242:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1135,
													"nodeType": "VariableDeclarationStatement",
													"src": "1242:9:7"
												},
												"loopExpression": {
													"expression": {
														"id": 1141,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "1273:3:7",
														"subExpression": {
															"id": 1140,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1134,
															"src": "1273:1:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1142,
													"nodeType": "ExpressionStatement",
													"src": "1273:3:7"
												},
												"nodeType": "ForStatement",
												"src": "1237:96:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1153,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1349:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1132,
												"id": 1154,
												"nodeType": "Return",
												"src": "1342:11:7"
											}
										]
									},
									"functionSelector": "1eef7659",
									"id": 1156,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1129,
											"modifierName": {
												"id": 1128,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "1190:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "1190:9:7"
										}
									],
									"name": "whiteListBuyers",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1127,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1126,
												"mutability": "mutable",
												"name": "_buyers",
												"nodeType": "VariableDeclaration",
												"scope": 1156,
												"src": "1139:24:7",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 1124,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "1139:7:7",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 1125,
													"nodeType": "ArrayTypeName",
													"src": "1139:9:7",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1138:26:7"
									},
									"returnParameters": {
										"id": 1132,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1131,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1156,
												"src": "1217:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1130,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1217:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1216:6:7"
									},
									"scope": 1488,
									"src": "1114:246:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1228,
										"nodeType": "Block",
										"src": "1774:421:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1181,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "1784:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1182,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1784:16:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1183,
												"nodeType": "ExpressionStatement",
												"src": "1784:16:7"
											},
											{
												"expression": {
													"id": 1186,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1184,
														"name": "alphaSEA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "1810:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1185,
														"name": "_alphaSEA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1160,
														"src": "1821:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1810:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1187,
												"nodeType": "ExpressionStatement",
												"src": "1810:20:7"
											},
											{
												"expression": {
													"id": 1190,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1188,
														"name": "usdc",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1097,
														"src": "1840:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1189,
														"name": "_usdc",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1162,
														"src": "1847:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1840:12:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1191,
												"nodeType": "ExpressionStatement",
												"src": "1840:12:7"
											},
											{
												"expression": {
													"id": 1194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1192,
														"name": "salePrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1103,
														"src": "1862:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1193,
														"name": "_salePrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1170,
														"src": "1874:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1862:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1195,
												"nodeType": "ExpressionStatement",
												"src": "1862:22:7"
											},
											{
												"expression": {
													"id": 1198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1196,
														"name": "startTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1105,
														"src": "1894:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1197,
														"name": "_startTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1172,
														"src": "1911:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1894:32:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1199,
												"nodeType": "ExpressionStatement",
												"src": "1894:32:7"
											},
											{
												"expression": {
													"id": 1202,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1200,
														"name": "endTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1107,
														"src": "1936:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1201,
														"name": "_endTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1174,
														"src": "1951:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1936:28:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1203,
												"nodeType": "ExpressionStatement",
												"src": "1936:28:7"
											},
											{
												"expression": {
													"id": 1206,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1204,
														"name": "DAOAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1095,
														"src": "1974:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1205,
														"name": "_DAOAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1158,
														"src": "1987:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1974:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1207,
												"nodeType": "ExpressionStatement",
												"src": "1974:24:7"
											},
											{
												"expression": {
													"id": 1210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1208,
														"name": "minAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1099,
														"src": "2008:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1209,
														"name": "_minAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1164,
														"src": "2020:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2008:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1211,
												"nodeType": "ExpressionStatement",
												"src": "2008:22:7"
											},
											{
												"expression": {
													"id": 1214,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1212,
														"name": "maxAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1101,
														"src": "2040:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1213,
														"name": "_maxAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1166,
														"src": "2052:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2040:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1215,
												"nodeType": "ExpressionStatement",
												"src": "2040:22:7"
											},
											{
												"expression": {
													"id": 1218,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1216,
														"name": "toTalAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1109,
														"src": "2072:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1217,
														"name": "_toTalAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1168,
														"src": "2086:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2072:26:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1219,
												"nodeType": "ExpressionStatement",
												"src": "2072:26:7"
											},
											{
												"expression": {
													"id": 1222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1220,
														"name": "remainingPurchasesMaxAmt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1113,
														"src": "2108:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1221,
														"name": "_remainingPurchasesMaxAmt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1176,
														"src": "2135:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2108:52:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1223,
												"nodeType": "ExpressionStatement",
												"src": "2108:52:7"
											},
											{
												"expression": {
													"id": 1226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1224,
														"name": "saleStarted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1115,
														"src": "2170:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1225,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2184:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2170:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1227,
												"nodeType": "ExpressionStatement",
												"src": "2170:18:7"
											}
										]
									},
									"functionSelector": "d45fc1a9",
									"id": 1229,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1179,
											"modifierName": {
												"id": 1178,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "1762:11:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "1762:11:7"
										}
									],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1177,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1158,
												"mutability": "mutable",
												"name": "_DAOAddress",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "1395:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1395:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1160,
												"mutability": "mutable",
												"name": "_alphaSEA",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "1424:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1159,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1424:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1162,
												"mutability": "mutable",
												"name": "_usdc",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "1451:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1451:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1164,
												"mutability": "mutable",
												"name": "_minAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "1474:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1163,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1474:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1166,
												"mutability": "mutable",
												"name": "_maxAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "1506:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1165,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1506:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1168,
												"mutability": "mutable",
												"name": "_toTalAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "1561:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1167,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1561:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1170,
												"mutability": "mutable",
												"name": "_salePrice",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "1621:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1169,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1621:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1172,
												"mutability": "mutable",
												"name": "_startTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "1649:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1171,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1649:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1174,
												"mutability": "mutable",
												"name": "_endTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "1682:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1173,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1682:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1176,
												"mutability": "mutable",
												"name": "_remainingPurchasesMaxAmt",
												"nodeType": "VariableDeclaration",
												"scope": 1229,
												"src": "1713:33:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1713:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1385:367:7"
									},
									"returnParameters": {
										"id": 1180,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1774:0:7"
									},
									"scope": 1488,
									"src": "1366:829:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1302,
										"nodeType": "Block",
										"src": "2554:425:7",
										"statements": [
											{
												"expression": {
													"id": 1258,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1256,
														"name": "alphaSEA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "2564:8:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1257,
														"name": "_alphaSEA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1233,
														"src": "2575:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2564:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1259,
												"nodeType": "ExpressionStatement",
												"src": "2564:20:7"
											},
											{
												"expression": {
													"id": 1262,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1260,
														"name": "usdc",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1097,
														"src": "2595:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1261,
														"name": "_usdc",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1235,
														"src": "2602:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2595:12:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1263,
												"nodeType": "ExpressionStatement",
												"src": "2595:12:7"
											},
											{
												"expression": {
													"id": 1266,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1264,
														"name": "salePrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1103,
														"src": "2618:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1265,
														"name": "_salePrice",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1243,
														"src": "2630:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2618:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1267,
												"nodeType": "ExpressionStatement",
												"src": "2618:22:7"
											},
											{
												"expression": {
													"id": 1270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1268,
														"name": "startTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1105,
														"src": "2651:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1269,
														"name": "_startTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1245,
														"src": "2668:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2651:32:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1271,
												"nodeType": "ExpressionStatement",
												"src": "2651:32:7"
											},
											{
												"expression": {
													"id": 1274,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1272,
														"name": "endTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1107,
														"src": "2693:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1273,
														"name": "_endTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1247,
														"src": "2708:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2693:28:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1275,
												"nodeType": "ExpressionStatement",
												"src": "2693:28:7"
											},
											{
												"expression": {
													"id": 1278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1276,
														"name": "DAOAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1095,
														"src": "2732:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1277,
														"name": "_DAOAddress",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1231,
														"src": "2745:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2732:24:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1279,
												"nodeType": "ExpressionStatement",
												"src": "2732:24:7"
											},
											{
												"expression": {
													"id": 1282,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1280,
														"name": "minAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1099,
														"src": "2767:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1281,
														"name": "_minAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1237,
														"src": "2779:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2767:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1283,
												"nodeType": "ExpressionStatement",
												"src": "2767:22:7"
											},
											{
												"expression": {
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1284,
														"name": "maxAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1101,
														"src": "2800:9:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1285,
														"name": "_maxAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1239,
														"src": "2812:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2800:22:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1287,
												"nodeType": "ExpressionStatement",
												"src": "2800:22:7"
											},
											{
												"expression": {
													"id": 1290,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1288,
														"name": "toTalAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1109,
														"src": "2833:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1289,
														"name": "_toTalAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1241,
														"src": "2847:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2833:26:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1291,
												"nodeType": "ExpressionStatement",
												"src": "2833:26:7"
											},
											{
												"expression": {
													"id": 1294,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1292,
														"name": "remainingPurchasesMaxAmt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1113,
														"src": "2870:24:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1293,
														"name": "_remainingPurchasesMaxAmt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1249,
														"src": "2897:25:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2870:52:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1295,
												"nodeType": "ExpressionStatement",
												"src": "2870:52:7"
											},
											{
												"expression": {
													"id": 1298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1296,
														"name": "saleStarted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1115,
														"src": "2933:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1297,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2947:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "2933:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1299,
												"nodeType": "ExpressionStatement",
												"src": "2933:18:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1300,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "2968:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1255,
												"id": 1301,
												"nodeType": "Return",
												"src": "2961:11:7"
											}
										]
									},
									"functionSelector": "e3bef142",
									"id": 1303,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1252,
											"modifierName": {
												"id": 1251,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "2529:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2529:9:7"
										}
									],
									"name": "SET",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1250,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1231,
												"mutability": "mutable",
												"name": "_DAOAddress",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "2223:19:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1230,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2223:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1233,
												"mutability": "mutable",
												"name": "_alphaSEA",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "2252:17:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1232,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2252:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1235,
												"mutability": "mutable",
												"name": "_usdc",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "2279:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1234,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2279:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1237,
												"mutability": "mutable",
												"name": "_minAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "2302:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1236,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2302:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1239,
												"mutability": "mutable",
												"name": "_maxAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "2330:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1238,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2330:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "_toTalAmount",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "2358:20:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1240,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2358:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "_salePrice",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "2388:18:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2388:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1245,
												"mutability": "mutable",
												"name": "_startTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "2416:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2416:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1247,
												"mutability": "mutable",
												"name": "_endTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "2449:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1246,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2449:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1249,
												"mutability": "mutable",
												"name": "_remainingPurchasesMaxAmt",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "2480:33:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1248,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2480:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2213:306:7"
									},
									"returnParameters": {
										"id": 1255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1254,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1303,
												"src": "2548:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1253,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2548:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2547:6:7"
									},
									"scope": 1488,
									"src": "2201:778:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1317,
										"nodeType": "Block",
										"src": "3039:71:7",
										"statements": [
											{
												"expression": {
													"id": 1313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1310,
														"name": "saleStarted",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1115,
														"src": "3049:11:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1312,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "3063:12:7",
														"subExpression": {
															"id": 1311,
															"name": "saleStarted",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1115,
															"src": "3064:11:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3049:26:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1314,
												"nodeType": "ExpressionStatement",
												"src": "3049:26:7"
											},
											{
												"expression": {
													"id": 1315,
													"name": "saleStarted",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1115,
													"src": "3092:11:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1309,
												"id": 1316,
												"nodeType": "Return",
												"src": "3085:18:7"
											}
										]
									},
									"functionSelector": "35975a37",
									"id": 1318,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1306,
											"modifierName": {
												"id": 1305,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "3014:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "3014:9:7"
										}
									],
									"name": "setStart",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1304,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3002:2:7"
									},
									"returnParameters": {
										"id": 1309,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1308,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1318,
												"src": "3033:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1307,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3033:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3032:6:7"
									},
									"scope": 1488,
									"src": "2985:125:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1455,
										"nodeType": "Block",
										"src": "3176:1176:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1328,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1326,
																"name": "_val",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1320,
																"src": "3194:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1327,
																"name": "minAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1099,
																"src": "3202:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3194:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "42656c6f77206d696e696d756d20616c6c6f636174696f6e",
															"id": 1329,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3213:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c1a0527b69d92f3769756868f9e0e04a4bdadb149ddfac50ec5680e2006dd867",
																"typeString": "literal_string \"Below minimum allocation\""
															},
															"value": "Below minimum allocation"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c1a0527b69d92f3769756868f9e0e04a4bdadb149ddfac50ec5680e2006dd867",
																"typeString": "literal_string \"Below minimum allocation\""
															}
														],
														"id": 1325,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3186:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1330,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3186:54:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1331,
												"nodeType": "ExpressionStatement",
												"src": "3186:54:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1335,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1333,
																"name": "_val",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1320,
																"src": "3258:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1334,
																"name": "maxAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1101,
																"src": "3266:9:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3258:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4d6f7265207468616e20616c6c6f636174696f6e",
															"id": 1336,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3277:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ce879fc736948aee7d11788c1dd31a7740846135320e036fae250d429fab6906",
																"typeString": "literal_string \"More than allocation\""
															},
															"value": "More than allocation"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ce879fc736948aee7d11788c1dd31a7740846135320e036fae250d429fab6906",
																"typeString": "literal_string \"More than allocation\""
															}
														],
														"id": 1332,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3250:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1337,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3250:50:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1338,
												"nodeType": "ExpressionStatement",
												"src": "3250:50:7"
											},
											{
												"expression": {
													"id": 1344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1339,
														"name": "sellAmount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1111,
														"src": "3310:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1342,
																"name": "_val",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1320,
																"src": "3338:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"id": 1340,
																"name": "sellAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1111,
																"src": "3323:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1341,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 937,
															"src": "3323:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1343,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3323:20:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3310:33:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1345,
												"nodeType": "ExpressionStatement",
												"src": "3310:33:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1349,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1347,
																"name": "sellAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1111,
																"src": "3374:10:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1348,
																"name": "toTalAmount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1109,
																"src": "3388:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3374:25:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "54686520616d6f756e7420656e746572656420657863656564732046756e64726169736520476f616c",
															"id": 1350,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3413:43:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7322b66b13c822301c69736fce0e723c89dc652154df0aadcb2f45ec4a798cec",
																"typeString": "literal_string \"The amount entered exceeds Fundraise Goal\""
															},
															"value": "The amount entered exceeds Fundraise Goal"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7322b66b13c822301c69736fce0e723c89dc652154df0aadcb2f45ec4a798cec",
																"typeString": "literal_string \"The amount entered exceeds Fundraise Goal\""
															}
														],
														"id": 1346,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3353:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3353:113:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1352,
												"nodeType": "ExpressionStatement",
												"src": "3353:113:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1356,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1354,
																"name": "saleStarted",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1115,
																"src": "3484:11:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "74727565",
																"id": 1355,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3499:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "true"
															},
															"src": "3484:19:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f742073746172746564",
															"id": 1357,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3505:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8",
																"typeString": "literal_string \"Not started\""
															},
															"value": "Not started"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_1e3943da9f5735148442b7bd25a05b1731ce2a761ed40ab11abc0abdd8820fa8",
																"typeString": "literal_string \"Not started\""
															}
														],
														"id": 1353,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3476:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1358,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3476:43:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1359,
												"nodeType": "ExpressionStatement",
												"src": "3476:43:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 1366,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"baseExpression": {
																	"id": 1361,
																	"name": "boughtSEA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1119,
																	"src": "3537:9:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																		"typeString": "mapping(address => bool)"
																	}
																},
																"id": 1364,
																"indexExpression": {
																	"expression": {
																		"id": 1362,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "3547:3:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1363,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "3547:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "3537:21:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "66616c7365",
																"id": 1365,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "bool",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3562:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"value": "false"
															},
															"src": "3537:30:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416c726561647920706172746963697061746564",
															"id": 1367,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3569:22:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_56d2dfa42e94b97ce4f8bcd78ec72cfde368892527b2f6491331b727bd44b34c",
																"typeString": "literal_string \"Already participated\""
															},
															"value": "Already participated"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_56d2dfa42e94b97ce4f8bcd78ec72cfde368892527b2f6491331b727bd44b34c",
																"typeString": "literal_string \"Already participated\""
															}
														],
														"id": 1360,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3529:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1368,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3529:63:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1369,
												"nodeType": "ExpressionStatement",
												"src": "3529:63:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1374,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1371,
																"name": "startTimestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1105,
																"src": "3610:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 1372,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "3627:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1373,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "3627:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3610:32:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f74207374617274656420796574",
															"id": 1375,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3644:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d50d58d9845759fa0f4f88546440afafe96f6ae942a43a12bfaee08bbfd20ab5",
																"typeString": "literal_string \"Not started yet\""
															},
															"value": "Not started yet"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d50d58d9845759fa0f4f88546440afafe96f6ae942a43a12bfaee08bbfd20ab5",
																"typeString": "literal_string \"Not started yet\""
															}
														],
														"id": 1370,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3602:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1376,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3602:60:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1377,
												"nodeType": "ExpressionStatement",
												"src": "3602:60:7"
											},
											{
												"expression": {
													"id": 1383,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1378,
															"name": "boughtSEA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1119,
															"src": "3673:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1381,
														"indexExpression": {
															"expression": {
																"id": 1379,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "3683:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1380,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "3683:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "3673:21:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 1382,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3697:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "3673:28:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1384,
												"nodeType": "ExpressionStatement",
												"src": "3673:28:7"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1385,
														"name": "endTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1107,
														"src": "3716:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"id": 1386,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "3731:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 1387,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "3731:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3716:30:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1415,
													"nodeType": "Block",
													"src": "3842:150:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 1403,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"id": 1398,
																				"name": "whiteListed",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1123,
																				"src": "3864:11:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																					"typeString": "mapping(address => bool)"
																				}
																			},
																			"id": 1401,
																			"indexExpression": {
																				"expression": {
																					"id": 1399,
																					"name": "msg",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 4294967281,
																					"src": "3876:3:7",
																					"typeDescriptions": {
																						"typeIdentifier": "t_magic_message",
																						"typeString": "msg"
																					}
																				},
																				"id": 1400,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "sender",
																				"nodeType": "MemberAccess",
																				"src": "3876:10:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "3864:23:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "74727565",
																			"id": 1402,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "bool",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3891:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"value": "true"
																		},
																		"src": "3864:31:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "4e6f742077686974656c6973746564",
																		"id": 1404,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3897:17:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_72830cd2e69a452b3989df2d6c124f1de4827fe8ed6c5116814e4b49c3fcbdd0",
																			"typeString": "literal_string \"Not whitelisted\""
																		},
																		"value": "Not whitelisted"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_72830cd2e69a452b3989df2d6c124f1de4827fe8ed6c5116814e4b49c3fcbdd0",
																			"typeString": "literal_string \"Not whitelisted\""
																		}
																	],
																	"id": 1397,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3856:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1405,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3856:59:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1406,
															"nodeType": "ExpressionStatement",
															"src": "3856:59:7"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1411,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 1408,
																				"name": "block",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967292,
																				"src": "3937:5:7",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_block",
																					"typeString": "block"
																				}
																			},
																			"id": 1409,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "timestamp",
																			"nodeType": "MemberAccess",
																			"src": "3937:15:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<",
																		"rightExpression": {
																			"id": 1410,
																			"name": "endTimestamp",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1107,
																			"src": "3955:12:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3937:30:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "53616c65206f766572",
																		"id": 1412,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3969:11:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_603d2f0f89382de599654e09a8a30363709a2abc5a7d803f8af949136a973c6c",
																			"typeString": "literal_string \"Sale over\""
																		},
																		"value": "Sale over"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_603d2f0f89382de599654e09a8a30363709a2abc5a7d803f8af949136a973c6c",
																			"typeString": "literal_string \"Sale over\""
																		}
																	],
																	"id": 1407,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3929:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1413,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3929:52:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1414,
															"nodeType": "ExpressionStatement",
															"src": "3929:52:7"
														}
													]
												},
												"id": 1416,
												"nodeType": "IfStatement",
												"src": "3712:280:7",
												"trueBody": {
													"id": 1396,
													"nodeType": "Block",
													"src": "3748:88:7",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1392,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1390,
																			"name": "_val",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1320,
																			"src": "3770:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "<=",
																		"rightExpression": {
																			"id": 1391,
																			"name": "remainingPurchasesMaxAmt",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1113,
																			"src": "3778:24:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "3770:32:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45786365656465642049444f206c696d6974",
																		"id": 1393,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3804:20:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_a62f0c3750bdf64b55014a8446c4a1742deba625e4238690a01562f44c5b0116",
																			"typeString": "literal_string \"Exceeded IDO limit\""
																		},
																		"value": "Exceeded IDO limit"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_a62f0c3750bdf64b55014a8446c4a1742deba625e4238690a01562f44c5b0116",
																			"typeString": "literal_string \"Exceeded IDO limit\""
																		}
																	],
																	"id": 1389,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3762:7:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 1394,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3762:63:7",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1395,
															"nodeType": "ExpressionStatement",
															"src": "3762:63:7"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1421,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4055:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1422,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4055:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1425,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "4087:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SEAPreSale_$1488",
																		"typeString": "contract SEAPreSale"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SEAPreSale_$1488",
																		"typeString": "contract SEAPreSale"
																	}
																],
																"id": 1424,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "4079:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1423,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "4079:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1426,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4079:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1427,
															"name": "_val",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1320,
															"src": "4106:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1418,
																	"name": "usdc",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1097,
																	"src": "4019:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1417,
																"name": "IERC20Upgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 248,
																"src": "4001:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$248_$",
																	"typeString": "type(contract IERC20Upgradeable)"
																}
															},
															"id": 1419,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4001:23:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 1420,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 305,
														"src": "4001:40:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_address_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$248_$",
															"typeString": "function (contract IERC20Upgradeable,address,address,uint256)"
														}
													},
													"id": 1428,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4001:119:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1429,
												"nodeType": "ExpressionStatement",
												"src": "4001:119:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1434,
															"name": "DAOAddress",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1095,
															"src": "4167:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1435,
															"name": "_val",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1320,
															"src": "4179:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1431,
																	"name": "usdc",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1097,
																	"src": "4148:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1430,
																"name": "IERC20Upgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 248,
																"src": "4130:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$248_$",
																	"typeString": "type(contract IERC20Upgradeable)"
																}
															},
															"id": 1432,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4130:23:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 1433,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 279,
														"src": "4130:36:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$248_$",
															"typeString": "function (contract IERC20Upgradeable,address,uint256)"
														}
													},
													"id": 1436,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4130:54:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1437,
												"nodeType": "ExpressionStatement",
												"src": "4130:54:7"
											},
											{
												"assignments": [
													1439
												],
												"declarations": [
													{
														"constant": false,
														"id": 1439,
														"mutability": "mutable",
														"name": "_purchaseAmount",
														"nodeType": "VariableDeclaration",
														"scope": 1455,
														"src": "4194:23:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1438,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4194:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1443,
												"initialValue": {
													"arguments": [
														{
															"id": 1441,
															"name": "_val",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1320,
															"src": "4240:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1440,
														"name": "_calculateSaleQuote",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1475,
														"src": "4220:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1442,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4220:25:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4194:51:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1448,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4296:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1449,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4296:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1450,
															"name": "_purchaseAmount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1439,
															"src": "4308:15:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1445,
																	"name": "alphaSEA",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1093,
																	"src": "4273:8:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 1444,
																"name": "IERC20Upgradeable",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 248,
																"src": "4255:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$248_$",
																	"typeString": "type(contract IERC20Upgradeable)"
																}
															},
															"id": 1446,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4255:27:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 1447,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 279,
														"src": "4255:40:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_address_$_t_uint256_$returns$__$bound_to$_t_contract$_IERC20Upgradeable_$248_$",
															"typeString": "function (contract IERC20Upgradeable,address,uint256)"
														}
													},
													"id": 1451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4255:69:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1452,
												"nodeType": "ExpressionStatement",
												"src": "4255:69:7"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 1453,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4341:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 1324,
												"id": 1454,
												"nodeType": "Return",
												"src": "4334:11:7"
											}
										]
									},
									"functionSelector": "b2292994",
									"id": 1456,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "purchaseaSEA",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1321,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1320,
												"mutability": "mutable",
												"name": "_val",
												"nodeType": "VariableDeclaration",
												"scope": 1456,
												"src": "3138:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1319,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3138:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3137:14:7"
									},
									"returnParameters": {
										"id": 1324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1323,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1456,
												"src": "3170:4:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1322,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3170:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3169:6:7"
									},
									"scope": 1488,
									"src": "3116:1236:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1474,
										"nodeType": "Block",
										"src": "4471:93:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1471,
															"name": "salePrice",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1103,
															"src": "4526:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 1468,
																	"name": "paymentAmount_",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1458,
																	"src": "4506:14:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"arguments": [
																		{
																			"hexValue": "31653138",
																			"id": 1465,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "4496:4:7",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1000000000000000000_by_1",
																				"typeString": "int_const 1000000000000000000"
																			},
																			"value": "1e18"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_1000000000000000000_by_1",
																				"typeString": "int_const 1000000000000000000"
																			}
																		],
																		"id": 1464,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4488:7:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint256_$",
																			"typeString": "type(uint256)"
																		},
																		"typeName": {
																			"id": 1463,
																			"name": "uint256",
																			"nodeType": "ElementaryTypeName",
																			"src": "4488:7:7",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1466,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4488:13:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"id": 1467,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "mul",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 967,
																"src": "4488:17:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 1469,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4488:33:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 1470,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "div",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 982,
														"src": "4488:37:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
															"typeString": "function (uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 1472,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4488:48:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1462,
												"id": 1473,
												"nodeType": "Return",
												"src": "4481:55:7"
											}
										]
									},
									"id": 1475,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_calculateSaleQuote",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1458,
												"mutability": "mutable",
												"name": "paymentAmount_",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "4387:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4387:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4386:24:7"
									},
									"returnParameters": {
										"id": 1462,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1461,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1475,
												"src": "4458:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1460,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4458:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4457:9:7"
									},
									"scope": 1488,
									"src": "4358:206:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1486,
										"nodeType": "Block",
										"src": "4682:59:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1483,
															"name": "paymentAmount_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1477,
															"src": "4719:14:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1482,
														"name": "_calculateSaleQuote",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1475,
														"src": "4699:19:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256) view returns (uint256)"
														}
													},
													"id": 1484,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4699:35:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 1481,
												"id": 1485,
												"nodeType": "Return",
												"src": "4692:42:7"
											}
										]
									},
									"functionSelector": "2092c12b",
									"id": 1487,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "calculateSaleQuote",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1478,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1477,
												"mutability": "mutable",
												"name": "paymentAmount_",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "4598:22:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1476,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4598:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4597:24:7"
									},
									"returnParameters": {
										"id": 1481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1480,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1487,
												"src": "4669:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4669:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4668:9:7"
									},
									"scope": 1488,
									"src": "4570:171:7",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1489,
							"src": "473:4270:7"
						}
					],
					"src": "46:4698:7"
				},
				"id": 7
			}
		}
	}
}