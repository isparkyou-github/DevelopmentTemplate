{
	"id": "a7d197e19cfa886913663b9f2b1d801f",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.0",
	"solcLongVersion": "0.8.0+commit.c7dfd78e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/IDO/AlphaSEAMigration.sol": {
				"content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.0;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\";\n\ncontract aSEAMigration is Initializable, OwnableUpgradeable {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n    using SafeMathUpgradeable for uint256;\n\n    uint256 public endTimestamp;\n    uint256 public startTimestamp;\n\n    uint256 public maxAmt;\n\n    IERC20Upgradeable public SEA;\n    IERC20Upgradeable public aSEA;\n\n    bool public isInitialized;\n\n    mapping(address => uint256) public senderInfo;\n\n    modifier onlyInitialized() {\n        require(isInitialized, \"not initialized\");\n        _;\n    }\n\n    modifier notInitialized() {\n        require(!isInitialized, \"already initialized\");\n        _;\n    }\n\n    function initialize(\n        address _SEA,\n        address _aSEA,\n        uint256 _startTimestamp,\n        uint256 _endTimestamp\n    ) external initializer {\n        __Ownable_init();\n        SEA = IERC20Upgradeable(_SEA);\n        aSEA = IERC20Upgradeable(_aSEA);\n        startTimestamp = _startTimestamp;\n        endTimestamp = _endTimestamp;\n        isInitialized = false;\n        maxAmt = 120 * 1e18;\n    }\n\n    function open(bool _bool) external onlyOwner {\n        isInitialized = _bool;\n    }\n\n    function migrate() external onlyInitialized {\n        uint256 amount = aSEA.balanceOf(msg.sender);\n        require(amount <= maxAmt, \"Exceed the specified amount\");\n        require(startTimestamp < block.timestamp, \"Not started yet\");\n        require(block.timestamp < endTimestamp, \"swapping of aSEA has ended\");\n\n        aSEA.transferFrom(msg.sender, address(this), amount);\n        senderInfo[msg.sender] = senderInfo[msg.sender].add(amount);\n        SEA.transfer(msg.sender, amount);\n    }\n\n    // function reclaim() external {\n    //     require(senderInfo[msg.sender] > 0, \"user has no aSEA to withdraw\");\n    //     require(block.timestamp > endTimestamp, \"aSEA swap is still ongoing\");\n\n    //     uint256 amount = senderInfo[msg.sender];\n    //     senderInfo[msg.sender] = 0;\n    //     aSEA.transfer(msg.sender, amount);\n    // }\n\n    function withdraw() external onlyOwner {\n        require(\n            block.timestamp > endTimestamp,\n            \"swapping of aSEA has not ended\"\n        );\n        uint256 amount = SEA.balanceOf(address(this));\n\n        SEA.transfer(msg.sender, amount);\n    }\n\n    function setEndTimestamp(uint256 val) external onlyOwner {\n        endTimestamp = val;\n    }\n\n    function setStartTimestamp(uint256 val) external onlyOwner {\n        startTimestamp = val;\n    }\n\n    function setMaxAmt(uint256 val) external onlyOwner {\n        maxAmt = val;\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMathUpgradeable {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal initializer {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal initializer {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\nimport \"../../../utils/AddressUpgradeable.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20Upgradeable {\n    using AddressUpgradeable for address;\n\n    function safeTransfer(\n        IERC20Upgradeable token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20Upgradeable token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20Upgradeable token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal initializer {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal initializer {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://272fdc13ea6d62470f1009a1adf0d28b67be2c75415e9f24eee38164dd69fb04\",\"dweb:/ipfs/QmfZDcxQEFdAi1AwMTHozZJrwFoUCEZnbcJcRhqmahuTBR\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x5f13da6a5f023d6e9b3e48a3690458bfceea5872c0e3ddf1b2b528133f87a992\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f10cded435297e67d3720adb22790ee7f8ab7f5d977a815e87f33560800819c\",\"dweb:/ipfs/QmeMx1jpSb66jrT1P184kTuh8p9FSqbYUXoVbXNdnJPqkf\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2125524ea896700181f25ee543d35a980b9477eaf13fd1878ae24be5dcc3ba75\",\"dweb:/ipfs/QmXw9DTW1t1UiTZanfESSJ6jm2xVSQpsdsdKnBTYeBnwqh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 760,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 124,
								"contract": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x5f13da6a5f023d6e9b3e48a3690458bfceea5872c0e3ddf1b2b528133f87a992\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f10cded435297e67d3720adb22790ee7f8ab7f5d977a815e87f33560800819c\",\"dweb:/ipfs/QmeMx1jpSb66jrT1P184kTuh8p9FSqbYUXoVbXNdnJPqkf\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "recipient",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `recipient`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `sender` to `recipient` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ff7fe6e13cf851da3cdc27c7c4c58249ca6a53765f1bb40a5b8ec87b1b84599\",\"dweb:/ipfs/QmZ7JzzhpEMBgk7p9TVzwXDduvJJQtZhQwF3R1vZ9EdgMP\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"SafeERC20Upgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":667:4025  library SafeERC20Upgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":667:4025  library SafeERC20Upgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212202f2aa2e70f4032ea7ece6bc3109703f1ffd6dbfe4036e1b35c6d58456afd9ec564736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202f2aa2e70f4032ea7ece6bc3109703f1ffd6dbfe4036e1b35c6d58456afd9ec564736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F 0x2A LOG2 0xE7 0xF BLOCKHASH ORIGIN 0xEA PUSH31 0xCE6BC3109703F1FFD6DBFE4036E1B35C6D58456AFD9EC564736F6C63430008 STOP STOP CALLER ",
							"sourceMap": "667:3358:3:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;667:3358:3;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202f2aa2e70f4032ea7ece6bc3109703f1ffd6dbfe4036e1b35c6d58456afd9ec564736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x2F 0x2A LOG2 0xE7 0xF BLOCKHASH ORIGIN 0xEA PUSH31 0xCE6BC3109703F1FFD6DBFE4036E1B35C6D58456AFD9EC564736F6C63430008 STOP STOP CALLER ",
							"sourceMap": "667:3358:3:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20Upgradeable,bytes memory)": "infinite",
								"safeApprove(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeTransfer(contract IERC20Upgradeable,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20Upgradeable,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "B"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "BYTE",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "EQ",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "4"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "24"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "ADDRESS",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "PUSH",
									"source": 3,
									"value": "73"
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "MSTORE8",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 667,
									"end": 4025,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212202f2aa2e70f4032ea7ece6bc3109703f1ffd6dbfe4036e1b35c6d58456afd9ec564736f6c63430008000033",
									".code": [
										{
											"begin": 667,
											"end": 4025,
											"name": "PUSHDEPLOYADDRESS",
											"source": 3
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "ADDRESS",
											"source": 3
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 667,
											"end": 4025,
											"name": "REVERT",
											"source": 3
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":\"SafeERC20Upgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ff7fe6e13cf851da3cdc27c7c4c58249ca6a53765f1bb40a5b8ec87b1b84599\",\"dweb:/ipfs/QmZ7JzzhpEMBgk7p9TVzwXDduvJJQtZhQwF3R1vZ9EdgMP\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"keccak256\":\"0x7090f66700fbb4955abf72ba8e06e4a1eafb5bae1423032102dcbb2172da5543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb3c830201b945b96b0f7db921aeed52a7a40382ddab6466b5a97ecdd5a1571a\",\"dweb:/ipfs/QmcMWcz6DveTkqXE3EWwf3A9xPXhdUUZTXgKoSvzFyeYe9\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e51755c6934703b61e7edb7d3edef985f429be6bef384b15e1b616ea65176934\",\"dweb:/ipfs/QmQVb4hBJcTMthp5hJquUy5tPsDwgiKQ8nGExckR75G88u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":179:6969  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":179:6969  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220365e5f40c94fc0135977103e57c2c3ff43fd9677a246f2877f83ee01753f390a64736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220365e5f40c94fc0135977103e57c2c3ff43fd9677a246f2877f83ee01753f390a64736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0x5E 0x5F BLOCKHASH 0xC9 0x4F 0xC0 SGT MSIZE PUSH24 0x103E57C2C3FF43FD9677A246F2877F83EE01753F390A6473 PUSH16 0x6C634300080000330000000000000000 ",
							"sourceMap": "179:6790:4:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;179:6790:4;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220365e5f40c94fc0135977103e57c2c3ff43fd9677a246f2877f83ee01753f390a64736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLDATASIZE 0x5E 0x5F BLOCKHASH 0xC9 0x4F 0xC0 SGT MSIZE PUSH24 0x103E57C2C3FF43FD9677A246F2877F83EE01753F390A6473 PUSH16 0x6C634300080000330000000000000000 ",
							"sourceMap": "179:6790:4:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH #[$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH [$]",
									"source": 4,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "B"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "CODECOPY",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP1",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "MLOAD",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "BYTE",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "EQ",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH [tag]",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "JUMPI",
									"source": 4
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "4"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "24"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "REVERT",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "tag",
									"source": 4,
									"value": "1"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "JUMPDEST",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "ADDRESS",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "0"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "MSTORE",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "PUSH",
									"source": 4,
									"value": "73"
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "MSTORE8",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP3",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "DUP2",
									"source": 4
								},
								{
									"begin": 179,
									"end": 6969,
									"name": "RETURN",
									"source": 4
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220365e5f40c94fc0135977103e57c2c3ff43fd9677a246f2877f83ee01753f390a64736f6c63430008000033",
									".code": [
										{
											"begin": 179,
											"end": 6969,
											"name": "PUSHDEPLOYADDRESS",
											"source": 4
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "ADDRESS",
											"source": 4
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "EQ",
											"source": 4
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "PUSH",
											"source": 4,
											"value": "80"
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "PUSH",
											"source": 4,
											"value": "40"
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "MSTORE",
											"source": 4
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "PUSH",
											"source": 4,
											"value": "0"
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "DUP1",
											"source": 4
										},
										{
											"begin": 179,
											"end": 6969,
											"name": "REVERT",
											"source": 4
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e51755c6934703b61e7edb7d3edef985f429be6bef384b15e1b616ea65176934\",\"dweb:/ipfs/QmQVb4hBJcTMthp5hJquUy5tPsDwgiKQ8nGExckR75G88u\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x5f13da6a5f023d6e9b3e48a3690458bfceea5872c0e3ddf1b2b528133f87a992\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f10cded435297e67d3720adb22790ee7f8ab7f5d977a815e87f33560800819c\",\"dweb:/ipfs/QmeMx1jpSb66jrT1P184kTuh8p9FSqbYUXoVbXNdnJPqkf\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2125524ea896700181f25ee543d35a980b9477eaf13fd1878ae24be5dcc3ba75\",\"dweb:/ipfs/QmXw9DTW1t1UiTZanfESSJ6jm2xVSQpsdsdKnBTYeBnwqh\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 133,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 760,
								"contract": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
				"SafeMathUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":467:6779  library SafeMathUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":467:6779  library SafeMathUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220ab1364f0ccafff0970bba1dd59bc3afe606ccc747e9960feaad4caf7d294459964736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab1364f0ccafff0970bba1dd59bc3afe606ccc747e9960feaad4caf7d294459964736f6c63430008000033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB SGT PUSH5 0xF0CCAFFF09 PUSH17 0xBBA1DD59BC3AFE606CCC747E9960FEAAD4 0xCA 0xF7 0xD2 SWAP5 GASLIMIT SWAP10 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "467:6312:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;467:6312:6;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220ab1364f0ccafff0970bba1dd59bc3afe606ccc747e9960feaad4caf7d294459964736f6c63430008000033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB SGT PUSH5 0xF0CCAFFF09 PUSH17 0xBBA1DD59BC3AFE606CCC747E9960FEAAD4 0xCA 0xF7 0xD2 SWAP5 GASLIMIT SWAP10 PUSH5 0x736F6C6343 STOP ADDMOD STOP STOP CALLER ",
							"sourceMap": "467:6312:6:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"add(uint256,uint256)": "infinite",
								"div(uint256,uint256)": "infinite",
								"div(uint256,uint256,string memory)": "infinite",
								"mod(uint256,uint256)": "infinite",
								"mod(uint256,uint256,string memory)": "infinite",
								"mul(uint256,uint256)": "infinite",
								"sub(uint256,uint256)": "infinite",
								"sub(uint256,uint256,string memory)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH #[$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH [$]",
									"source": 6,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "B"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "CODECOPY",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP1",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "MLOAD",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "BYTE",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "EQ",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH [tag]",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "JUMPI",
									"source": 6
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "4"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "24"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "REVERT",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "tag",
									"source": 6,
									"value": "1"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "JUMPDEST",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "ADDRESS",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "0"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "MSTORE",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "PUSH",
									"source": 6,
									"value": "73"
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "MSTORE8",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP3",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "DUP2",
									"source": 6
								},
								{
									"begin": 467,
									"end": 6779,
									"name": "RETURN",
									"source": 6
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220ab1364f0ccafff0970bba1dd59bc3afe606ccc747e9960feaad4caf7d294459964736f6c63430008000033",
									".code": [
										{
											"begin": 467,
											"end": 6779,
											"name": "PUSHDEPLOYADDRESS",
											"source": 6
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "ADDRESS",
											"source": 6
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "PUSH",
											"source": 6,
											"value": "80"
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 467,
											"end": 6779,
											"name": "REVERT",
											"source": 6
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers over Solidity's arithmetic operations. NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler now has built in overflow checking.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":\"SafeMathUpgradeable\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"keccak256\":\"0x23ee0c2d7bcce5d09d40f3a14c91f29000d3a83b8a9c26440cd1b3748a93ea47\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://62f7975f651c46b43acd346786d7cf5f78027d21a2dd694377b271ba97209ada\",\"dweb:/ipfs/QmNS7ppgMivJCJgu6JzEN8MvjWM7ctsDREcNyHTcZzYXRG\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts/IDO/AlphaSEAMigration.sol": {
				"aSEAMigration": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "SEA",
							"outputs": [
								{
									"internalType": "contract IERC20Upgradeable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "aSEA",
							"outputs": [
								{
									"internalType": "contract IERC20Upgradeable",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "endTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_SEA",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_aSEA",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "_startTimestamp",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "_endTimestamp",
									"type": "uint256"
								}
							],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "isInitialized",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "maxAmt",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "migrate",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "_bool",
									"type": "bool"
								}
							],
							"name": "open",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"name": "senderInfo",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "val",
									"type": "uint256"
								}
							],
							"name": "setEndTimestamp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "val",
									"type": "uint256"
								}
							],
							"name": "setMaxAmt",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "val",
									"type": "uint256"
								}
							],
							"name": "setStartTimestamp",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "startTimestamp",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "withdraw",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/IDO/AlphaSEAMigration.sol\":459:2981  contract aSEAMigration is Initializable, OwnableUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":459:2981  contract aSEAMigration is Initializable, OwnableUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xa6dd4c66\n      gt\n      tag_20\n      jumpi\n      dup1\n      0xe6fd48bc\n      gt\n      tag_21\n      jumpi\n      dup1\n      0xe6fd48bc\n      eq\n      tag_15\n      jumpi\n      dup1\n      0xeb990c59\n      eq\n      tag_16\n      jumpi\n      dup1\n      0xf019e2b2\n      eq\n      tag_17\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_18\n      jumpi\n      dup1\n      0xff257dad\n      eq\n      tag_19\n      jumpi\n      jump(tag_2)\n    tag_21:\n      dup1\n      0xa6dd4c66\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa85717d3\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xa85adeab\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xc44bef75\n      eq\n      tag_14\n      jumpi\n      jump(tag_2)\n    tag_20:\n      dup1\n      0x715018a6\n      gt\n      tag_22\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x7df6a6c8\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8fd3ab80\n      eq\n      tag_10\n      jumpi\n      jump(tag_2)\n    tag_22:\n      dup1\n      0x392e53cd\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x3ccfd60b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x5294385b\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x5d2b6a0c\n      eq\n      tag_6\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":790:815  bool public isInitialized */\n    tag_3:\n      tag_23\n      tag_24\n      jump\t// in\n    tag_23:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_26\n      jump\t// in\n    tag_25:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2432:2693  function withdraw() external onlyOwner {... */\n    tag_4:\n      tag_27\n      tag_28\n      jump\t// in\n    tag_27:\n      stop\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2899:2979  function setMaxAmt(uint256 val) external onlyOwner {... */\n    tag_5:\n      tag_27\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":754:783  IERC20Upgradeable public aSEA */\n    tag_6:\n      tag_33\n      tag_34\n      jump\t// in\n    tag_33:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_45\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1934:2035  function renounceOwnership() public virtual onlyOwner {... */\n    tag_7:\n      tag_27\n      tag_38\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2699:2791  function setEndTimestamp(uint256 val) external onlyOwner {... */\n    tag_8:\n      tag_27\n      tag_40\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_40:\n      tag_41\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1302:1387  function owner() public view virtual returns (address) {... */\n    tag_9:\n      tag_33\n      tag_43\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1586:2079  function migrate() external onlyInitialized {... */\n    tag_10:\n      tag_27\n      tag_47\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":822:867  mapping(address => uint256) public senderInfo */\n    tag_11:\n      tag_48\n      tag_49\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_49:\n      tag_51\n      jump\t// in\n    tag_48:\n      mload(0x40)\n      tag_25\n      swap2\n      swap1\n      tag_53\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1497:1580  function open(bool _bool) external onlyOwner {... */\n    tag_12:\n      tag_27\n      tag_55\n      calldatasize\n      0x04\n      tag_56\n      jump\t// in\n    tag_55:\n      tag_57\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":623:650  uint256 public endTimestamp */\n    tag_13:\n      tag_48\n      tag_59\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2797:2893  function setStartTimestamp(uint256 val) external onlyOwner {... */\n    tag_14:\n      tag_27\n      tag_62\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_62:\n      tag_63\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":656:685  uint256 public startTimestamp */\n    tag_15:\n      tag_48\n      tag_65\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1082:1491  function initialize(... */\n    tag_16:\n      tag_27\n      tag_68\n      calldatasize\n      0x04\n      tag_69\n      jump\t// in\n    tag_68:\n      tag_70\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":692:713  uint256 public maxAmt */\n    tag_17:\n      tag_48\n      tag_72\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2184:2382  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_18:\n      tag_27\n      tag_75\n      calldatasize\n      0x04\n      tag_50\n      jump\t// in\n    tag_75:\n      tag_76\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":720:748  IERC20Upgradeable public SEA */\n    tag_19:\n      tag_33\n      tag_78\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":790:815  bool public isInitialized */\n    tag_24:\n      sload(0x69)\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2432:2693  function withdraw() external onlyOwner {... */\n    tag_28:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_81\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_82\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_83\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_43\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_83:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_84\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n    tag_85:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_84:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2520:2532  endTimestamp */\n      sload(0x65)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2502:2517  block.timestamp */\n      timestamp\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2502:2532  block.timestamp > endTimestamp */\n      gt\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2481:2588  require(... */\n      tag_88\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_90\n      jump\t// in\n    tag_88:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2615:2618  SEA */\n      sload(0x68)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2615:2643  SEA.balanceOf(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2598:2612  uint256 amount */\n      0x00\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2615:2618  SEA */\n      and\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2615:2628  SEA.balanceOf */\n      0x70a08231\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2615:2643  SEA.balanceOf(address(this)) */\n      tag_91\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2637:2641  this */\n      address\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2615:2643  SEA.balanceOf(address(this)) */\n      0x04\n      add\n      tag_45\n      jump\t// in\n    tag_91:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_92\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_92:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_94\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_94:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_95\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_95:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2654:2657  SEA */\n      sload(0x68)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2654:2686  SEA.transfer(msg.sender, amount) */\n      mload(0x40)\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2598:2643  uint256 amount = SEA.balanceOf(address(this)) */\n      swap2\n      swap3\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2654:2657  SEA */\n      and\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2654:2666  SEA.transfer */\n      0xa9059cbb\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2654:2686  SEA.transfer(msg.sender, amount) */\n      tag_97\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2667:2677  msg.sender */\n      caller\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2598:2643  uint256 amount = SEA.balanceOf(address(this)) */\n      dup6\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2654:2686  SEA.transfer(msg.sender, amount) */\n      0x04\n      add\n      tag_98\n      jump\t// in\n    tag_97:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_99\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_99:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_101\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_101:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_102\n      swap2\n      swap1\n      tag_103\n      jump\t// in\n    tag_102:\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1584:1585  _ */\n      pop\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2432:2693  function withdraw() external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2899:2979  function setMaxAmt(uint256 val) external onlyOwner {... */\n    tag_32:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_105\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_82\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_105:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_106\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_43\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_106:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_107\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n    tag_107:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2960:2966  maxAmt */\n      0x67\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2960:2972  maxAmt = val */\n      sstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2899:2979  function setMaxAmt(uint256 val) external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":754:783  IERC20Upgradeable public aSEA */\n    tag_34:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x69))\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1934:2035  function renounceOwnership() public virtual onlyOwner {... */\n    tag_38:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_111\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_82\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_111:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_112\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_43\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_113\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n    tag_113:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1998:2028  _transferOwnership(address(0)) */\n      tag_116\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2025:2026  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1998:2016  _transferOwnership */\n      tag_117\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1998:2028  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_116:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1934:2035  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2699:2791  function setEndTimestamp(uint256 val) external onlyOwner {... */\n    tag_41:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_119\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_82\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_119:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_120\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_43\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_120:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_121\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n    tag_121:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2766:2778  endTimestamp */\n      0x65\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2766:2784  endTimestamp = val */\n      sstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2699:2791  function setEndTimestamp(uint256 val) external onlyOwner {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1302:1387  function owner() public view virtual returns (address) {... */\n    tag_43:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1374:1380  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x33))\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1302:1387  function owner() public view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1586:2079  function migrate() external onlyInitialized {... */\n    tag_47:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":919:932  isInitialized */\n      sload(0x69)\n      shl(0xa0, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":911:952  require(isInitialized, \"not initialized\") */\n      tag_126\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_128\n      jump\t// in\n    tag_126:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1657:1661  aSEA */\n      sload(0x69)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1657:1683  aSEA.balanceOf(msg.sender) */\n      mload(0x40)\n      shl(0xe0, 0x70a08231)\n      dup2\n      mstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1640:1654  uint256 amount */\n      0x00\n      swap2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1657:1661  aSEA */\n      and\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1657:1671  aSEA.balanceOf */\n      0x70a08231\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1657:1683  aSEA.balanceOf(msg.sender) */\n      tag_130\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1672:1682  msg.sender */\n      caller\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1657:1683  aSEA.balanceOf(msg.sender) */\n      0x04\n      add\n      tag_45\n      jump\t// in\n    tag_130:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup7\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_131\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_131:\n      pop\n      gas\n      staticcall\n      iszero\n      dup1\n      iszero\n      tag_133\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_133:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_134\n      swap2\n      swap1\n      tag_96\n      jump\t// in\n    tag_134:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1640:1683  uint256 amount = aSEA.balanceOf(msg.sender) */\n      swap1\n      pop\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1711:1717  maxAmt */\n      sload(0x67)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1701:1707  amount */\n      dup2\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1701:1717  amount <= maxAmt */\n      gt\n      iszero\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1693:1749  require(amount <= maxAmt, \"Exceed the specified amount\") */\n      tag_135\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_137\n      jump\t// in\n    tag_135:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1784:1799  block.timestamp */\n      timestamp\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1767:1781  startTimestamp */\n      sload(0x66)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1767:1799  startTimestamp < block.timestamp */\n      lt\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1759:1819  require(startTimestamp < block.timestamp, \"Not started yet\") */\n      tag_138\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_140\n      jump\t// in\n    tag_138:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1855:1867  endTimestamp */\n      sload(0x65)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1837:1852  block.timestamp */\n      timestamp\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1837:1867  block.timestamp < endTimestamp */\n      lt\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1829:1898  require(block.timestamp < endTimestamp, \"swapping of aSEA has ended\") */\n      tag_141\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_143\n      jump\t// in\n    tag_141:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1909:1913  aSEA */\n      sload(0x69)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1909:1961  aSEA.transferFrom(msg.sender, address(this), amount) */\n      mload(0x40)\n      shl(0xe0, 0x23b872dd)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1909:1913  aSEA */\n      swap1\n      swap2\n      and\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1909:1926  aSEA.transferFrom */\n      0x23b872dd\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1909:1961  aSEA.transferFrom(msg.sender, address(this), amount) */\n      tag_144\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1927:1937  msg.sender */\n      caller\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1947:1951  this */\n      address\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1954:1960  amount */\n      dup7\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1909:1961  aSEA.transferFrom(msg.sender, address(this), amount) */\n      0x04\n      add\n      tag_145\n      jump\t// in\n    tag_144:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      dup1\n      extcodesize\n      iszero\n      dup1\n      iszero\n      tag_146\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_146:\n      pop\n      gas\n      call\n      iszero\n      dup1\n      iszero\n      tag_148\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_148:\n      pop\n      pop\n      pop\n      pop\n      mload(0x40)\n      returndatasize\n      not(0x1f)\n      0x1f\n      dup3\n      add\n      and\n      dup3\n      add\n      dup1\n      0x40\n      mstore\n      pop\n      dup2\n      add\n      swap1\n      tag_149\n      swap2\n      swap1\n      tag_103\n      jump\t// in\n    tag_149:\n      pop\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2007:2017  msg.sender */\n      caller\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1996:2018  senderInfo[msg.sender] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1996:2006  senderInfo */\n      0x6a\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1996:2018  senderInfo[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1996:2030  senderInfo[msg.sender].add(amount) */\n      tag_150\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2023:2029  amount */\n      dup3\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1996:2022  senderInfo[msg.sender].add */\n      tag_151\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1996:2030  senderInfo[msg.sender].add(amount) */\n      jump\t// in\n    tag_150:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1982:1992  msg.sender */\n      caller\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1971:1993  senderInfo[msg.sender] */\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1971:1981  senderInfo */\n      0x6a\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1971:1993  senderInfo[msg.sender] */\n      0x20\n      mstore\n      0x40\n      swap1\n      dup2\n      swap1\n      keccak256\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1971:2030  senderInfo[msg.sender] = senderInfo[msg.sender].add(amount) */\n      swap3\n      swap1\n      swap3\n      sstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2040:2043  SEA */\n      sload(0x68)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2040:2072  SEA.transfer(msg.sender, amount) */\n      swap2\n      mload\n      shl(0xe0, 0xa9059cbb)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2040:2043  SEA */\n      swap1\n      swap3\n      and\n      swap2\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2040:2052  SEA.transfer */\n      0xa9059cbb\n      swap2\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2040:2072  SEA.transfer(msg.sender, amount) */\n      tag_97\n      swap2\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2065:2071  amount */\n      dup6\n      swap1\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2040:2072  SEA.transfer(msg.sender, amount) */\n      0x04\n      add\n      tag_98\n      jump\t// in\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":822:867  mapping(address => uint256) public senderInfo */\n    tag_51:\n      mstore(0x20, 0x6a)\n      0x00\n      swap1\n      dup2\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1497:1580  function open(bool _bool) external onlyOwner {... */\n    tag_57:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_158\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_82\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_158:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_159\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_43\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_159:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_160\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n    tag_160:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1552:1565  isInitialized */\n      0x69\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1552:1573  isInitialized = _bool */\n      dup1\n      sload\n      swap2\n      iszero\n      iszero\n      shl(0xa0, 0x01)\n      mul\n      not(shl(0xa0, 0xff))\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1497:1580  function open(bool _bool) external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":623:650  uint256 public endTimestamp */\n    tag_59:\n      sload(0x65)\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2797:2893  function setStartTimestamp(uint256 val) external onlyOwner {... */\n    tag_63:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_164\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_82\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_164:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_165\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_43\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_165:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_166\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n    tag_166:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2866:2880  startTimestamp */\n      0x66\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2866:2886  startTimestamp = val */\n      sstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":2797:2893  function setStartTimestamp(uint256 val) external onlyOwner {... */\n      jump\t// out\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":656:685  uint256 public startTimestamp */\n    tag_65:\n      sload(0x66)\n      dup2\n      jump\t// out\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1082:1491  function initialize(... */\n    tag_70:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:552  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n      tag_170\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":557:569  _initialized */\n      and(0xff, sload(0x00))\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":556:569  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n    tag_170:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":531:620  require(_initializing || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_171\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_173\n      jump\t// in\n    tag_171:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":631:650  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":654:667  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":653:667  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_174\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:724  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:731  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":727:731  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n    tag_174:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1248:1264  __Ownable_init() */\n      tag_176\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1248:1262  __Ownable_init */\n      tag_177\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1248:1264  __Ownable_init() */\n      jump\t// in\n    tag_176:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1274:1277  SEA */\n      0x68\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1274:1303  SEA = IERC20Upgradeable(_SEA) */\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      dup1\n      dup9\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      swap3\n      dup4\n      and\n      or\n      swap1\n      swap3\n      sstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1313:1317  aSEA */\n      0x69\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1313:1344  aSEA = IERC20Upgradeable(_aSEA) */\n      dup1\n      sload\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1354:1368  startTimestamp */\n      0x66\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1354:1386  startTimestamp = _startTimestamp */\n      dup8\n      swap1\n      sstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1396:1408  endTimestamp */\n      0x65\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1396:1424  endTimestamp = _endTimestamp */\n      dup7\n      swap1\n      sstore\n      not(shl(0xa0, 0xff))\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1313:1344  aSEA = IERC20Upgradeable(_aSEA) */\n      swap4\n      dup9\n      and\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1434:1455  isInitialized = false */\n      swap2\n      swap1\n      swap2\n      and\n      swap1\n      sstore\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1474:1484  120 * 1e18 */\n      0x068155a43676e00000\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1465:1471  maxAmt */\n      0x67\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1465:1484  maxAmt = 120 * 1e18 */\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":797:863  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_178\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":847:852  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":831:852  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":797:863  if (isTopLevelCall) {... */\n    tag_178:\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":1082:1491  function initialize(... */\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":692:713  uint256 public maxAmt */\n    tag_72:\n      sload(0x67)\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2184:2382  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_76:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      tag_180\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1535  _msgSender */\n      tag_82\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1525:1537  _msgSender() */\n      jump\t// in\n    tag_180:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      tag_181\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1519  owner */\n      tag_43\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1521  owner() */\n      jump\t// in\n    tag_181:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1514:1537  owner() == _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1506:1574  require(owner() == _msgSender(), \"Ownable: caller is not the owner\") */\n      tag_182\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_86\n      jump\t// in\n    tag_182:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2272:2294  newOwner != address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2264:2337  require(newOwner != address(0), \"Ownable: new owner is the zero address\") */\n      tag_185\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_187\n      jump\t// in\n    tag_185:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2347:2375  _transferOwnership(newOwner) */\n      tag_188\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2366:2374  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2347:2365  _transferOwnership */\n      tag_117\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2347:2375  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_188:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2184:2382  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts/IDO/AlphaSEAMigration.sol\":720:748  IERC20Upgradeable public SEA */\n    tag_78:\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x68))\n      dup2\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":876:972  function _msgSender() internal view virtual returns (address) {... */\n    tag_82:\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":955:965  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":876:972  function _msgSender() internal view virtual returns (address) {... */\n      swap1\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2536:2723  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_117:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2628:2634  _owner */\n      0x33\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2644:2661  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2676:2716  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2628:2634  _owner */\n      swap2\n      and\n      swap2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2644:2661  _owner = newOwner */\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2628:2634  _owner */\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2676:2716  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2609:2625  address oldOwner */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2676:2716  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2536:2723  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2752:2848  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n    tag_151:\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2810:2817  uint256 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2836:2841  a + b */\n      tag_192\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2840:2841  b */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2836:2837  a */\n      dup5\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2836:2841  a + b */\n      tag_193\n      jump\t// in\n    tag_192:\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2829:2841  return a + b */\n      swap4\n        /* \"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":2752:2848  function add(uint256 a, uint256 b) internal pure returns (uint256) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":988:1114  function __Ownable_init() internal initializer {... */\n    tag_177:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:552  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n      tag_195\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":557:569  _initialized */\n      and(0xff, sload(0x00))\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":556:569  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n    tag_195:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":531:620  require(_initializing || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_196\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_173\n      jump\t// in\n    tag_196:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":631:650  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":654:667  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":653:667  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_198\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:724  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:731  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":727:731  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n    tag_198:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1045:1071  __Context_init_unchained() */\n      tag_200\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1045:1069  __Context_init_unchained */\n      tag_201\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1045:1071  __Context_init_unchained() */\n      jump\t// in\n    tag_200:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1081:1107  __Ownable_init_unchained() */\n      tag_202\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1081:1105  __Ownable_init_unchained */\n      tag_203\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1081:1107  __Ownable_init_unchained() */\n      jump\t// in\n    tag_202:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":801:815  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":797:863  if (isTopLevelCall) {... */\n      iszero\n      tag_188\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":847:852  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":831:852  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":988:1114  function __Ownable_init() internal initializer {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":807:871  function __Context_init_unchained() internal initializer {... */\n    tag_201:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:552  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n      tag_206\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":557:569  _initialized */\n      and(0xff, sload(0x00))\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":556:569  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n    tag_206:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":531:620  require(_initializing || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_207\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_173\n      jump\t// in\n    tag_207:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":631:650  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":654:667  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":653:667  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_202\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:724  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:731  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":727:731  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":801:815  isTopLevelCall */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":797:863  if (isTopLevelCall) {... */\n      iszero\n      tag_188\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":847:852  false */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":831:852  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":807:871  function __Context_init_unchained() internal initializer {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1120:1226  function __Ownable_init_unchained() internal initializer {... */\n    tag_203:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:552  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n      tag_213\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":557:569  _initialized */\n      and(0xff, sload(0x00))\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":556:569  !_initialized */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":539:569  _initializing || !_initialized */\n    tag_213:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":531:620  require(_initializing || !_initialized, \"Initializable: contract is already initialized\") */\n      tag_214\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_85\n      swap1\n      tag_173\n      jump\t// in\n    tag_214:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":631:650  bool isTopLevelCall */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":654:667  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":653:667  !_initializing */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_216\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:724  _initializing */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":711:731  _initializing = true */\n      dup1\n      sload\n      not(0xff)\n      not(0xff00)\n      swap1\n      swap2\n      and\n      0x0100\n      or\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":727:731  true */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":745:764  _initialized = true */\n      or\n      swap1\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":677:775  if (isTopLevelCall) {... */\n    tag_216:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1187:1219  _transferOwnership(_msgSender()) */\n      tag_202\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1206:1218  _msgSender() */\n      tag_219\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1206:1216  _msgSender */\n      tag_82\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1206:1218  _msgSender() */\n      jump\t// in\n    tag_219:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1187:1205  _transferOwnership */\n      tag_117\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1187:1219  _transferOwnership(_msgSender()) */\n      jump\t// in\n        /* \"#utility.yul\":14:189   */\n    tag_222:\n        /* \"#utility.yul\":84:104   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":133:164   */\n      dup2\n      and\n        /* \"#utility.yul\":123:165   */\n      dup2\n      eq\n        /* \"#utility.yul\":113:115   */\n      tag_224\n      jumpi\n        /* \"#utility.yul\":179:180   */\n      0x00\n        /* \"#utility.yul\":176:177   */\n      dup1\n        /* \"#utility.yul\":169:181   */\n      revert\n        /* \"#utility.yul\":113:115   */\n    tag_224:\n        /* \"#utility.yul\":65:189   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":194:392   */\n    tag_50:\n      0x00\n        /* \"#utility.yul\":306:308   */\n      0x20\n        /* \"#utility.yul\":294:303   */\n      dup3\n        /* \"#utility.yul\":285:292   */\n      dup5\n        /* \"#utility.yul\":281:304   */\n      sub\n        /* \"#utility.yul\":277:309   */\n      slt\n        /* \"#utility.yul\":274:276   */\n      iszero\n      tag_226\n      jumpi\n        /* \"#utility.yul\":327:333   */\n      dup1\n        /* \"#utility.yul\":319:325   */\n      dup2\n        /* \"#utility.yul\":312:334   */\n      revert\n        /* \"#utility.yul\":274:276   */\n    tag_226:\n        /* \"#utility.yul\":355:386   */\n      tag_192\n        /* \"#utility.yul\":376:385   */\n      dup3\n        /* \"#utility.yul\":355:386   */\n      tag_222\n      jump\t// in\n        /* \"#utility.yul\":397:808   */\n    tag_69:\n      0x00\n      dup1\n      0x00\n      dup1\n        /* \"#utility.yul\":560:563   */\n      0x80\n        /* \"#utility.yul\":548:557   */\n      dup6\n        /* \"#utility.yul\":539:546   */\n      dup8\n        /* \"#utility.yul\":535:558   */\n      sub\n        /* \"#utility.yul\":531:564   */\n      slt\n        /* \"#utility.yul\":528:530   */\n      iszero\n      tag_229\n      jumpi\n        /* \"#utility.yul\":582:588   */\n      dup3\n        /* \"#utility.yul\":574:580   */\n      dup4\n        /* \"#utility.yul\":567:589   */\n      revert\n        /* \"#utility.yul\":528:530   */\n    tag_229:\n        /* \"#utility.yul\":610:641   */\n      tag_230\n        /* \"#utility.yul\":631:640   */\n      dup6\n        /* \"#utility.yul\":610:641   */\n      tag_222\n      jump\t// in\n    tag_230:\n        /* \"#utility.yul\":600:641   */\n      swap4\n      pop\n        /* \"#utility.yul\":660:700   */\n      tag_231\n        /* \"#utility.yul\":696:698   */\n      0x20\n        /* \"#utility.yul\":685:694   */\n      dup7\n        /* \"#utility.yul\":681:699   */\n      add\n        /* \"#utility.yul\":660:700   */\n      tag_222\n      jump\t// in\n    tag_231:\n        /* \"#utility.yul\":518:808   */\n      swap4\n      swap7\n        /* \"#utility.yul\":650:700   */\n      swap4\n      swap6\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":747:749   */\n      0x40\n        /* \"#utility.yul\":732:750   */\n      dup3\n      add\n        /* \"#utility.yul\":719:751   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":798:800   */\n      0x60\n        /* \"#utility.yul\":783:801   */\n      add\n        /* \"#utility.yul\":770:802   */\n      calldataload\n      swap1\n        /* \"#utility.yul\":518:808   */\n      jump\t// out\n        /* \"#utility.yul\":813:1066   */\n    tag_56:\n      0x00\n        /* \"#utility.yul\":922:924   */\n      0x20\n        /* \"#utility.yul\":910:919   */\n      dup3\n        /* \"#utility.yul\":901:908   */\n      dup5\n        /* \"#utility.yul\":897:920   */\n      sub\n        /* \"#utility.yul\":893:925   */\n      slt\n        /* \"#utility.yul\":890:892   */\n      iszero\n      tag_233\n      jumpi\n        /* \"#utility.yul\":943:949   */\n      dup1\n        /* \"#utility.yul\":935:941   */\n      dup2\n        /* \"#utility.yul\":928:950   */\n      revert\n        /* \"#utility.yul\":890:892   */\n    tag_233:\n        /* \"#utility.yul\":987:996   */\n      dup2\n        /* \"#utility.yul\":974:997   */\n      calldataload\n        /* \"#utility.yul\":1006:1036   */\n      tag_192\n        /* \"#utility.yul\":1030:1035   */\n      dup2\n        /* \"#utility.yul\":1006:1036   */\n      tag_235\n      jump\t// in\n        /* \"#utility.yul\":1071:1328   */\n    tag_103:\n      0x00\n        /* \"#utility.yul\":1191:1193   */\n      0x20\n        /* \"#utility.yul\":1179:1188   */\n      dup3\n        /* \"#utility.yul\":1170:1177   */\n      dup5\n        /* \"#utility.yul\":1166:1189   */\n      sub\n        /* \"#utility.yul\":1162:1194   */\n      slt\n        /* \"#utility.yul\":1159:1161   */\n      iszero\n      tag_237\n      jumpi\n        /* \"#utility.yul\":1212:1218   */\n      dup1\n        /* \"#utility.yul\":1204:1210   */\n      dup2\n        /* \"#utility.yul\":1197:1219   */\n      revert\n        /* \"#utility.yul\":1159:1161   */\n    tag_237:\n        /* \"#utility.yul\":1249:1258   */\n      dup2\n        /* \"#utility.yul\":1243:1259   */\n      mload\n        /* \"#utility.yul\":1268:1298   */\n      tag_192\n        /* \"#utility.yul\":1292:1297   */\n      dup2\n        /* \"#utility.yul\":1268:1298   */\n      tag_235\n      jump\t// in\n        /* \"#utility.yul\":1333:1523   */\n    tag_31:\n      0x00\n        /* \"#utility.yul\":1445:1447   */\n      0x20\n        /* \"#utility.yul\":1433:1442   */\n      dup3\n        /* \"#utility.yul\":1424:1431   */\n      dup5\n        /* \"#utility.yul\":1420:1443   */\n      sub\n        /* \"#utility.yul\":1416:1448   */\n      slt\n        /* \"#utility.yul\":1413:1415   */\n      iszero\n      tag_240\n      jumpi\n        /* \"#utility.yul\":1466:1472   */\n      dup1\n        /* \"#utility.yul\":1458:1464   */\n      dup2\n        /* \"#utility.yul\":1451:1473   */\n      revert\n        /* \"#utility.yul\":1413:1415   */\n    tag_240:\n      pop\n        /* \"#utility.yul\":1494:1517   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1403:1523   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1528:1722   */\n    tag_96:\n      0x00\n        /* \"#utility.yul\":1651:1653   */\n      0x20\n        /* \"#utility.yul\":1639:1648   */\n      dup3\n        /* \"#utility.yul\":1630:1637   */\n      dup5\n        /* \"#utility.yul\":1626:1649   */\n      sub\n        /* \"#utility.yul\":1622:1654   */\n      slt\n        /* \"#utility.yul\":1619:1621   */\n      iszero\n      tag_242\n      jumpi\n        /* \"#utility.yul\":1672:1678   */\n      dup1\n        /* \"#utility.yul\":1664:1670   */\n      dup2\n        /* \"#utility.yul\":1657:1679   */\n      revert\n        /* \"#utility.yul\":1619:1621   */\n    tag_242:\n      pop\n        /* \"#utility.yul\":1700:1716   */\n      mload\n      swap2\n        /* \"#utility.yul\":1609:1722   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1727:1930   */\n    tag_45:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1891:1923   */\n      swap2\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1873:1924   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1861:1863   */\n      0x20\n        /* \"#utility.yul\":1846:1864   */\n      add\n      swap1\n        /* \"#utility.yul\":1828:1930   */\n      jump\t// out\n        /* \"#utility.yul\":1935:2310   */\n    tag_145:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2193:2208   */\n      swap4\n      dup5\n      and\n        /* \"#utility.yul\":2175:2209   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2245:2260   */\n      swap2\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":2240:2242   */\n      0x20\n        /* \"#utility.yul\":2225:2243   */\n      dup3\n      add\n        /* \"#utility.yul\":2218:2261   */\n      mstore\n        /* \"#utility.yul\":2292:2294   */\n      0x40\n        /* \"#utility.yul\":2277:2295   */\n      dup2\n      add\n        /* \"#utility.yul\":2270:2304   */\n      swap2\n      swap1\n      swap2\n      mstore\n        /* \"#utility.yul\":2125:2127   */\n      0x60\n        /* \"#utility.yul\":2110:2128   */\n      add\n      swap1\n        /* \"#utility.yul\":2092:2310   */\n      jump\t// out\n        /* \"#utility.yul\":2315:2589   */\n    tag_98:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":2507:2539   */\n      swap3\n      swap1\n      swap3\n      and\n        /* \"#utility.yul\":2489:2540   */\n      dup3\n      mstore\n        /* \"#utility.yul\":2571:2573   */\n      0x20\n        /* \"#utility.yul\":2556:2574   */\n      dup3\n      add\n        /* \"#utility.yul\":2549:2583   */\n      mstore\n        /* \"#utility.yul\":2477:2479   */\n      0x40\n        /* \"#utility.yul\":2462:2480   */\n      add\n      swap1\n        /* \"#utility.yul\":2444:2589   */\n      jump\t// out\n        /* \"#utility.yul\":2594:2781   */\n    tag_26:\n        /* \"#utility.yul\":2759:2773   */\n      swap1\n      iszero\n        /* \"#utility.yul\":2752:2774   */\n      iszero\n        /* \"#utility.yul\":2734:2775   */\n      dup2\n      mstore\n        /* \"#utility.yul\":2722:2724   */\n      0x20\n        /* \"#utility.yul\":2707:2725   */\n      add\n      swap1\n        /* \"#utility.yul\":2689:2781   */\n      jump\t// out\n        /* \"#utility.yul\":3019:3373   */\n    tag_90:\n        /* \"#utility.yul\":3221:3223   */\n      0x20\n        /* \"#utility.yul\":3203:3224   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3260:3262   */\n      0x1e\n        /* \"#utility.yul\":3240:3258   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3233:3263   */\n      mstore\n        /* \"#utility.yul\":3299:3331   */\n      0x7377617070696e67206f66206153454120686173206e6f7420656e6465640000\n        /* \"#utility.yul\":3294:3296   */\n      0x40\n        /* \"#utility.yul\":3279:3297   */\n      dup3\n      add\n        /* \"#utility.yul\":3272:3332   */\n      mstore\n        /* \"#utility.yul\":3364:3366   */\n      0x60\n        /* \"#utility.yul\":3349:3367   */\n      add\n      swap1\n        /* \"#utility.yul\":3193:3373   */\n      jump\t// out\n        /* \"#utility.yul\":3378:3717   */\n    tag_128:\n        /* \"#utility.yul\":3580:3582   */\n      0x20\n        /* \"#utility.yul\":3562:3583   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3619:3621   */\n      0x0f\n        /* \"#utility.yul\":3599:3617   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3592:3622   */\n      mstore\n      shl(0x8a, 0x1b9bdd081a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":3653:3655   */\n      0x40\n        /* \"#utility.yul\":3638:3656   */\n      dup3\n      add\n        /* \"#utility.yul\":3631:3676   */\n      mstore\n        /* \"#utility.yul\":3708:3710   */\n      0x60\n        /* \"#utility.yul\":3693:3711   */\n      add\n      swap1\n        /* \"#utility.yul\":3552:3717   */\n      jump\t// out\n        /* \"#utility.yul\":3722:4124   */\n    tag_187:\n        /* \"#utility.yul\":3924:3926   */\n      0x20\n        /* \"#utility.yul\":3906:3927   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3963:3965   */\n      0x26\n        /* \"#utility.yul\":3943:3961   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":3936:3966   */\n      mstore\n        /* \"#utility.yul\":4002:4036   */\n      0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061\n        /* \"#utility.yul\":3997:3999   */\n      0x40\n        /* \"#utility.yul\":3982:4000   */\n      dup3\n      add\n        /* \"#utility.yul\":3975:4037   */\n      mstore\n      shl(0xd0, 0x646472657373)\n        /* \"#utility.yul\":4068:4070   */\n      0x60\n        /* \"#utility.yul\":4053:4071   */\n      dup3\n      add\n        /* \"#utility.yul\":4046:4082   */\n      mstore\n        /* \"#utility.yul\":4114:4117   */\n      0x80\n        /* \"#utility.yul\":4099:4118   */\n      add\n      swap1\n        /* \"#utility.yul\":3896:4124   */\n      jump\t// out\n        /* \"#utility.yul\":4129:4539   */\n    tag_173:\n        /* \"#utility.yul\":4331:4333   */\n      0x20\n        /* \"#utility.yul\":4313:4334   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4370:4372   */\n      0x2e\n        /* \"#utility.yul\":4350:4368   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":4343:4373   */\n      mstore\n        /* \"#utility.yul\":4409:4443   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":4404:4406   */\n      0x40\n        /* \"#utility.yul\":4389:4407   */\n      dup3\n      add\n        /* \"#utility.yul\":4382:4444   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":4475:4477   */\n      0x60\n        /* \"#utility.yul\":4460:4478   */\n      dup3\n      add\n        /* \"#utility.yul\":4453:4497   */\n      mstore\n        /* \"#utility.yul\":4529:4532   */\n      0x80\n        /* \"#utility.yul\":4514:4533   */\n      add\n      swap1\n        /* \"#utility.yul\":4303:4539   */\n      jump\t// out\n        /* \"#utility.yul\":4544:4900   */\n    tag_86:\n        /* \"#utility.yul\":4746:4748   */\n      0x20\n        /* \"#utility.yul\":4728:4749   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":4765:4783   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":4758:4788   */\n      mstore\n        /* \"#utility.yul\":4824:4858   */\n      0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572\n        /* \"#utility.yul\":4819:4821   */\n      0x40\n        /* \"#utility.yul\":4804:4822   */\n      dup3\n      add\n        /* \"#utility.yul\":4797:4859   */\n      mstore\n        /* \"#utility.yul\":4891:4893   */\n      0x60\n        /* \"#utility.yul\":4876:4894   */\n      add\n      swap1\n        /* \"#utility.yul\":4718:4900   */\n      jump\t// out\n        /* \"#utility.yul\":4905:5256   */\n    tag_137:\n        /* \"#utility.yul\":5107:5109   */\n      0x20\n        /* \"#utility.yul\":5089:5110   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5146:5148   */\n      0x1b\n        /* \"#utility.yul\":5126:5144   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5119:5149   */\n      mstore\n        /* \"#utility.yul\":5185:5214   */\n      0x457863656564207468652073706563696669656420616d6f756e740000000000\n        /* \"#utility.yul\":5180:5182   */\n      0x40\n        /* \"#utility.yul\":5165:5183   */\n      dup3\n      add\n        /* \"#utility.yul\":5158:5215   */\n      mstore\n        /* \"#utility.yul\":5247:5249   */\n      0x60\n        /* \"#utility.yul\":5232:5250   */\n      add\n      swap1\n        /* \"#utility.yul\":5079:5256   */\n      jump\t// out\n        /* \"#utility.yul\":5261:5611   */\n    tag_143:\n        /* \"#utility.yul\":5463:5465   */\n      0x20\n        /* \"#utility.yul\":5445:5466   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5502:5504   */\n      0x1a\n        /* \"#utility.yul\":5482:5500   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5475:5505   */\n      mstore\n        /* \"#utility.yul\":5541:5569   */\n      0x7377617070696e67206f6620615345412068617320656e646564000000000000\n        /* \"#utility.yul\":5536:5538   */\n      0x40\n        /* \"#utility.yul\":5521:5539   */\n      dup3\n      add\n        /* \"#utility.yul\":5514:5570   */\n      mstore\n        /* \"#utility.yul\":5602:5604   */\n      0x60\n        /* \"#utility.yul\":5587:5605   */\n      add\n      swap1\n        /* \"#utility.yul\":5435:5611   */\n      jump\t// out\n        /* \"#utility.yul\":5616:5955   */\n    tag_140:\n        /* \"#utility.yul\":5818:5820   */\n      0x20\n        /* \"#utility.yul\":5800:5821   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":5857:5859   */\n      0x0f\n        /* \"#utility.yul\":5837:5855   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":5830:5860   */\n      mstore\n      shl(0x8a, 0x139bdd081cdd185c9d1959081e595d)\n        /* \"#utility.yul\":5891:5893   */\n      0x40\n        /* \"#utility.yul\":5876:5894   */\n      dup3\n      add\n        /* \"#utility.yul\":5869:5914   */\n      mstore\n        /* \"#utility.yul\":5946:5948   */\n      0x60\n        /* \"#utility.yul\":5931:5949   */\n      add\n      swap1\n        /* \"#utility.yul\":5790:5955   */\n      jump\t// out\n        /* \"#utility.yul\":5960:6137   */\n    tag_53:\n        /* \"#utility.yul\":6106:6131   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":6094:6096   */\n      0x20\n        /* \"#utility.yul\":6079:6097   */\n      add\n      swap1\n        /* \"#utility.yul\":6061:6137   */\n      jump\t// out\n        /* \"#utility.yul\":6142:6371   */\n    tag_193:\n      0x00\n        /* \"#utility.yul\":6213:6214   */\n      dup3\n        /* \"#utility.yul\":6209:6215   */\n      not\n        /* \"#utility.yul\":6206:6207   */\n      dup3\n        /* \"#utility.yul\":6203:6216   */\n      gt\n        /* \"#utility.yul\":6200:6202   */\n      iszero\n      tag_258\n      jumpi\n      shl(0xe0, 0x4e487b71)\n        /* \"#utility.yul\":6239:6272   */\n      dup2\n      mstore\n        /* \"#utility.yul\":6295:6299   */\n      0x11\n        /* \"#utility.yul\":6292:6293   */\n      0x04\n        /* \"#utility.yul\":6285:6300   */\n      mstore\n        /* \"#utility.yul\":6325:6329   */\n      0x24\n        /* \"#utility.yul\":6246:6249   */\n      dup2\n        /* \"#utility.yul\":6313:6330   */\n      revert\n        /* \"#utility.yul\":6200:6202   */\n    tag_258:\n      pop\n        /* \"#utility.yul\":6356:6365   */\n      add\n      swap1\n        /* \"#utility.yul\":6190:6371   */\n      jump\t// out\n        /* \"#utility.yul\":6376:6496   */\n    tag_235:\n        /* \"#utility.yul\":6464:6469   */\n      dup1\n        /* \"#utility.yul\":6457:6470   */\n      iszero\n        /* \"#utility.yul\":6450:6471   */\n      iszero\n        /* \"#utility.yul\":6443:6448   */\n      dup2\n        /* \"#utility.yul\":6440:6472   */\n      eq\n        /* \"#utility.yul\":6430:6432   */\n      tag_188\n      jumpi\n        /* \"#utility.yul\":6486:6487   */\n      0x00\n        /* \"#utility.yul\":6483:6484   */\n      dup1\n        /* \"#utility.yul\":6476:6488   */\n      revert\n\n    auxdata: 0xa26469706673582212204efd9fece93a08c3cef6a0909ab6a26c923655b4c86f742e2420ac62b26ee80864736f6c63430008000033\n}\n",
						"bytecode": {
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610dd1806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063a6dd4c66116100a2578063e6fd48bc11610071578063e6fd48bc146101d9578063eb990c59146101e1578063f019e2b2146101f4578063f2fde38b146101fc578063ff257dad1461020f5761010b565b8063a6dd4c661461018b578063a85717d3146101ab578063a85adeab146101be578063c44bef75146101c65761010b565b8063715018a6116100de578063715018a6146101605780637df6a6c8146101685780638da5cb5b1461017b5780638fd3ab80146101835761010b565b8063392e53cd146101105780633ccfd60b1461012e5780635294385b146101385780635d2b6a0c1461014b575b600080fd5b610118610217565b6040516101259190610b95565b60405180910390f35b610136610227565b005b610136610146366004610b14565b61039a565b6101536103de565b6040516101259190610b44565b6101366103ed565b610136610176366004610b14565b610438565b61015361047c565b61013661048b565b61019e610199366004610a81565b610680565b6040516101259190610d60565b6101366101b9366004610adc565b610692565b61019e6106ef565b6101366101d4366004610b14565b6106f5565b61019e610739565b6101366101ef366004610a9b565b61073f565b61019e61080f565b61013661020a366004610a81565b610815565b610153610886565b606954600160a01b900460ff1681565b61022f610895565b6001600160a01b031661024061047c565b6001600160a01b03161461026f5760405162461bcd60e51b815260040161026690610c94565b60405180910390fd5b60655442116102905760405162461bcd60e51b815260040161026690610ba0565b6068546040516370a0823160e01b81526000916001600160a01b0316906370a08231906102c1903090600401610b44565b60206040518083038186803b1580156102d957600080fd5b505afa1580156102ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103119190610b2c565b60685460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906103449033908590600401610b7c565b602060405180830381600087803b15801561035e57600080fd5b505af1158015610372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103969190610af8565b5050565b6103a2610895565b6001600160a01b03166103b361047c565b6001600160a01b0316146103d95760405162461bcd60e51b815260040161026690610c94565b606755565b6069546001600160a01b031681565b6103f5610895565b6001600160a01b031661040661047c565b6001600160a01b03161461042c5760405162461bcd60e51b815260040161026690610c94565b6104366000610899565b565b610440610895565b6001600160a01b031661045161047c565b6001600160a01b0316146104775760405162461bcd60e51b815260040161026690610c94565b606555565b6033546001600160a01b031690565b606954600160a01b900460ff166104b45760405162461bcd60e51b815260040161026690610bd7565b6069546040516370a0823160e01b81526000916001600160a01b0316906370a08231906104e5903390600401610b44565b60206040518083038186803b1580156104fd57600080fd5b505afa158015610511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105359190610b2c565b90506067548111156105595760405162461bcd60e51b815260040161026690610cc9565b426066541061057a5760405162461bcd60e51b815260040161026690610d37565b606554421061059b5760405162461bcd60e51b815260040161026690610d00565b6069546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906105cf90339030908690600401610b58565b602060405180830381600087803b1580156105e957600080fd5b505af11580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106219190610af8565b50336000908152606a602052604090205461063c90826108eb565b336000818152606a60205260409081902092909255606854915163a9059cbb60e01b81526001600160a01b039092169163a9059cbb91610344918590600401610b7c565b606a6020526000908152604090205481565b61069a610895565b6001600160a01b03166106ab61047c565b6001600160a01b0316146106d15760405162461bcd60e51b815260040161026690610c94565b60698054911515600160a01b0260ff60a01b19909216919091179055565b60655481565b6106fd610895565b6001600160a01b031661070e61047c565b6001600160a01b0316146107345760405162461bcd60e51b815260040161026690610c94565b606655565b60665481565b600054610100900460ff1680610758575060005460ff16155b6107745760405162461bcd60e51b815260040161026690610c46565b600054610100900460ff1615801561079f576000805460ff1961ff0019909116610100171660011790555b6107a76108fe565b606880546001600160a01b038088166001600160a01b031992831617909255606980546066879055606586905560ff60a01b1993881692169190911791909116905568068155a43676e000006067558015610808576000805461ff00191690555b5050505050565b60675481565b61081d610895565b6001600160a01b031661082e61047c565b6001600160a01b0316146108545760405162461bcd60e51b815260040161026690610c94565b6001600160a01b03811661087a5760405162461bcd60e51b815260040161026690610c00565b61088381610899565b50565b6068546001600160a01b031681565b3390565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006108f78284610d69565b9392505050565b600054610100900460ff1680610917575060005460ff16155b6109335760405162461bcd60e51b815260040161026690610c46565b600054610100900460ff1615801561095e576000805460ff1961ff0019909116610100171660011790555b610966610982565b61096e6109f5565b8015610883576000805461ff001916905550565b600054610100900460ff168061099b575060005460ff16155b6109b75760405162461bcd60e51b815260040161026690610c46565b600054610100900460ff1615801561096e576000805460ff1961ff0019909116610100171660011790558015610883576000805461ff001916905550565b600054610100900460ff1680610a0e575060005460ff16155b610a2a5760405162461bcd60e51b815260040161026690610c46565b600054610100900460ff16158015610a55576000805460ff1961ff0019909116610100171660011790555b61096e610a60610895565b610899565b80356001600160a01b0381168114610a7c57600080fd5b919050565b600060208284031215610a92578081fd5b6108f782610a65565b60008060008060808587031215610ab0578283fd5b610ab985610a65565b9350610ac760208601610a65565b93969395505050506040820135916060013590565b600060208284031215610aed578081fd5b81356108f781610d8d565b600060208284031215610b09578081fd5b81516108f781610d8d565b600060208284031215610b25578081fd5b5035919050565b600060208284031215610b3d578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6020808252601e908201527f7377617070696e67206f66206153454120686173206e6f7420656e6465640000604082015260600190565b6020808252600f908201526e1b9bdd081a5b9a5d1a585b1a5e9959608a1b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f457863656564207468652073706563696669656420616d6f756e740000000000604082015260600190565b6020808252601a908201527f7377617070696e67206f6620615345412068617320656e646564000000000000604082015260600190565b6020808252600f908201526e139bdd081cdd185c9d1959081e595d608a1b604082015260600190565b90815260200190565b60008219821115610d8857634e487b7160e01b81526011600452602481fd5b500190565b801515811461088357600080fdfea26469706673582212204efd9fece93a08c3cef6a0909ab6a26c923655b4c86f742e2420ac62b26ee80864736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDD1 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA6DD4C66 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xE6FD48BC GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE6FD48BC EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xEB990C59 EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0xF019E2B2 EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xFF257DAD EQ PUSH2 0x20F JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0xA6DD4C66 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0xA85717D3 EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0xA85ADEAB EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0xC44BEF75 EQ PUSH2 0x1C6 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0x7DF6A6C8 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x17B JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0x183 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x392E53CD EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x5294385B EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x5D2B6A0C EQ PUSH2 0x14B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x217 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0xB95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x136 PUSH2 0x227 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x136 PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0xB14 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST PUSH2 0x153 PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0xB44 JUMP JUMPDEST PUSH2 0x136 PUSH2 0x3ED JUMP JUMPDEST PUSH2 0x136 PUSH2 0x176 CALLDATASIZE PUSH1 0x4 PUSH2 0xB14 JUMP JUMPDEST PUSH2 0x438 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x136 PUSH2 0x48B JUMP JUMPDEST PUSH2 0x19E PUSH2 0x199 CALLDATASIZE PUSH1 0x4 PUSH2 0xA81 JUMP JUMPDEST PUSH2 0x680 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0xD60 JUMP JUMPDEST PUSH2 0x136 PUSH2 0x1B9 CALLDATASIZE PUSH1 0x4 PUSH2 0xADC JUMP JUMPDEST PUSH2 0x692 JUMP JUMPDEST PUSH2 0x19E PUSH2 0x6EF JUMP JUMPDEST PUSH2 0x136 PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0xB14 JUMP JUMPDEST PUSH2 0x6F5 JUMP JUMPDEST PUSH2 0x19E PUSH2 0x739 JUMP JUMPDEST PUSH2 0x136 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0xA9B JUMP JUMPDEST PUSH2 0x73F JUMP JUMPDEST PUSH2 0x19E PUSH2 0x80F JUMP JUMPDEST PUSH2 0x136 PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0xA81 JUMP JUMPDEST PUSH2 0x815 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x886 JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x240 PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x26F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x65 SLOAD TIMESTAMP GT PUSH2 0x290 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xBA0 JUMP JUMPDEST PUSH1 0x68 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x2C1 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0xB44 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x311 SWAP2 SWAP1 PUSH2 0xB2C JUMP JUMPDEST PUSH1 0x68 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x344 SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xB7C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x372 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x396 SWAP2 SWAP1 PUSH2 0xAF8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3A2 PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3B3 PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH1 0x67 SSTORE JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x3F5 PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x406 PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x42C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH2 0x436 PUSH1 0x0 PUSH2 0x899 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x440 PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x451 PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x477 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH1 0x65 SSTORE JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x4B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xBD7 JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x4E5 SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0xB44 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x511 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x535 SWAP2 SWAP1 PUSH2 0xB2C JUMP JUMPDEST SWAP1 POP PUSH1 0x67 SLOAD DUP2 GT ISZERO PUSH2 0x559 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xCC9 JUMP JUMPDEST TIMESTAMP PUSH1 0x66 SLOAD LT PUSH2 0x57A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xD37 JUMP JUMPDEST PUSH1 0x65 SLOAD TIMESTAMP LT PUSH2 0x59B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xD00 JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x5CF SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0xB58 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x621 SWAP2 SWAP1 PUSH2 0xAF8 JUMP JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x63C SWAP1 DUP3 PUSH2 0x8EB JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x68 SLOAD SWAP2 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x344 SWAP2 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xB7C JUMP JUMPDEST PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x69A PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6AB PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH1 0x69 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x65 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x6FD PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x70E PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x734 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH1 0x66 SSTORE JUMP JUMPDEST PUSH1 0x66 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x758 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x774 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x79F JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x7A7 PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x68 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x69 DUP1 SLOAD PUSH1 0x66 DUP8 SWAP1 SSTORE PUSH1 0x65 DUP7 SWAP1 SSTORE PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP4 DUP9 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 AND SWAP1 SSTORE PUSH9 0x68155A43676E00000 PUSH1 0x67 SSTORE DUP1 ISZERO PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x67 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x81D PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x82E PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x854 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x87A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC00 JUMP JUMPDEST PUSH2 0x883 DUP2 PUSH2 0x899 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x68 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F7 DUP3 DUP5 PUSH2 0xD69 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x917 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x933 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x95E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x966 PUSH2 0x982 JUMP JUMPDEST PUSH2 0x96E PUSH2 0x9F5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x883 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x99B JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x9B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x96E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x883 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xA0E JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xA2A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xA55 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x96E PUSH2 0xA60 PUSH2 0x895 JUMP JUMPDEST PUSH2 0x899 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA92 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8F7 DUP3 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xAB0 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xAB9 DUP6 PUSH2 0xA65 JUMP JUMPDEST SWAP4 POP PUSH2 0xAC7 PUSH1 0x20 DUP7 ADD PUSH2 0xA65 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAED JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8F7 DUP2 PUSH2 0xD8D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB09 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8F7 DUP2 PUSH2 0xD8D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB25 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB3D JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x7377617070696E67206F66206153454120686173206E6F7420656E6465640000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x1B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x457863656564207468652073706563696669656420616D6F756E740000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x7377617070696E67206F6620615345412068617320656E646564000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x139BDD081CDD185C9D1959081E595D PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xD88 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x883 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E REVERT SWAP16 0xEC 0xE9 GASPRICE ADDMOD 0xC3 0xCE 0xF6 LOG0 SWAP1 SWAP11 0xB6 LOG2 PUSH13 0x923655B4C86F742E2420AC62B2 PUSH15 0xE80864736F6C634300080000330000 ",
							"sourceMap": "459:2522:7:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:6498:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "65:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "75:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "97:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "84:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "84:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "75:5:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "167:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "176:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "179:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "169:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "169:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "169:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "126:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "137:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "152:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "157:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "148:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "148:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "161:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "144:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "144:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "133:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "133:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "123:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "123:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "116:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "116:50:8"
															},
															"nodeType": "YulIf",
															"src": "113:2:8"
														}
													]
												},
												"name": "abi_decode_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "44:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "55:5:8",
														"type": ""
													}
												],
												"src": "14:175:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "264:128:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "310:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "319:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "327:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "312:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "312:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "312:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "285:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "294:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "281:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "281:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "306:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "277:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "277:32:8"
															},
															"nodeType": "YulIf",
															"src": "274:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "345:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "376:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "355:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "355:31:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "345:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "230:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "241:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "253:6:8",
														"type": ""
													}
												],
												"src": "194:198:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "518:290:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "565:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "574:6:8"
																				},
																				{
																					"name": "value1",
																					"nodeType": "YulIdentifier",
																					"src": "582:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "567:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "567:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "567:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "539:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "548:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "535:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "535:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "560:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "531:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "531:33:8"
															},
															"nodeType": "YulIf",
															"src": "528:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "600:41:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "631:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "610:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "610:31:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "600:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "650:50:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "685:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "696:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "681:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "681:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_t_address",
																	"nodeType": "YulIdentifier",
																	"src": "660:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "660:40:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "650:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "709:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "736:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "747:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "732:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "732:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "719:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "719:32:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "709:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "760:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "787:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "798:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "783:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "783:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "770:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "770:32:8"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "760:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "460:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "471:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "483:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "491:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "499:6:8",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "507:6:8",
														"type": ""
													}
												],
												"src": "397:411:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "880:186:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "926:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "935:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "943:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "928:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "928:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "928:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "901:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "910:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "897:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "897:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "922:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "893:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "893:32:8"
															},
															"nodeType": "YulIf",
															"src": "890:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "961:36:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "987:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "974:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "974:23:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "965:5:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1030:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "1006:23:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1006:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1006:30:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1045:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1055:5:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1045:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "846:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "857:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "869:6:8",
														"type": ""
													}
												],
												"src": "813:253:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1149:179:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1195:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1204:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1212:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1197:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1197:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1197:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1170:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1179:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1166:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1166:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1191:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1162:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1162:32:8"
															},
															"nodeType": "YulIf",
															"src": "1159:2:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1230:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1249:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1243:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1243:16:8"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1234:5:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1292:5:8"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_bool",
																	"nodeType": "YulIdentifier",
																	"src": "1268:23:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1268:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1268:30:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1307:15:8",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1317:5:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1307:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1115:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1126:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1138:6:8",
														"type": ""
													}
												],
												"src": "1071:257:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1403:120:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1449:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1458:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1466:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1451:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1451:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1451:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1424:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1433:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1420:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1420:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1445:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1416:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1416:32:8"
															},
															"nodeType": "YulIf",
															"src": "1413:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1484:33:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1507:9:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1494:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1494:23:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1484:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1369:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1380:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1392:6:8",
														"type": ""
													}
												],
												"src": "1333:190:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1609:113:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1655:26:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1664:6:8"
																				},
																				{
																					"name": "value0",
																					"nodeType": "YulIdentifier",
																					"src": "1672:6:8"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1657:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1657:22:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1657:22:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1630:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1639:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1626:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1626:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1651:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1622:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1622:32:8"
															},
															"nodeType": "YulIf",
															"src": "1619:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1690:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1706:9:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1700:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1700:16:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1690:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1575:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1586:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1598:6:8",
														"type": ""
													}
												],
												"src": "1528:194:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1828:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1838:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1850:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1861:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1846:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1846:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1838:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1880:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1895:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1911:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1916:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1907:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1907:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1920:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1903:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1903:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1891:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1891:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1873:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1873:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1873:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1797:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1808:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1819:4:8",
														"type": ""
													}
												],
												"src": "1727:203:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2092:218:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2102:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2114:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2125:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2110:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2110:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2102:4:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2137:29:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2155:3:8",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2160:1:8",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2151:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2151:11:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2164:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "2147:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2147:19:8"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2141:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2182:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2197:6:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "2205:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2193:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2193:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2175:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2175:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2175:34:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2229:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2240:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2225:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2225:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "2249:6:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "2257:2:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2245:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2245:15:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2218:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2218:43:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2218:43:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2281:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2292:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2277:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2277:18:8"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "2297:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2270:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2270:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2270:34:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2045:9:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2056:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2064:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2072:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2083:4:8",
														"type": ""
													}
												],
												"src": "1935:375:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2444:145:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2454:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2466:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2477:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2462:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2462:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2454:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2496:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2511:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2527:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2532:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2523:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2523:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2536:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2519:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2519:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2507:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2507:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2489:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2489:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2489:51:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2560:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2571:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2556:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2556:18:8"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "2576:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2549:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2549:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2549:34:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2405:9:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2416:6:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2424:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2435:4:8",
														"type": ""
													}
												],
												"src": "2315:274:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2689:92:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2699:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2711:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2722:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2707:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2707:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2699:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2741:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "2766:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "2759:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2759:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "2752:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2752:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2734:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2734:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2734:41:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2658:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2669:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2680:4:8",
														"type": ""
													}
												],
												"src": "2594:187:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2912:102:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2922:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2934:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2945:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2930:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2930:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2922:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2964:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2979:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2995:3:8",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3000:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "2991:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2991:11:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3004:1:8",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "2987:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2987:19:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2975:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2975:32:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2957:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2957:51:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2957:51:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_contract$_IERC20Upgradeable_$248__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2881:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2892:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2903:4:8",
														"type": ""
													}
												],
												"src": "2786:228:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3193:180:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3210:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3221:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3203:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3203:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3203:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3244:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3255:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3240:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3240:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3260:2:8",
																		"type": "",
																		"value": "30"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3233:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3233:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3233:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3283:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3294:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3279:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3279:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3299:32:8",
																		"type": "",
																		"value": "swapping of aSEA has not ended"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3272:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3272:60:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3272:60:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3341:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3353:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3364:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3349:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3349:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3341:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_167bdf4db233099398a4e75df0cce134477a0cfaa0ab32a39d6a2c020158c29c__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3170:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3184:4:8",
														"type": ""
													}
												],
												"src": "3019:354:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3552:165:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3569:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3580:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3562:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3562:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3562:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3603:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3614:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3599:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3599:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3619:2:8",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3592:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3592:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3592:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3642:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3653:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3638:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3638:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3658:17:8",
																		"type": "",
																		"value": "not initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3631:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3631:45:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3631:45:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3685:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3697:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3708:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3693:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3693:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3685:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_23128ea0a9cf9f377be270d76b35163b9b8a58c0fa7025ab8017ab08d983de01__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3529:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3543:4:8",
														"type": ""
													}
												],
												"src": "3378:339:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3896:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3913:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3924:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3906:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3906:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3906:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3947:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3958:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3943:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3943:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3963:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3936:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3936:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3936:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3986:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3997:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3982:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3982:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4002:34:8",
																		"type": "",
																		"value": "Ownable: new owner is the zero a"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3975:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3975:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3975:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4057:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4068:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4053:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4053:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4073:8:8",
																		"type": "",
																		"value": "ddress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4046:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4046:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4046:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4091:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4103:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4114:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4099:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4099:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4091:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3873:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3887:4:8",
														"type": ""
													}
												],
												"src": "3722:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4303:236:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4320:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4331:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4313:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4313:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4313:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4354:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4365:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4350:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4350:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4370:2:8",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4343:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4343:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4343:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4393:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4404:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4389:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4389:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4409:34:8",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4382:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4382:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4382:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4464:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4475:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4460:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4460:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4480:16:8",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4453:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4453:44:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4453:44:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4506:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4518:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4529:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4514:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4514:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4506:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4280:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4294:4:8",
														"type": ""
													}
												],
												"src": "4129:410:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4718:182:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4735:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4746:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4728:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4728:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4728:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4769:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4780:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4765:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4765:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4785:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4758:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4758:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4758:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4808:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4819:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4804:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4804:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4824:34:8",
																		"type": "",
																		"value": "Ownable: caller is not the owner"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4797:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4797:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4797:62:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4868:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4880:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4891:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4876:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4876:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4868:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4695:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4709:4:8",
														"type": ""
													}
												],
												"src": "4544:356:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5079:177:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5096:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5107:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5089:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5089:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5089:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5130:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5141:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5126:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5126:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5146:2:8",
																		"type": "",
																		"value": "27"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5119:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5119:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5119:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5169:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5180:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5165:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5165:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5185:29:8",
																		"type": "",
																		"value": "Exceed the specified amount"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5158:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5158:57:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5158:57:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5224:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5236:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5247:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5232:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5232:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5224:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_a3ee5da1969f0746e379ed9b363878f678c4fa49b6667e89c78c6eb03f4b21e8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5056:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5070:4:8",
														"type": ""
													}
												],
												"src": "4905:351:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5435:176:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5452:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5463:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5445:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5445:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5445:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5486:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5497:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5482:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5482:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5502:2:8",
																		"type": "",
																		"value": "26"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5475:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5475:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5475:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5525:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5536:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5521:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5521:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5541:28:8",
																		"type": "",
																		"value": "swapping of aSEA has ended"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5514:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5514:56:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5514:56:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5579:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5591:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5602:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5587:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5587:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5579:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_b94db3bafb45b115f2077d66813f25c7b38f1499c474a6791223d97591faa96a__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5412:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5426:4:8",
														"type": ""
													}
												],
												"src": "5261:350:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5790:165:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5807:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5818:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5800:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5800:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5800:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5841:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5852:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5837:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5837:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5857:2:8",
																		"type": "",
																		"value": "15"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5830:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5830:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5830:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5880:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5891:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5876:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5876:18:8"
																	},
																	{
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5896:17:8",
																		"type": "",
																		"value": "Not started yet"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5869:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5869:45:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5869:45:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5923:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5935:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5946:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5931:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5931:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5923:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d50d58d9845759fa0f4f88546440afafe96f6ae942a43a12bfaee08bbfd20ab5__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5767:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5781:4:8",
														"type": ""
													}
												],
												"src": "5616:339:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6061:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "6071:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6083:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6094:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6079:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6079:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6071:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6113:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6124:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6106:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6106:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6106:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6030:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6041:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6052:4:8",
														"type": ""
													}
												],
												"src": "5960:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6190:181:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6225:115:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "6246:3:8"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6255:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6260:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "6251:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6251:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6239:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6239:33:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6239:33:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6292:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6295:4:8",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "6285:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6285:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6285:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "sum",
																					"nodeType": "YulIdentifier",
																					"src": "6320:3:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6325:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6313:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6313:17:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6313:17:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6206:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "6213:1:8"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "6209:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6209:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "6203:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6203:13:8"
															},
															"nodeType": "YulIf",
															"src": "6200:2:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6349:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "6360:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "6363:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6356:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6356:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "6349:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "6173:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "6176:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "6182:3:8",
														"type": ""
													}
												],
												"src": "6142:229:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6420:76:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "6474:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6483:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "6486:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6476:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6476:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6476:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "6443:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "6464:5:8"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "6457:6:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6457:13:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "6450:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6450:21:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "6440:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6440:32:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "6433:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6433:40:8"
															},
															"nodeType": "YulIf",
															"src": "6430:2:8"
														}
													]
												},
												"name": "validator_revert_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "6409:5:8",
														"type": ""
													}
												],
												"src": "6376:120:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_t_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_t_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_uint256(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value1, value1) }\n        value0 := abi_decode_t_address(headStart)\n        value1 := abi_decode_t_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        value3 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        validator_revert_t_bool(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        validator_revert_t_bool(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20Upgradeable_$248__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_stringliteral_167bdf4db233099398a4e75df0cce134477a0cfaa0ab32a39d6a2c020158c29c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"swapping of aSEA has not ended\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_23128ea0a9cf9f377be270d76b35163b9b8a58c0fa7025ab8017ab08d983de01__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"not initialized\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a3ee5da1969f0746e379ed9b363878f678c4fa49b6667e89c78c6eb03f4b21e8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 27)\n        mstore(add(headStart, 64), \"Exceed the specified amount\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_b94db3bafb45b115f2077d66813f25c7b38f1499c474a6791223d97591faa96a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 26)\n        mstore(add(headStart, 64), \"swapping of aSEA has ended\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_d50d58d9845759fa0f4f88546440afafe96f6ae942a43a12bfaee08bbfd20ab5__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 15)\n        mstore(add(headStart, 64), \"Not started yet\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(sum, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(sum, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function validator_revert_t_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061010b5760003560e01c8063a6dd4c66116100a2578063e6fd48bc11610071578063e6fd48bc146101d9578063eb990c59146101e1578063f019e2b2146101f4578063f2fde38b146101fc578063ff257dad1461020f5761010b565b8063a6dd4c661461018b578063a85717d3146101ab578063a85adeab146101be578063c44bef75146101c65761010b565b8063715018a6116100de578063715018a6146101605780637df6a6c8146101685780638da5cb5b1461017b5780638fd3ab80146101835761010b565b8063392e53cd146101105780633ccfd60b1461012e5780635294385b146101385780635d2b6a0c1461014b575b600080fd5b610118610217565b6040516101259190610b95565b60405180910390f35b610136610227565b005b610136610146366004610b14565b61039a565b6101536103de565b6040516101259190610b44565b6101366103ed565b610136610176366004610b14565b610438565b61015361047c565b61013661048b565b61019e610199366004610a81565b610680565b6040516101259190610d60565b6101366101b9366004610adc565b610692565b61019e6106ef565b6101366101d4366004610b14565b6106f5565b61019e610739565b6101366101ef366004610a9b565b61073f565b61019e61080f565b61013661020a366004610a81565b610815565b610153610886565b606954600160a01b900460ff1681565b61022f610895565b6001600160a01b031661024061047c565b6001600160a01b03161461026f5760405162461bcd60e51b815260040161026690610c94565b60405180910390fd5b60655442116102905760405162461bcd60e51b815260040161026690610ba0565b6068546040516370a0823160e01b81526000916001600160a01b0316906370a08231906102c1903090600401610b44565b60206040518083038186803b1580156102d957600080fd5b505afa1580156102ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103119190610b2c565b60685460405163a9059cbb60e01b81529192506001600160a01b03169063a9059cbb906103449033908590600401610b7c565b602060405180830381600087803b15801561035e57600080fd5b505af1158015610372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103969190610af8565b5050565b6103a2610895565b6001600160a01b03166103b361047c565b6001600160a01b0316146103d95760405162461bcd60e51b815260040161026690610c94565b606755565b6069546001600160a01b031681565b6103f5610895565b6001600160a01b031661040661047c565b6001600160a01b03161461042c5760405162461bcd60e51b815260040161026690610c94565b6104366000610899565b565b610440610895565b6001600160a01b031661045161047c565b6001600160a01b0316146104775760405162461bcd60e51b815260040161026690610c94565b606555565b6033546001600160a01b031690565b606954600160a01b900460ff166104b45760405162461bcd60e51b815260040161026690610bd7565b6069546040516370a0823160e01b81526000916001600160a01b0316906370a08231906104e5903390600401610b44565b60206040518083038186803b1580156104fd57600080fd5b505afa158015610511573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105359190610b2c565b90506067548111156105595760405162461bcd60e51b815260040161026690610cc9565b426066541061057a5760405162461bcd60e51b815260040161026690610d37565b606554421061059b5760405162461bcd60e51b815260040161026690610d00565b6069546040516323b872dd60e01b81526001600160a01b03909116906323b872dd906105cf90339030908690600401610b58565b602060405180830381600087803b1580156105e957600080fd5b505af11580156105fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106219190610af8565b50336000908152606a602052604090205461063c90826108eb565b336000818152606a60205260409081902092909255606854915163a9059cbb60e01b81526001600160a01b039092169163a9059cbb91610344918590600401610b7c565b606a6020526000908152604090205481565b61069a610895565b6001600160a01b03166106ab61047c565b6001600160a01b0316146106d15760405162461bcd60e51b815260040161026690610c94565b60698054911515600160a01b0260ff60a01b19909216919091179055565b60655481565b6106fd610895565b6001600160a01b031661070e61047c565b6001600160a01b0316146107345760405162461bcd60e51b815260040161026690610c94565b606655565b60665481565b600054610100900460ff1680610758575060005460ff16155b6107745760405162461bcd60e51b815260040161026690610c46565b600054610100900460ff1615801561079f576000805460ff1961ff0019909116610100171660011790555b6107a76108fe565b606880546001600160a01b038088166001600160a01b031992831617909255606980546066879055606586905560ff60a01b1993881692169190911791909116905568068155a43676e000006067558015610808576000805461ff00191690555b5050505050565b60675481565b61081d610895565b6001600160a01b031661082e61047c565b6001600160a01b0316146108545760405162461bcd60e51b815260040161026690610c94565b6001600160a01b03811661087a5760405162461bcd60e51b815260040161026690610c00565b61088381610899565b50565b6068546001600160a01b031681565b3390565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60006108f78284610d69565b9392505050565b600054610100900460ff1680610917575060005460ff16155b6109335760405162461bcd60e51b815260040161026690610c46565b600054610100900460ff1615801561095e576000805460ff1961ff0019909116610100171660011790555b610966610982565b61096e6109f5565b8015610883576000805461ff001916905550565b600054610100900460ff168061099b575060005460ff16155b6109b75760405162461bcd60e51b815260040161026690610c46565b600054610100900460ff1615801561096e576000805460ff1961ff0019909116610100171660011790558015610883576000805461ff001916905550565b600054610100900460ff1680610a0e575060005460ff16155b610a2a5760405162461bcd60e51b815260040161026690610c46565b600054610100900460ff16158015610a55576000805460ff1961ff0019909116610100171660011790555b61096e610a60610895565b610899565b80356001600160a01b0381168114610a7c57600080fd5b919050565b600060208284031215610a92578081fd5b6108f782610a65565b60008060008060808587031215610ab0578283fd5b610ab985610a65565b9350610ac760208601610a65565b93969395505050506040820135916060013590565b600060208284031215610aed578081fd5b81356108f781610d8d565b600060208284031215610b09578081fd5b81516108f781610d8d565b600060208284031215610b25578081fd5b5035919050565b600060208284031215610b3d578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b6020808252601e908201527f7377617070696e67206f66206153454120686173206e6f7420656e6465640000604082015260600190565b6020808252600f908201526e1b9bdd081a5b9a5d1a585b1a5e9959608a1b604082015260600190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601b908201527f457863656564207468652073706563696669656420616d6f756e740000000000604082015260600190565b6020808252601a908201527f7377617070696e67206f6620615345412068617320656e646564000000000000604082015260600190565b6020808252600f908201526e139bdd081cdd185c9d1959081e595d608a1b604082015260600190565b90815260200190565b60008219821115610d8857634e487b7160e01b81526011600452602481fd5b500190565b801515811461088357600080fdfea26469706673582212204efd9fece93a08c3cef6a0909ab6a26c923655b4c86f742e2420ac62b26ee80864736f6c63430008000033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x10B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA6DD4C66 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xE6FD48BC GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xE6FD48BC EQ PUSH2 0x1D9 JUMPI DUP1 PUSH4 0xEB990C59 EQ PUSH2 0x1E1 JUMPI DUP1 PUSH4 0xF019E2B2 EQ PUSH2 0x1F4 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0xFF257DAD EQ PUSH2 0x20F JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0xA6DD4C66 EQ PUSH2 0x18B JUMPI DUP1 PUSH4 0xA85717D3 EQ PUSH2 0x1AB JUMPI DUP1 PUSH4 0xA85ADEAB EQ PUSH2 0x1BE JUMPI DUP1 PUSH4 0xC44BEF75 EQ PUSH2 0x1C6 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x715018A6 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0x7DF6A6C8 EQ PUSH2 0x168 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x17B JUMPI DUP1 PUSH4 0x8FD3AB80 EQ PUSH2 0x183 JUMPI PUSH2 0x10B JUMP JUMPDEST DUP1 PUSH4 0x392E53CD EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x12E JUMPI DUP1 PUSH4 0x5294385B EQ PUSH2 0x138 JUMPI DUP1 PUSH4 0x5D2B6A0C EQ PUSH2 0x14B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x118 PUSH2 0x217 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0xB95 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x136 PUSH2 0x227 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x136 PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0xB14 JUMP JUMPDEST PUSH2 0x39A JUMP JUMPDEST PUSH2 0x153 PUSH2 0x3DE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0xB44 JUMP JUMPDEST PUSH2 0x136 PUSH2 0x3ED JUMP JUMPDEST PUSH2 0x136 PUSH2 0x176 CALLDATASIZE PUSH1 0x4 PUSH2 0xB14 JUMP JUMPDEST PUSH2 0x438 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x136 PUSH2 0x48B JUMP JUMPDEST PUSH2 0x19E PUSH2 0x199 CALLDATASIZE PUSH1 0x4 PUSH2 0xA81 JUMP JUMPDEST PUSH2 0x680 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x125 SWAP2 SWAP1 PUSH2 0xD60 JUMP JUMPDEST PUSH2 0x136 PUSH2 0x1B9 CALLDATASIZE PUSH1 0x4 PUSH2 0xADC JUMP JUMPDEST PUSH2 0x692 JUMP JUMPDEST PUSH2 0x19E PUSH2 0x6EF JUMP JUMPDEST PUSH2 0x136 PUSH2 0x1D4 CALLDATASIZE PUSH1 0x4 PUSH2 0xB14 JUMP JUMPDEST PUSH2 0x6F5 JUMP JUMPDEST PUSH2 0x19E PUSH2 0x739 JUMP JUMPDEST PUSH2 0x136 PUSH2 0x1EF CALLDATASIZE PUSH1 0x4 PUSH2 0xA9B JUMP JUMPDEST PUSH2 0x73F JUMP JUMPDEST PUSH2 0x19E PUSH2 0x80F JUMP JUMPDEST PUSH2 0x136 PUSH2 0x20A CALLDATASIZE PUSH1 0x4 PUSH2 0xA81 JUMP JUMPDEST PUSH2 0x815 JUMP JUMPDEST PUSH2 0x153 PUSH2 0x886 JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH2 0x22F PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x240 PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x26F JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x65 SLOAD TIMESTAMP GT PUSH2 0x290 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xBA0 JUMP JUMPDEST PUSH1 0x68 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x2C1 SWAP1 ADDRESS SWAP1 PUSH1 0x4 ADD PUSH2 0xB44 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2D9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2ED JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x311 SWAP2 SWAP1 PUSH2 0xB2C JUMP JUMPDEST PUSH1 0x68 SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH2 0x344 SWAP1 CALLER SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xB7C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x35E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x372 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x396 SWAP2 SWAP1 PUSH2 0xAF8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x3A2 PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x3B3 PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x3D9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH1 0x67 SSTORE JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x3F5 PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x406 PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x42C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH2 0x436 PUSH1 0x0 PUSH2 0x899 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x440 PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x451 PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x477 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH1 0x65 SSTORE JUMP JUMPDEST PUSH1 0x33 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH1 0x1 PUSH1 0xA0 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x4B4 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xBD7 JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH2 0x4E5 SWAP1 CALLER SWAP1 PUSH1 0x4 ADD PUSH2 0xB44 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x4FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x511 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x535 SWAP2 SWAP1 PUSH2 0xB2C JUMP JUMPDEST SWAP1 POP PUSH1 0x67 SLOAD DUP2 GT ISZERO PUSH2 0x559 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xCC9 JUMP JUMPDEST TIMESTAMP PUSH1 0x66 SLOAD LT PUSH2 0x57A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xD37 JUMP JUMPDEST PUSH1 0x65 SLOAD TIMESTAMP LT PUSH2 0x59B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xD00 JUMP JUMPDEST PUSH1 0x69 SLOAD PUSH1 0x40 MLOAD PUSH4 0x23B872DD PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH2 0x5CF SWAP1 CALLER SWAP1 ADDRESS SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0xB58 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x5E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x5FD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x621 SWAP2 SWAP1 PUSH2 0xAF8 JUMP JUMPDEST POP CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x63C SWAP1 DUP3 PUSH2 0x8EB JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x68 SLOAD SWAP2 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 PUSH4 0xA9059CBB SWAP2 PUSH2 0x344 SWAP2 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0xB7C JUMP JUMPDEST PUSH1 0x6A PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x69A PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x6AB PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x6D1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH1 0x69 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 SHL MUL PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x65 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x6FD PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x70E PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x734 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH1 0x66 SSTORE JUMP JUMPDEST PUSH1 0x66 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x758 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x774 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x79F JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x7A7 PUSH2 0x8FE JUMP JUMPDEST PUSH1 0x68 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP9 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 0x69 DUP1 SLOAD PUSH1 0x66 DUP8 SWAP1 SSTORE PUSH1 0x65 DUP7 SWAP1 SSTORE PUSH1 0xFF PUSH1 0xA0 SHL NOT SWAP4 DUP9 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP2 SWAP1 SWAP2 AND SWAP1 SSTORE PUSH9 0x68155A43676E00000 PUSH1 0x67 SSTORE DUP1 ISZERO PUSH2 0x808 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x67 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x81D PUSH2 0x895 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x82E PUSH2 0x47C JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x854 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC94 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x87A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC00 JUMP JUMPDEST PUSH2 0x883 DUP2 PUSH2 0x899 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x68 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 0x33 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8F7 DUP3 DUP5 PUSH2 0xD69 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x917 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x933 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x95E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x966 PUSH2 0x982 JUMP JUMPDEST PUSH2 0x96E PUSH2 0x9F5 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x883 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x99B JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0x9B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0x96E JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x883 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xA0E JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND ISZERO JUMPDEST PUSH2 0xA2A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x266 SWAP1 PUSH2 0xC46 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 ISZERO PUSH2 0xA55 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT PUSH2 0xFF00 NOT SWAP1 SWAP2 AND PUSH2 0x100 OR AND PUSH1 0x1 OR SWAP1 SSTORE JUMPDEST PUSH2 0x96E PUSH2 0xA60 PUSH2 0x895 JUMP JUMPDEST PUSH2 0x899 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xA7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA92 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x8F7 DUP3 PUSH2 0xA65 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xAB0 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0xAB9 DUP6 PUSH2 0xA65 JUMP JUMPDEST SWAP4 POP PUSH2 0xAC7 PUSH1 0x20 DUP7 ADD PUSH2 0xA65 JUMP JUMPDEST SWAP4 SWAP7 SWAP4 SWAP6 POP POP POP POP PUSH1 0x40 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 0x60 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xAED JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x8F7 DUP2 PUSH2 0xD8D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB09 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x8F7 DUP2 PUSH2 0xD8D JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB25 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB3D JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1E SWAP1 DUP3 ADD MSTORE PUSH32 0x7377617070696E67206F66206153454120686173206E6F7420656E6465640000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x1B9BDD081A5B9A5D1A585B1A5E9959 PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x26 SWAP1 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x40 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2E SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x40 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1B SWAP1 DUP3 ADD MSTORE PUSH32 0x457863656564207468652073706563696669656420616D6F756E740000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1A SWAP1 DUP3 ADD MSTORE PUSH32 0x7377617070696E67206F6620615345412068617320656E646564000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0xF SWAP1 DUP3 ADD MSTORE PUSH15 0x139BDD081CDD185C9D1959081E595D PUSH1 0x8A SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xD88 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x883 JUMPI PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4E REVERT SWAP16 0xEC 0xE9 GASPRICE ADDMOD 0xC3 0xCE 0xF6 LOG0 SWAP1 SWAP11 0xB6 LOG2 PUSH13 0x923655B4C86F742E2420AC62B2 PUSH15 0xE80864736F6C634300080000330000 ",
							"sourceMap": "459:2522:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;790:25;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2432:261;;;:::i;:::-;;2899:80;;;;;;:::i;:::-;;:::i;754:29::-;;;:::i;:::-;;;;;;;:::i;1934:101:0:-;;;:::i;2699:92:7:-;;;;;;:::i;:::-;;:::i;1302:85:0:-;;;:::i;1586:493:7:-;;;:::i;822:45::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;1497:83::-;;;;;;:::i;:::-;;:::i;623:27::-;;;:::i;2797:96::-;;;;;;:::i;:::-;;:::i;656:29::-;;;:::i;1082:409::-;;;;;;:::i;:::-;;:::i;692:21::-;;;:::i;2184:198:0:-;;;;;;:::i;:::-;;:::i;720:28:7:-;;;:::i;790:25::-;;;-1:-1:-1;;;790:25:7;;;;;:::o;2432:261::-;1525:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;;;;;;;;;2520:12:7::1;;2502:15;:30;2481:107;;;;-1:-1:-1::0;;;2481:107:7::1;;;;;;;:::i;:::-;2615:3;::::0;:28:::1;::::0;-1:-1:-1;;;2615:28:7;;2598:14:::1;::::0;-1:-1:-1;;;;;2615:3:7::1;::::0;:13:::1;::::0;:28:::1;::::0;2637:4:::1;::::0;2615:28:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2654:3;::::0;:32:::1;::::0;-1:-1:-1;;;2654:32:7;;2598:45;;-1:-1:-1;;;;;;2654:3:7::1;::::0;:12:::1;::::0;:32:::1;::::0;2667:10:::1;::::0;2598:45;;2654:32:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;1584:1:0;2432:261:7:o:0;2899:80::-;1525:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;2960:6:7::1;:12:::0;2899:80::o;754:29::-;;;-1:-1:-1;;;;;754:29:7;;:::o;1934:101:0:-;1525:12;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;1998:30:::1;2025:1;1998:18;:30::i;:::-;1934:101::o:0;2699:92:7:-;1525:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;2766:12:7::1;:18:::0;2699:92::o;1302:85:0:-;1374:6;;-1:-1:-1;;;;;1374:6:0;1302:85;:::o;1586:493:7:-;919:13;;-1:-1:-1;;;919:13:7;;;;911:41;;;;-1:-1:-1;;;911:41:7;;;;;;;:::i;:::-;1657:4:::1;::::0;:26:::1;::::0;-1:-1:-1;;;1657:26:7;;1640:14:::1;::::0;-1:-1:-1;;;;;1657:4:7::1;::::0;:14:::1;::::0;:26:::1;::::0;1672:10:::1;::::0;1657:26:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1640:43;;1711:6;;1701;:16;;1693:56;;;;-1:-1:-1::0;;;1693:56:7::1;;;;;;;:::i;:::-;1784:15;1767:14;;:32;1759:60;;;;-1:-1:-1::0;;;1759:60:7::1;;;;;;;:::i;:::-;1855:12;;1837:15;:30;1829:69;;;;-1:-1:-1::0;;;1829:69:7::1;;;;;;;:::i;:::-;1909:4;::::0;:52:::1;::::0;-1:-1:-1;;;1909:52:7;;-1:-1:-1;;;;;1909:4:7;;::::1;::::0;:17:::1;::::0;:52:::1;::::0;1927:10:::1;::::0;1947:4:::1;::::0;1954:6;;1909:52:::1;;;:::i;:::-;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;2007:10:7::1;1996:22;::::0;;;:10:::1;:22;::::0;;;;;:34:::1;::::0;2023:6;1996:26:::1;:34::i;:::-;1982:10;1971:22;::::0;;;:10:::1;:22;::::0;;;;;;:59;;;;2040:3:::1;::::0;:32;;-1:-1:-1;;;2040:32:7;;-1:-1:-1;;;;;2040:3:7;;::::1;::::0;:12:::1;::::0;:32:::1;::::0;2065:6;;2040:32:::1;;;:::i;822:45::-:0;;;;;;;;;;;;;:::o;1497:83::-;1525:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;1552:13:7::1;:21:::0;;;::::1;;-1:-1:-1::0;;;1552:21:7::1;-1:-1:-1::0;;;;1552:21:7;;::::1;::::0;;;::::1;::::0;;1497:83::o;623:27::-;;;;:::o;2797:96::-;1525:12:0;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;2866:14:7::1;:20:::0;2797:96::o;656:29::-;;;;:::o;1082:409::-;539:13:1;;;;;;;;:30;;-1:-1:-1;557:12:1;;;;556:13;539:30;531:89;;;;-1:-1:-1;;;531:89:1;;;;;;;:::i;:::-;631:19;654:13;;;;;;653:14;677:98;;;;711:13;:20;;-1:-1:-1;;;;711:20:1;;;;;745:19;727:4;745:19;;;677:98;1248:16:7::1;:14;:16::i;:::-;1274:3;:29:::0;;-1:-1:-1;;;;;1274:29:7;;::::1;-1:-1:-1::0;;;;;;1274:29:7;;::::1;;::::0;;;1313:4:::1;:31:::0;;1354:14:::1;:32:::0;;;1396:12:::1;:28:::0;;;-1:-1:-1;;;;1313:31:7;;::::1;::::0;::::1;::::0;;;::::1;1434:21:::0;;;::::1;::::0;;1474:10:::1;1465:6;:19:::0;797:66:1;;;;847:5;831:21;;-1:-1:-1;;831:21:1;;;797:66;1082:409:7;;;;;:::o;692:21::-;;;;:::o;2184:198:0:-;1525:12;:10;:12::i;:::-;-1:-1:-1;;;;;1514:23:0;:7;:5;:7::i;:::-;-1:-1:-1;;;;;1514:23:0;;1506:68;;;;-1:-1:-1;;;1506:68:0;;;;;;;:::i;:::-;-1:-1:-1;;;;;2272:22:0;::::1;2264:73;;;;-1:-1:-1::0;;;2264:73:0::1;;;;;;;:::i;:::-;2347:28;2366:8;2347:18;:28::i;:::-;2184:198:::0;:::o;720:28:7:-;;;-1:-1:-1;;;;;720:28:7;;:::o;876:96:5:-;955:10;876:96;:::o;2536:187:0:-;2628:6;;;-1:-1:-1;;;;;2644:17:0;;;-1:-1:-1;;;;;;2644:17:0;;;;;;;2676:40;;2628:6;;;2644:17;2628:6;;2676:40;;2609:16;;2676:40;2536:187;;:::o;2752:96:6:-;2810:7;2836:5;2840:1;2836;:5;:::i;:::-;2829:12;2752:96;-1:-1:-1;;;2752:96:6:o;988:126:0:-;539:13:1;;;;;;;;:30;;-1:-1:-1;557:12:1;;;;556:13;539:30;531:89;;;;-1:-1:-1;;;531:89:1;;;;;;;:::i;:::-;631:19;654:13;;;;;;653:14;677:98;;;;711:13;:20;;-1:-1:-1;;;;711:20:1;;;;;745:19;727:4;745:19;;;677:98;1045:26:0::1;:24;:26::i;:::-;1081;:24;:26::i;:::-;801:14:1::0;797:66;;;847:5;831:21;;-1:-1:-1;;831:21:1;;;988:126:0;:::o;807:64:5:-;539:13:1;;;;;;;;:30;;-1:-1:-1;557:12:1;;;;556:13;539:30;531:89;;;;-1:-1:-1;;;531:89:1;;;;;;;:::i;:::-;631:19;654:13;;;;;;653:14;677:98;;;;711:13;:20;;-1:-1:-1;;;;711:20:1;;;;;745:19;727:4;745:19;;;801:14;797:66;;;847:5;831:21;;-1:-1:-1;;831:21:1;;;807:64:5;:::o;1120:106:0:-;539:13:1;;;;;;;;:30;;-1:-1:-1;557:12:1;;;;556:13;539:30;531:89;;;;-1:-1:-1;;;531:89:1;;;;;;;:::i;:::-;631:19;654:13;;;;;;653:14;677:98;;;;711:13;:20;;-1:-1:-1;;;;711:20:1;;;;;745:19;727:4;745:19;;;677:98;1187:32:0::1;1206:12;:10;:12::i;:::-;1187:18;:32::i;14:175:8:-:0;84:20;;-1:-1:-1;;;;;133:31:8;;123:42;;113:2;;179:1;176;169:12;113:2;65:124;;;:::o;194:198::-;;306:2;294:9;285:7;281:23;277:32;274:2;;;327:6;319;312:22;274:2;355:31;376:9;355:31;:::i;397:411::-;;;;;560:3;548:9;539:7;535:23;531:33;528:2;;;582:6;574;567:22;528:2;610:31;631:9;610:31;:::i;:::-;600:41;;660:40;696:2;685:9;681:18;660:40;:::i;:::-;518:290;;650:50;;-1:-1:-1;;;;747:2:8;732:18;;719:32;;798:2;783:18;770:32;;518:290::o;813:253::-;;922:2;910:9;901:7;897:23;893:32;890:2;;;943:6;935;928:22;890:2;987:9;974:23;1006:30;1030:5;1006:30;:::i;1071:257::-;;1191:2;1179:9;1170:7;1166:23;1162:32;1159:2;;;1212:6;1204;1197:22;1159:2;1249:9;1243:16;1268:30;1292:5;1268:30;:::i;1333:190::-;;1445:2;1433:9;1424:7;1420:23;1416:32;1413:2;;;1466:6;1458;1451:22;1413:2;-1:-1:-1;1494:23:8;;1403:120;-1:-1:-1;1403:120:8:o;1528:194::-;;1651:2;1639:9;1630:7;1626:23;1622:32;1619:2;;;1672:6;1664;1657:22;1619:2;-1:-1:-1;1700:16:8;;1609:113;-1:-1:-1;1609:113:8:o;1727:203::-;-1:-1:-1;;;;;1891:32:8;;;;1873:51;;1861:2;1846:18;;1828:102::o;1935:375::-;-1:-1:-1;;;;;2193:15:8;;;2175:34;;2245:15;;;;2240:2;2225:18;;2218:43;2292:2;2277:18;;2270:34;;;;2125:2;2110:18;;2092:218::o;2315:274::-;-1:-1:-1;;;;;2507:32:8;;;;2489:51;;2571:2;2556:18;;2549:34;2477:2;2462:18;;2444:145::o;2594:187::-;2759:14;;2752:22;2734:41;;2722:2;2707:18;;2689:92::o;3019:354::-;3221:2;3203:21;;;3260:2;3240:18;;;3233:30;3299:32;3294:2;3279:18;;3272:60;3364:2;3349:18;;3193:180::o;3378:339::-;3580:2;3562:21;;;3619:2;3599:18;;;3592:30;-1:-1:-1;;;3653:2:8;3638:18;;3631:45;3708:2;3693:18;;3552:165::o;3722:402::-;3924:2;3906:21;;;3963:2;3943:18;;;3936:30;4002:34;3997:2;3982:18;;3975:62;-1:-1:-1;;;4068:2:8;4053:18;;4046:36;4114:3;4099:19;;3896:228::o;4129:410::-;4331:2;4313:21;;;4370:2;4350:18;;;4343:30;4409:34;4404:2;4389:18;;4382:62;-1:-1:-1;;;4475:2:8;4460:18;;4453:44;4529:3;4514:19;;4303:236::o;4544:356::-;4746:2;4728:21;;;4765:18;;;4758:30;4824:34;4819:2;4804:18;;4797:62;4891:2;4876:18;;4718:182::o;4905:351::-;5107:2;5089:21;;;5146:2;5126:18;;;5119:30;5185:29;5180:2;5165:18;;5158:57;5247:2;5232:18;;5079:177::o;5261:350::-;5463:2;5445:21;;;5502:2;5482:18;;;5475:30;5541:28;5536:2;5521:18;;5514:56;5602:2;5587:18;;5435:176::o;5616:339::-;5818:2;5800:21;;;5857:2;5837:18;;;5830:30;-1:-1:-1;;;5891:2:8;5876:18;;5869:45;5946:2;5931:18;;5790:165::o;5960:177::-;6106:25;;;6094:2;6079:18;;6061:76::o;6142:229::-;;6213:1;6209:6;6206:1;6203:13;6200:2;;;-1:-1:-1;;;6239:33:8;;6295:4;6292:1;6285:15;6325:4;6246:3;6313:17;6200:2;-1:-1:-1;6356:9:8;;6190:181::o;6376:120::-;6464:5;6457:13;6450:21;6443:5;6440:32;6430:2;;6486:1;6483;6476:12"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "707400",
								"executionCost": "741",
								"totalCost": "708141"
							},
							"external": {
								"SEA()": "1180",
								"aSEA()": "1160",
								"endTimestamp()": "1095",
								"initialize(address,address,uint256,uint256)": "infinite",
								"isInitialized()": "1081",
								"maxAmt()": "1094",
								"migrate()": "infinite",
								"open(bool)": "22124",
								"owner()": "1137",
								"renounceOwnership()": "23530",
								"senderInfo(address)": "1275",
								"setEndTimestamp(uint256)": "21199",
								"setMaxAmt(uint256)": "21222",
								"setStartTimestamp(uint256)": "21243",
								"startTimestamp()": "1050",
								"transferOwnership(address)": "23790",
								"withdraw()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 459,
									"end": 2981,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "POP",
									"source": 7
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 459,
									"end": 2981,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204efd9fece93a08c3cef6a0909ab6a26c923655b4c86f742e2420ac62b26ee80864736f6c63430008000033",
									".code": [
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "A6DD4C66"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "E6FD48BC"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "E6FD48BC"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "EB990C59"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "F019E2B2"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "F2FDE38B"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "18"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "FF257DAD"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "tag",
											"source": 7,
											"value": "21"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "A6DD4C66"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "A85717D3"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "A85ADEAB"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "C44BEF75"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "tag",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "715018A6"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "715018A6"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "7DF6A6C8"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "8DA5CB5B"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "8FD3AB80"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "tag",
											"source": 7,
											"value": "22"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "392E53CD"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "3CCFD60B"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "5294385B"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "5D2B6A0C"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 459,
											"end": 2981,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "tag",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "tag",
											"source": 7,
											"value": "23"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "26"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "tag",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "RETURN",
											"source": 7
										},
										{
											"begin": 2432,
											"end": 2693,
											"name": "tag",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2432,
											"end": 2693,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2432,
											"end": 2693,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 2432,
											"end": 2693,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 2432,
											"end": 2693,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2432,
											"end": 2693,
											"name": "tag",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 2432,
											"end": 2693,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2432,
											"end": 2693,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "tag",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "tag",
											"source": 7,
											"value": "30"
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 754,
											"end": 783,
											"name": "tag",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 754,
											"end": 783,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 754,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 754,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 754,
											"end": 783,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 754,
											"end": 783,
											"name": "tag",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 754,
											"end": 783,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 754,
											"end": 783,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 754,
											"end": 783,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 754,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 754,
											"end": 783,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 754,
											"end": 783,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 754,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 754,
											"end": 783,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "tag",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "tag",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1586,
											"end": 2079,
											"name": "tag",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 1586,
											"end": 2079,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1586,
											"end": 2079,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 1586,
											"end": 2079,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 1586,
											"end": 2079,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "tag",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "50"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "tag",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "tag",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "25"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "53"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "tag",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "56"
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "tag",
											"source": 7,
											"value": "55"
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "57"
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 623,
											"end": 650,
											"name": "tag",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 623,
											"end": 650,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 623,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 623,
											"end": 650,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 623,
											"end": 650,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "tag",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "31"
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "tag",
											"source": 7,
											"value": "62"
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 656,
											"end": 685,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 656,
											"end": 685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 656,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 656,
											"end": 685,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 656,
											"end": 685,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "tag",
											"source": 7,
											"value": "16"
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "27"
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "tag",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 692,
											"end": 713,
											"name": "tag",
											"source": 7,
											"value": "17"
										},
										{
											"begin": 692,
											"end": 713,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 692,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 692,
											"end": 713,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 692,
											"end": 713,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "tag",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "50"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "tag",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 720,
											"end": 748,
											"name": "tag",
											"source": 7,
											"value": "19"
										},
										{
											"begin": 720,
											"end": 748,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 720,
											"end": 748,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "33"
										},
										{
											"begin": 720,
											"end": 748,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 720,
											"end": 748,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "tag",
											"source": 7,
											"value": "24"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "PUSH",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 790,
											"end": 815,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 790,
											"end": 815,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 790,
											"end": 815,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2432,
											"end": 2693,
											"name": "tag",
											"source": 7,
											"value": "28"
										},
										{
											"begin": 2432,
											"end": 2693,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "81"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "84"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2520,
											"end": 2532,
											"name": "PUSH",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 2520,
											"end": 2532,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2502,
											"end": 2517,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 2502,
											"end": 2532,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "90"
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "tag",
											"source": 7,
											"value": "88"
										},
										{
											"begin": 2481,
											"end": 2588,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2618,
											"name": "PUSH",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 2615,
											"end": 2618,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2598,
											"end": 2612,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2598,
											"end": 2612,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2615,
											"end": 2618,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2618,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2628,
											"name": "PUSH",
											"source": 7,
											"value": "70A08231"
										},
										{
											"begin": 2615,
											"end": 2628,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2637,
											"end": 2641,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 2637,
											"end": 2641,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "tag",
											"source": 7,
											"value": "91"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "EXTCODESIZE",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "tag",
											"source": 7,
											"value": "92"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "STATICCALL",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "tag",
											"source": 7,
											"value": "94"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "tag",
											"source": 7,
											"value": "95"
										},
										{
											"begin": 2615,
											"end": 2643,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2657,
											"name": "PUSH",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 2654,
											"end": 2657,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2598,
											"end": 2643,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2598,
											"end": 2643,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2654,
											"end": 2657,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2657,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2666,
											"name": "PUSH",
											"source": 7,
											"value": "A9059CBB"
										},
										{
											"begin": 2654,
											"end": 2666,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2667,
											"end": 2677,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 2667,
											"end": 2677,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2598,
											"end": 2643,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2598,
											"end": 2643,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "tag",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "EXTCODESIZE",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "tag",
											"source": 7,
											"value": "99"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "tag",
											"source": 7,
											"value": "101"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "103"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "tag",
											"source": 7,
											"value": "102"
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 2654,
											"end": 2686,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1584,
											"end": 1585,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2432,
											"end": 2693,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "tag",
											"source": 7,
											"value": "32"
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "106"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2960,
											"end": 2966,
											"name": "PUSH",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 2960,
											"end": 2972,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2899,
											"end": 2979,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 754,
											"end": 783,
											"name": "tag",
											"source": 7,
											"value": "34"
										},
										{
											"begin": 754,
											"end": 783,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 754,
											"end": 783,
											"name": "PUSH",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 754,
											"end": 783,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 754,
											"end": 783,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 754,
											"end": 783,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 754,
											"end": 783,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "113"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1998,
											"end": 2028,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 2025,
											"end": 2026,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1998,
											"end": 2016,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1998,
											"end": 2028,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1998,
											"end": 2028,
											"name": "tag",
											"source": 0,
											"value": "116"
										},
										{
											"begin": 1998,
											"end": 2028,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1934,
											"end": 2035,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "tag",
											"source": 7,
											"value": "41"
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "119"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "121"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2766,
											"end": 2778,
											"name": "PUSH",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 2766,
											"end": 2784,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2699,
											"end": 2791,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1374,
											"end": 1380,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 1374,
											"end": 1380,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1374,
											"end": 1380,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1302,
											"end": 1387,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 1586,
											"end": 2079,
											"name": "tag",
											"source": 7,
											"value": "47"
										},
										{
											"begin": 1586,
											"end": 2079,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 919,
											"end": 932,
											"name": "PUSH",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 919,
											"end": 932,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 919,
											"end": 932,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 919,
											"end": 932,
											"name": "DIV",
											"source": 7
										},
										{
											"begin": 919,
											"end": 932,
											"name": "PUSH",
											"source": 7,
											"value": "FF"
										},
										{
											"begin": 919,
											"end": 932,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 911,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 911,
											"end": 952,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 911,
											"end": 952,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 911,
											"end": 952,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 911,
											"end": 952,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 911,
											"end": 952,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 911,
											"end": 952,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 911,
											"end": 952,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 911,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 911,
											"end": 952,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 911,
											"end": 952,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "128"
										},
										{
											"begin": 911,
											"end": 952,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 911,
											"end": 952,
											"name": "tag",
											"source": 7,
											"value": "126"
										},
										{
											"begin": 911,
											"end": 952,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1661,
											"name": "PUSH",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 1657,
											"end": 1661,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "70A08231"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1640,
											"end": 1654,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1640,
											"end": 1654,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1657,
											"end": 1661,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1661,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1671,
											"name": "PUSH",
											"source": 7,
											"value": "70A08231"
										},
										{
											"begin": 1657,
											"end": 1671,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "130"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1672,
											"end": 1682,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1672,
											"end": 1682,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "45"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "tag",
											"source": 7,
											"value": "130"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "EXTCODESIZE",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "tag",
											"source": 7,
											"value": "131"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "STATICCALL",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "133"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "tag",
											"source": 7,
											"value": "133"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "134"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "96"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "tag",
											"source": 7,
											"value": "134"
										},
										{
											"begin": 1657,
											"end": 1683,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1640,
											"end": 1683,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1640,
											"end": 1683,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1711,
											"end": 1717,
											"name": "PUSH",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 1711,
											"end": 1717,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1701,
											"end": 1707,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1701,
											"end": 1717,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 1701,
											"end": 1717,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "135"
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "137"
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "tag",
											"source": 7,
											"value": "135"
										},
										{
											"begin": 1693,
											"end": 1749,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1784,
											"end": 1799,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 1767,
											"end": 1781,
											"name": "PUSH",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 1767,
											"end": 1781,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1767,
											"end": 1799,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "138"
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "140"
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "tag",
											"source": 7,
											"value": "138"
										},
										{
											"begin": 1759,
											"end": 1819,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1855,
											"end": 1867,
											"name": "PUSH",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 1855,
											"end": 1867,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1837,
											"end": 1852,
											"name": "TIMESTAMP",
											"source": 7
										},
										{
											"begin": 1837,
											"end": 1867,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "85"
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "143"
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "tag",
											"source": 7,
											"value": "141"
										},
										{
											"begin": 1829,
											"end": 1898,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1913,
											"name": "PUSH",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 1909,
											"end": 1913,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "23B872DD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1909,
											"end": 1913,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1913,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1913,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1913,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1926,
											"name": "PUSH",
											"source": 7,
											"value": "23B872DD"
										},
										{
											"begin": 1909,
											"end": 1926,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1927,
											"end": 1937,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1927,
											"end": 1937,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1947,
											"end": 1951,
											"name": "ADDRESS",
											"source": 7
										},
										{
											"begin": 1947,
											"end": 1951,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1960,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1954,
											"end": 1960,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "145"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "tag",
											"source": 7,
											"value": "144"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "SUB",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "EXTCODESIZE",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "tag",
											"source": 7,
											"value": "146"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "GAS",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "CALL",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "RETURNDATACOPY",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "tag",
											"source": 7,
											"value": "148"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "RETURNDATASIZE",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "NOT",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH",
											"source": 7,
											"value": "1F"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "103"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "tag",
											"source": 7,
											"value": "149"
										},
										{
											"begin": 1909,
											"end": 1961,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2007,
											"end": 2017,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1996,
											"end": 2018,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1996,
											"end": 2018,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1996,
											"end": 2018,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1996,
											"end": 2018,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1996,
											"end": 2006,
											"name": "PUSH",
											"source": 7,
											"value": "6A"
										},
										{
											"begin": 1996,
											"end": 2018,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1996,
											"end": 2018,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1996,
											"end": 2018,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1996,
											"end": 2018,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1996,
											"end": 2018,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1996,
											"end": 2018,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1996,
											"end": 2030,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 1996,
											"end": 2030,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2023,
											"end": 2029,
											"name": "DUP3",
											"source": 7
										},
										{
											"begin": 1996,
											"end": 2022,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "151"
										},
										{
											"begin": 1996,
											"end": 2030,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1996,
											"end": 2030,
											"name": "tag",
											"source": 7,
											"value": "150"
										},
										{
											"begin": 1996,
											"end": 2030,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1982,
											"end": 1992,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 1993,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 1971,
											"end": 1993,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 1993,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 1993,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 1981,
											"name": "PUSH",
											"source": 7,
											"value": "6A"
										},
										{
											"begin": 1971,
											"end": 1993,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 1971,
											"end": 1993,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 1993,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 1971,
											"end": 1993,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 1993,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 1993,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 1993,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 2030,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 2030,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 2030,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1971,
											"end": 2030,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2043,
											"name": "PUSH",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 2040,
											"end": 2043,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2072,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2072,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2040,
											"end": 2072,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2072,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2040,
											"end": 2043,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2043,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2043,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2043,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2052,
											"name": "PUSH",
											"source": 7,
											"value": "A9059CBB"
										},
										{
											"begin": 2040,
											"end": 2052,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2072,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "97"
										},
										{
											"begin": 2040,
											"end": 2072,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 2065,
											"end": 2071,
											"name": "DUP6",
											"source": 7
										},
										{
											"begin": 2065,
											"end": 2071,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2072,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 2040,
											"end": 2072,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 2040,
											"end": 2072,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "98"
										},
										{
											"begin": 2040,
											"end": 2072,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "tag",
											"source": 7,
											"value": "51"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "PUSH",
											"source": 7,
											"value": "6A"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 822,
											"end": 867,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "KECCAK256",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 822,
											"end": 867,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "tag",
											"source": 7,
											"value": "57"
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "158"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "159"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "160"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1552,
											"end": 1565,
											"name": "PUSH",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "MUL",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1552,
											"end": 1573,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1497,
											"end": 1580,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 623,
											"end": 650,
											"name": "tag",
											"source": 7,
											"value": "59"
										},
										{
											"begin": 623,
											"end": 650,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 623,
											"end": 650,
											"name": "PUSH",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 623,
											"end": 650,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 623,
											"end": 650,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 623,
											"end": 650,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "tag",
											"source": 7,
											"value": "63"
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "165"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "166"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2866,
											"end": 2880,
											"name": "PUSH",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 2866,
											"end": 2886,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 2797,
											"end": 2893,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 656,
											"end": 685,
											"name": "tag",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 656,
											"end": 685,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 656,
											"end": 685,
											"name": "PUSH",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 656,
											"end": 685,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 656,
											"end": 685,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 656,
											"end": 685,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "tag",
											"source": 7,
											"value": "70"
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "170"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 556,
											"end": 569,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "tag",
											"source": 1,
											"value": "170"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "171"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "173"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "tag",
											"source": 1,
											"value": "171"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 631,
											"end": 650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 653,
											"end": 667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "174"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 711,
											"end": 724,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 764,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "tag",
											"source": 1,
											"value": "174"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1248,
											"end": 1264,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 1248,
											"end": 1262,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "177"
										},
										{
											"begin": 1248,
											"end": 1264,
											"name": "JUMP",
											"source": 7,
											"value": "[in]"
										},
										{
											"begin": 1248,
											"end": 1264,
											"name": "tag",
											"source": 7,
											"value": "176"
										},
										{
											"begin": 1248,
											"end": 1264,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 1274,
											"end": 1277,
											"name": "PUSH",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 1274,
											"end": 1303,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1274,
											"end": 1303,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1274,
											"end": 1303,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1274,
											"end": 1303,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 1274,
											"end": 1303,
											"name": "AND",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1274,
											"end": 1303,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1274,
											"end": 1303,
											"name": "DUP4",
											"source": 7
										},
										{
											"begin": 1274,
											"end": 1303,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1274,
											"end": 1303,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 1274,
											"end": 1303,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1274,
											"end": 1303,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1274,
											"end": 1303,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1313,
											"end": 1317,
											"name": "PUSH",
											"source": 7,
											"value": "69"
										},
										{
											"begin": 1313,
											"end": 1344,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 1313,
											"end": 1344,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 1354,
											"end": 1368,
											"name": "PUSH",
											"source": 7,
											"value": "66"
										},
										{
											"begin": 1354,
											"end": 1386,
											"name": "DUP8",
											"source": 7
										},
										{
											"begin": 1354,
											"end": 1386,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1354,
											"end": 1386,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1396,
											"end": 1408,
											"name": "PUSH",
											"source": 7,
											"value": "65"
										},
										{
											"begin": 1396,
											"end": 1424,
											"name": "DUP7",
											"source": 7
										},
										{
											"begin": 1396,
											"end": 1424,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1396,
											"end": 1424,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1313,
											"end": 1344,
											"name": "SWAP4",
											"source": 7
										},
										{
											"begin": 1313,
											"end": 1344,
											"name": "DUP9",
											"source": 7
										},
										{
											"begin": 1313,
											"end": 1344,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1313,
											"end": 1344,
											"name": "SWAP3",
											"source": 7
										},
										{
											"begin": 1313,
											"end": 1344,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1313,
											"end": 1344,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1313,
											"end": 1344,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1313,
											"end": 1344,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1313,
											"end": 1344,
											"name": "OR",
											"source": 7
										},
										{
											"begin": 1434,
											"end": 1455,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1434,
											"end": 1455,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1434,
											"end": 1455,
											"name": "SWAP2",
											"source": 7
										},
										{
											"begin": 1434,
											"end": 1455,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 1434,
											"end": 1455,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 1434,
											"end": 1455,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 1474,
											"end": 1484,
											"name": "PUSH",
											"source": 7,
											"value": "68155A43676E00000"
										},
										{
											"begin": 1465,
											"end": 1471,
											"name": "PUSH",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 1465,
											"end": 1484,
											"name": "SSTORE",
											"source": 7
										},
										{
											"begin": 797,
											"end": 863,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "178"
										},
										{
											"begin": 797,
											"end": 863,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 847,
											"end": 852,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 831,
											"end": 852,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "tag",
											"source": 1,
											"value": "178"
										},
										{
											"begin": 797,
											"end": 863,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 1082,
											"end": 1491,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 692,
											"end": 713,
											"name": "tag",
											"source": 7,
											"value": "72"
										},
										{
											"begin": 692,
											"end": 713,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 692,
											"end": 713,
											"name": "PUSH",
											"source": 7,
											"value": "67"
										},
										{
											"begin": 692,
											"end": 713,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": 692,
											"end": 713,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 692,
											"end": 713,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "tag",
											"source": 0,
											"value": "76"
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 1525,
											"end": 1535,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "tag",
											"source": 0,
											"value": "180"
										},
										{
											"begin": 1525,
											"end": 1537,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 1514,
											"end": 1519,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "tag",
											"source": 0,
											"value": "181"
										},
										{
											"begin": 1514,
											"end": 1521,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1514,
											"end": 1537,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "86"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "tag",
											"source": 0,
											"value": "182"
										},
										{
											"begin": 1506,
											"end": 1574,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2272,
											"end": 2294,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2272,
											"end": 2294,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "85"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "187"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "tag",
											"source": 0,
											"value": "185"
										},
										{
											"begin": 2264,
											"end": 2337,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2347,
											"end": 2375,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 2366,
											"end": 2374,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2347,
											"end": 2365,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2347,
											"end": 2375,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 2347,
											"end": 2375,
											"name": "tag",
											"source": 0,
											"value": "188"
										},
										{
											"begin": 2347,
											"end": 2375,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2184,
											"end": 2382,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 720,
											"end": 748,
											"name": "tag",
											"source": 7,
											"value": "78"
										},
										{
											"begin": 720,
											"end": 748,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 720,
											"end": 748,
											"name": "PUSH",
											"source": 7,
											"value": "68"
										},
										{
											"begin": 720,
											"end": 748,
											"name": "SLOAD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 720,
											"end": 748,
											"name": "AND",
											"source": 7
										},
										{
											"begin": 720,
											"end": 748,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 720,
											"end": 748,
											"name": "JUMP",
											"source": 7,
											"value": "[out]"
										},
										{
											"begin": 876,
											"end": 972,
											"name": "tag",
											"source": 5,
											"value": "82"
										},
										{
											"begin": 876,
											"end": 972,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 955,
											"end": 965,
											"name": "CALLER",
											"source": 5
										},
										{
											"begin": 876,
											"end": 972,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 876,
											"end": 972,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "tag",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "PUSH",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2644,
											"end": 2661,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2628,
											"end": 2634,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2609,
											"end": 2625,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2609,
											"end": 2625,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2676,
											"end": 2716,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 2536,
											"end": 2723,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 2752,
											"end": 2848,
											"name": "tag",
											"source": 6,
											"value": "151"
										},
										{
											"begin": 2752,
											"end": 2848,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2810,
											"end": 2817,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 2836,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 2840,
											"end": 2841,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2836,
											"end": 2837,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 2836,
											"end": 2841,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "193"
										},
										{
											"begin": 2836,
											"end": 2841,
											"name": "JUMP",
											"source": 6,
											"value": "[in]"
										},
										{
											"begin": 2836,
											"end": 2841,
											"name": "tag",
											"source": 6,
											"value": "192"
										},
										{
											"begin": 2836,
											"end": 2841,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 2829,
											"end": 2841,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 2752,
											"end": 2848,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2752,
											"end": 2848,
											"name": "JUMP",
											"source": 6,
											"value": "[out]"
										},
										{
											"begin": 988,
											"end": 1114,
											"name": "tag",
											"source": 0,
											"value": "177"
										},
										{
											"begin": 988,
											"end": 1114,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "195"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 556,
											"end": 569,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "tag",
											"source": 1,
											"value": "195"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "196"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "173"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "tag",
											"source": 1,
											"value": "196"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 631,
											"end": 650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 653,
											"end": 667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "198"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 711,
											"end": 724,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 764,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "tag",
											"source": 1,
											"value": "198"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1045,
											"end": 1071,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 1045,
											"end": 1069,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "201"
										},
										{
											"begin": 1045,
											"end": 1071,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1045,
											"end": 1071,
											"name": "tag",
											"source": 0,
											"value": "200"
										},
										{
											"begin": 1045,
											"end": 1071,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1081,
											"end": 1107,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 1081,
											"end": 1105,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 1081,
											"end": 1107,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1081,
											"end": 1107,
											"name": "tag",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 1081,
											"end": 1107,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 801,
											"end": 815,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "188"
										},
										{
											"begin": 797,
											"end": 863,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 847,
											"end": 852,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 831,
											"end": 852,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 988,
											"end": 1114,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 988,
											"end": 1114,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 807,
											"end": 871,
											"name": "tag",
											"source": 5,
											"value": "201"
										},
										{
											"begin": 807,
											"end": 871,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "206"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 556,
											"end": 569,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "tag",
											"source": 1,
											"value": "206"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "207"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "173"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "tag",
											"source": 1,
											"value": "207"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 631,
											"end": 650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 653,
											"end": 667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "202"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 711,
											"end": 724,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 764,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 801,
											"end": 815,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 797,
											"end": 863,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "188"
										},
										{
											"begin": 797,
											"end": 863,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 847,
											"end": 852,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 831,
											"end": 852,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 831,
											"end": 852,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 807,
											"end": 871,
											"name": "POP",
											"source": 5
										},
										{
											"begin": 807,
											"end": 871,
											"name": "JUMP",
											"source": 5,
											"value": "[out]"
										},
										{
											"begin": 1120,
											"end": 1226,
											"name": "tag",
											"source": 0,
											"value": "203"
										},
										{
											"begin": 1120,
											"end": 1226,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 539,
											"end": 552,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 539,
											"end": 552,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "213"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 557,
											"end": 569,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 557,
											"end": 569,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 556,
											"end": 569,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 539,
											"end": 569,
											"name": "tag",
											"source": 1,
											"value": "213"
										},
										{
											"begin": 539,
											"end": 569,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "214"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "85"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 531,
											"end": 620,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "173"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "tag",
											"source": 1,
											"value": "214"
										},
										{
											"begin": 531,
											"end": 620,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 631,
											"end": 650,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 654,
											"end": 667,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 654,
											"end": 667,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 653,
											"end": 667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "216"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 711,
											"end": 724,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 711,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 711,
											"end": 731,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 727,
											"end": 731,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 745,
											"end": 764,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 745,
											"end": 764,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 677,
											"end": 775,
											"name": "tag",
											"source": 1,
											"value": "216"
										},
										{
											"begin": 677,
											"end": 775,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1187,
											"end": 1219,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "202"
										},
										{
											"begin": 1206,
											"end": 1218,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 1206,
											"end": 1216,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 1206,
											"end": 1218,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1206,
											"end": 1218,
											"name": "tag",
											"source": 0,
											"value": "219"
										},
										{
											"begin": 1206,
											"end": 1218,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1187,
											"end": 1205,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "117"
										},
										{
											"begin": 1187,
											"end": 1219,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "tag",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 14,
											"end": 189,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 84,
											"end": 104,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 84,
											"end": 104,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 133,
											"end": 164,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 133,
											"end": 164,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 123,
											"end": 165,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 123,
											"end": 165,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 113,
											"end": 115,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 113,
											"end": 115,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 179,
											"end": 180,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 176,
											"end": 177,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 169,
											"end": 181,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 113,
											"end": 115,
											"name": "tag",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 113,
											"end": 115,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 65,
											"end": 189,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 65,
											"end": 189,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 65,
											"end": 189,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 65,
											"end": 189,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 194,
											"end": 392,
											"name": "tag",
											"source": 8,
											"value": "50"
										},
										{
											"begin": 194,
											"end": 392,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 194,
											"end": 392,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 306,
											"end": 308,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 294,
											"end": 303,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 285,
											"end": 292,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 281,
											"end": 304,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 277,
											"end": 309,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 274,
											"end": 276,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 274,
											"end": 276,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "226"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 327,
											"end": 333,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 319,
											"end": 325,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 312,
											"end": 334,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 274,
											"end": 276,
											"name": "tag",
											"source": 8,
											"value": "226"
										},
										{
											"begin": 274,
											"end": 276,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 376,
											"end": 385,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 355,
											"end": 386,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 355,
											"end": 386,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 397,
											"end": 808,
											"name": "tag",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 397,
											"end": 808,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 397,
											"end": 808,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 397,
											"end": 808,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 397,
											"end": 808,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 397,
											"end": 808,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 560,
											"end": 563,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 548,
											"end": 557,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 539,
											"end": 546,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 535,
											"end": 558,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 531,
											"end": 564,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 528,
											"end": 530,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 528,
											"end": 530,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 528,
											"end": 530,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 582,
											"end": 588,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 574,
											"end": 580,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 567,
											"end": 589,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 528,
											"end": 530,
											"name": "tag",
											"source": 8,
											"value": "229"
										},
										{
											"begin": 528,
											"end": 530,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 610,
											"end": 641,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 631,
											"end": 640,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 610,
											"end": 641,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 610,
											"end": 641,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 610,
											"end": 641,
											"name": "tag",
											"source": 8,
											"value": "230"
										},
										{
											"begin": 610,
											"end": 641,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 600,
											"end": 641,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 600,
											"end": 641,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 660,
											"end": 700,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "231"
										},
										{
											"begin": 696,
											"end": 698,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 685,
											"end": 694,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 681,
											"end": 699,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 660,
											"end": 700,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "222"
										},
										{
											"begin": 660,
											"end": 700,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 660,
											"end": 700,
											"name": "tag",
											"source": 8,
											"value": "231"
										},
										{
											"begin": 660,
											"end": 700,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 518,
											"end": 808,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 518,
											"end": 808,
											"name": "SWAP7",
											"source": 8
										},
										{
											"begin": 650,
											"end": 700,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 650,
											"end": 700,
											"name": "SWAP6",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 747,
											"end": 749,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 732,
											"end": 750,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 732,
											"end": 750,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 719,
											"end": 751,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 719,
											"end": 751,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 798,
											"end": 800,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 783,
											"end": 801,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 770,
											"end": 802,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 770,
											"end": 802,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 518,
											"end": 808,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 813,
											"end": 1066,
											"name": "tag",
											"source": 8,
											"value": "56"
										},
										{
											"begin": 813,
											"end": 1066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 813,
											"end": 1066,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 922,
											"end": 924,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 910,
											"end": 919,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 901,
											"end": 908,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 897,
											"end": 920,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 893,
											"end": 925,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 890,
											"end": 892,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 890,
											"end": 892,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 890,
											"end": 892,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 943,
											"end": 949,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 935,
											"end": 941,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 928,
											"end": 950,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 890,
											"end": 892,
											"name": "tag",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 890,
											"end": 892,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 987,
											"end": 996,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 974,
											"end": 997,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1006,
											"end": 1036,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 1030,
											"end": 1035,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1006,
											"end": 1036,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 1006,
											"end": 1036,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1071,
											"end": 1328,
											"name": "tag",
											"source": 8,
											"value": "103"
										},
										{
											"begin": 1071,
											"end": 1328,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1071,
											"end": 1328,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1191,
											"end": 1193,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1179,
											"end": 1188,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1170,
											"end": 1177,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1166,
											"end": 1189,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1162,
											"end": 1194,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1159,
											"end": 1161,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1159,
											"end": 1161,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "237"
										},
										{
											"begin": 1159,
											"end": 1161,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1212,
											"end": 1218,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1204,
											"end": 1210,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1197,
											"end": 1219,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1159,
											"end": 1161,
											"name": "tag",
											"source": 8,
											"value": "237"
										},
										{
											"begin": 1159,
											"end": 1161,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1249,
											"end": 1258,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1243,
											"end": 1259,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1268,
											"end": 1298,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 1292,
											"end": 1297,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1268,
											"end": 1298,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 1268,
											"end": 1298,
											"name": "JUMP",
											"source": 8,
											"value": "[in]"
										},
										{
											"begin": 1333,
											"end": 1523,
											"name": "tag",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 1333,
											"end": 1523,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1333,
											"end": 1523,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1445,
											"end": 1447,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1433,
											"end": 1442,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1424,
											"end": 1431,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1420,
											"end": 1443,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1416,
											"end": 1448,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1413,
											"end": 1415,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1413,
											"end": 1415,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "240"
										},
										{
											"begin": 1413,
											"end": 1415,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1466,
											"end": 1472,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1458,
											"end": 1464,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1451,
											"end": 1473,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1413,
											"end": 1415,
											"name": "tag",
											"source": 8,
											"value": "240"
										},
										{
											"begin": 1413,
											"end": 1415,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1494,
											"end": 1517,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1494,
											"end": 1517,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1403,
											"end": 1523,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1403,
											"end": 1523,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1528,
											"end": 1722,
											"name": "tag",
											"source": 8,
											"value": "96"
										},
										{
											"begin": 1528,
											"end": 1722,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1528,
											"end": 1722,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1651,
											"end": 1653,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1639,
											"end": 1648,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 1630,
											"end": 1637,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1626,
											"end": 1649,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1622,
											"end": 1654,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1619,
											"end": 1621,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1619,
											"end": 1621,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "242"
										},
										{
											"begin": 1619,
											"end": 1621,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1672,
											"end": 1678,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1664,
											"end": 1670,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1657,
											"end": 1679,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1619,
											"end": 1621,
											"name": "tag",
											"source": 8,
											"value": "242"
										},
										{
											"begin": 1619,
											"end": 1621,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1700,
											"end": 1716,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 1700,
											"end": 1716,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1609,
											"end": 1722,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1609,
											"end": 1722,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1727,
											"end": 1930,
											"name": "tag",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 1727,
											"end": 1930,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1891,
											"end": 1923,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1891,
											"end": 1923,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1891,
											"end": 1923,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1891,
											"end": 1923,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 1873,
											"end": 1924,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1873,
											"end": 1924,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1861,
											"end": 1863,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1846,
											"end": 1864,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1846,
											"end": 1864,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1828,
											"end": 1930,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 1935,
											"end": 2310,
											"name": "tag",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 1935,
											"end": 2310,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2193,
											"end": 2208,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 2193,
											"end": 2208,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2193,
											"end": 2208,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2209,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2175,
											"end": 2209,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2245,
											"end": 2260,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2245,
											"end": 2260,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2245,
											"end": 2260,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2245,
											"end": 2260,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2240,
											"end": 2242,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2225,
											"end": 2243,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2225,
											"end": 2243,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2218,
											"end": 2261,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2292,
											"end": 2294,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2277,
											"end": 2295,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2277,
											"end": 2295,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2270,
											"end": 2304,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2270,
											"end": 2304,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2270,
											"end": 2304,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2270,
											"end": 2304,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2125,
											"end": 2127,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2110,
											"end": 2128,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2110,
											"end": 2128,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2092,
											"end": 2310,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2315,
											"end": 2589,
											"name": "tag",
											"source": 8,
											"value": "98"
										},
										{
											"begin": 2315,
											"end": 2589,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2507,
											"end": 2539,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2507,
											"end": 2539,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2507,
											"end": 2539,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2507,
											"end": 2539,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2489,
											"end": 2540,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2489,
											"end": 2540,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2571,
											"end": 2573,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2556,
											"end": 2574,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2556,
											"end": 2574,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2549,
											"end": 2583,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2477,
											"end": 2479,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2462,
											"end": 2480,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2462,
											"end": 2480,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2444,
											"end": 2589,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 2594,
											"end": 2781,
											"name": "tag",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 2594,
											"end": 2781,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2759,
											"end": 2773,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2759,
											"end": 2773,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2752,
											"end": 2774,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2734,
											"end": 2775,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2734,
											"end": 2775,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2722,
											"end": 2724,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2707,
											"end": 2725,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2707,
											"end": 2725,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2689,
											"end": 2781,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3019,
											"end": 3373,
											"name": "tag",
											"source": 8,
											"value": "90"
										},
										{
											"begin": 3019,
											"end": 3373,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3221,
											"end": 3223,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3203,
											"end": 3224,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3203,
											"end": 3224,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3203,
											"end": 3224,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3260,
											"end": 3262,
											"name": "PUSH",
											"source": 8,
											"value": "1E"
										},
										{
											"begin": 3240,
											"end": 3258,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3240,
											"end": 3258,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3240,
											"end": 3258,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3233,
											"end": 3263,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3299,
											"end": 3331,
											"name": "PUSH",
											"source": 8,
											"value": "7377617070696E67206F66206153454120686173206E6F7420656E6465640000"
										},
										{
											"begin": 3294,
											"end": 3296,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3279,
											"end": 3297,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3279,
											"end": 3297,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3272,
											"end": 3332,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3364,
											"end": 3366,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3349,
											"end": 3367,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3349,
											"end": 3367,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3193,
											"end": 3373,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3378,
											"end": 3717,
											"name": "tag",
											"source": 8,
											"value": "128"
										},
										{
											"begin": 3378,
											"end": 3717,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3580,
											"end": 3582,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3562,
											"end": 3583,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3562,
											"end": 3583,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3562,
											"end": 3583,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3619,
											"end": 3621,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 3599,
											"end": 3617,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3599,
											"end": 3617,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3599,
											"end": 3617,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3592,
											"end": 3622,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1B9BDD081A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3653,
											"end": 3655,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3638,
											"end": 3656,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3631,
											"end": 3676,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3708,
											"end": 3710,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 3693,
											"end": 3711,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3693,
											"end": 3711,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3552,
											"end": 3717,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 3722,
											"end": 4124,
											"name": "tag",
											"source": 8,
											"value": "187"
										},
										{
											"begin": 3722,
											"end": 4124,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3924,
											"end": 3926,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3906,
											"end": 3927,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3906,
											"end": 3927,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3906,
											"end": 3927,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3963,
											"end": 3965,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 3943,
											"end": 3961,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3943,
											"end": 3961,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3943,
											"end": 3961,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3936,
											"end": 3966,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4002,
											"end": 4036,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061"
										},
										{
											"begin": 3997,
											"end": 3999,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 3982,
											"end": 4000,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3982,
											"end": 4000,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3975,
											"end": 4037,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "646472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4068,
											"end": 4070,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 4053,
											"end": 4071,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4053,
											"end": 4071,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4046,
											"end": 4082,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4114,
											"end": 4117,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 4099,
											"end": 4118,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4099,
											"end": 4118,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3896,
											"end": 4124,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4129,
											"end": 4539,
											"name": "tag",
											"source": 8,
											"value": "173"
										},
										{
											"begin": 4129,
											"end": 4539,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4331,
											"end": 4333,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4313,
											"end": 4334,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4313,
											"end": 4334,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4313,
											"end": 4334,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4370,
											"end": 4372,
											"name": "PUSH",
											"source": 8,
											"value": "2E"
										},
										{
											"begin": 4350,
											"end": 4368,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4350,
											"end": 4368,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4350,
											"end": 4368,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4343,
											"end": 4373,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4409,
											"end": 4443,
											"name": "PUSH",
											"source": 8,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 4404,
											"end": 4406,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4389,
											"end": 4407,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4382,
											"end": 4444,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4475,
											"end": 4477,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4460,
											"end": 4478,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4453,
											"end": 4497,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4529,
											"end": 4532,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 4514,
											"end": 4533,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4514,
											"end": 4533,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4303,
											"end": 4539,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4544,
											"end": 4900,
											"name": "tag",
											"source": 8,
											"value": "86"
										},
										{
											"begin": 4544,
											"end": 4900,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4746,
											"end": 4748,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4728,
											"end": 4749,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4728,
											"end": 4749,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4728,
											"end": 4749,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4765,
											"end": 4783,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4765,
											"end": 4783,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4765,
											"end": 4783,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4758,
											"end": 4788,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4824,
											"end": 4858,
											"name": "PUSH",
											"source": 8,
											"value": "4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572"
										},
										{
											"begin": 4819,
											"end": 4821,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 4804,
											"end": 4822,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4804,
											"end": 4822,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4797,
											"end": 4859,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4891,
											"end": 4893,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 4876,
											"end": 4894,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4876,
											"end": 4894,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4718,
											"end": 4900,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 4905,
											"end": 5256,
											"name": "tag",
											"source": 8,
											"value": "137"
										},
										{
											"begin": 4905,
											"end": 5256,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5107,
											"end": 5109,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5089,
											"end": 5110,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5146,
											"end": 5148,
											"name": "PUSH",
											"source": 8,
											"value": "1B"
										},
										{
											"begin": 5126,
											"end": 5144,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5126,
											"end": 5144,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5126,
											"end": 5144,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5119,
											"end": 5149,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5185,
											"end": 5214,
											"name": "PUSH",
											"source": 8,
											"value": "457863656564207468652073706563696669656420616D6F756E740000000000"
										},
										{
											"begin": 5180,
											"end": 5182,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5165,
											"end": 5183,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5165,
											"end": 5183,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5158,
											"end": 5215,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5247,
											"end": 5249,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 5232,
											"end": 5250,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5232,
											"end": 5250,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5079,
											"end": 5256,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5261,
											"end": 5611,
											"name": "tag",
											"source": 8,
											"value": "143"
										},
										{
											"begin": 5261,
											"end": 5611,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5463,
											"end": 5465,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5445,
											"end": 5466,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5445,
											"end": 5466,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5445,
											"end": 5466,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5502,
											"end": 5504,
											"name": "PUSH",
											"source": 8,
											"value": "1A"
										},
										{
											"begin": 5482,
											"end": 5500,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5482,
											"end": 5500,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5482,
											"end": 5500,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5475,
											"end": 5505,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5541,
											"end": 5569,
											"name": "PUSH",
											"source": 8,
											"value": "7377617070696E67206F6620615345412068617320656E646564000000000000"
										},
										{
											"begin": 5536,
											"end": 5538,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5521,
											"end": 5539,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5521,
											"end": 5539,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5514,
											"end": 5570,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5602,
											"end": 5604,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 5587,
											"end": 5605,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5587,
											"end": 5605,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5435,
											"end": 5611,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5616,
											"end": 5955,
											"name": "tag",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 5616,
											"end": 5955,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 5818,
											"end": 5820,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 5800,
											"end": 5821,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5800,
											"end": 5821,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5800,
											"end": 5821,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5857,
											"end": 5859,
											"name": "PUSH",
											"source": 8,
											"value": "F"
										},
										{
											"begin": 5837,
											"end": 5855,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5837,
											"end": 5855,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5837,
											"end": 5855,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5830,
											"end": 5860,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "139BDD081CDD185C9D1959081E595D"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "8A"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5891,
											"end": 5893,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 5876,
											"end": 5894,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5876,
											"end": 5894,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5869,
											"end": 5914,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5946,
											"end": 5948,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 5931,
											"end": 5949,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5931,
											"end": 5949,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 5790,
											"end": 5955,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 5960,
											"end": 6137,
											"name": "tag",
											"source": 8,
											"value": "53"
										},
										{
											"begin": 5960,
											"end": 6137,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6106,
											"end": 6131,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6106,
											"end": 6131,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6106,
											"end": 6131,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6094,
											"end": 6096,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 6079,
											"end": 6097,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6079,
											"end": 6097,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6061,
											"end": 6137,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6142,
											"end": 6371,
											"name": "tag",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 6142,
											"end": 6371,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6142,
											"end": 6371,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6213,
											"end": 6214,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6209,
											"end": 6215,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 6206,
											"end": 6207,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6203,
											"end": 6216,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 6200,
											"end": 6202,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6200,
											"end": 6202,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "258"
										},
										{
											"begin": 6200,
											"end": 6202,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4E487B71"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6239,
											"end": 6272,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6239,
											"end": 6272,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6295,
											"end": 6299,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 6292,
											"end": 6293,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 6285,
											"end": 6300,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6325,
											"end": 6329,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 6246,
											"end": 6249,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6313,
											"end": 6330,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 6200,
											"end": 6202,
											"name": "tag",
											"source": 8,
											"value": "258"
										},
										{
											"begin": 6200,
											"end": 6202,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6356,
											"end": 6365,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6356,
											"end": 6365,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 6190,
											"end": 6371,
											"name": "JUMP",
											"source": 8,
											"value": "[out]"
										},
										{
											"begin": 6376,
											"end": 6496,
											"name": "tag",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 6376,
											"end": 6496,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 6464,
											"end": 6469,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6457,
											"end": 6470,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6450,
											"end": 6471,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 6443,
											"end": 6448,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 6440,
											"end": 6472,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 6430,
											"end": 6432,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "188"
										},
										{
											"begin": 6430,
											"end": 6432,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 6486,
											"end": 6487,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 6483,
											"end": 6484,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 6476,
											"end": 6488,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"SEA()": "ff257dad",
							"aSEA()": "5d2b6a0c",
							"endTimestamp()": "a85adeab",
							"initialize(address,address,uint256,uint256)": "eb990c59",
							"isInitialized()": "392e53cd",
							"maxAmt()": "f019e2b2",
							"migrate()": "8fd3ab80",
							"open(bool)": "a85717d3",
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"senderInfo(address)": "a6dd4c66",
							"setEndTimestamp(uint256)": "7df6a6c8",
							"setMaxAmt(uint256)": "5294385b",
							"setStartTimestamp(uint256)": "c44bef75",
							"startTimestamp()": "e6fd48bc",
							"transferOwnership(address)": "f2fde38b",
							"withdraw()": "3ccfd60b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SEA\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aSEA\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_SEA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_aSEA\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTimestamp\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"open\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"senderInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setEndTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setMaxAmt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\"}],\"name\":\"setStartTimestamp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IDO/AlphaSEAMigration.sol\":\"aSEAMigration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xd0fc241d70f27a08c43c0c9e5a15d2661a643d8db46c219b2322bef8a34bbdd7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://272fdc13ea6d62470f1009a1adf0d28b67be2c75415e9f24eee38164dd69fb04\",\"dweb:/ipfs/QmfZDcxQEFdAi1AwMTHozZJrwFoUCEZnbcJcRhqmahuTBR\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x5f13da6a5f023d6e9b3e48a3690458bfceea5872c0e3ddf1b2b528133f87a992\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4f10cded435297e67d3720adb22790ee7f8ab7f5d977a815e87f33560800819c\",\"dweb:/ipfs/QmeMx1jpSb66jrT1P184kTuh8p9FSqbYUXoVbXNdnJPqkf\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xb34b8dc5fbc20d8d7e5ed2fd1a0ed87e1fb024d3ae0c61fd4368565ce733aa7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0ff7fe6e13cf851da3cdc27c7c4c58249ca6a53765f1bb40a5b8ec87b1b84599\",\"dweb:/ipfs/QmZ7JzzhpEMBgk7p9TVzwXDduvJJQtZhQwF3R1vZ9EdgMP\"]},\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\":{\"keccak256\":\"0x7090f66700fbb4955abf72ba8e06e4a1eafb5bae1423032102dcbb2172da5543\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fb3c830201b945b96b0f7db921aeed52a7a40382ddab6466b5a97ecdd5a1571a\",\"dweb:/ipfs/QmcMWcz6DveTkqXE3EWwf3A9xPXhdUUZTXgKoSvzFyeYe9\"]},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0xf308459c5ea0cde035b8c3b3d9144086a2c777c46dbe401f634e75dea1aba1b8\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e51755c6934703b61e7edb7d3edef985f429be6bef384b15e1b616ea65176934\",\"dweb:/ipfs/QmQVb4hBJcTMthp5hJquUy5tPsDwgiKQ8nGExckR75G88u\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x0c34de2f75ee9ab06bf9151824be575885d0a9b460c292476a260578fb5a4e1c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2125524ea896700181f25ee543d35a980b9477eaf13fd1878ae24be5dcc3ba75\",\"dweb:/ipfs/QmXw9DTW1t1UiTZanfESSJ6jm2xVSQpsdsdKnBTYeBnwqh\"]},\"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol\":{\"keccak256\":\"0x23ee0c2d7bcce5d09d40f3a14c91f29000d3a83b8a9c26440cd1b3748a93ea47\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://62f7975f651c46b43acd346786d7cf5f78027d21a2dd694377b271ba97209ada\",\"dweb:/ipfs/QmNS7ppgMivJCJgu6JzEN8MvjWM7ctsDREcNyHTcZzYXRG\"]},\"contracts/IDO/AlphaSEAMigration.sol\":{\"keccak256\":\"0xf0a11f45a384afd25a43b10ecf42af18c067ebf1e118bbf74721240875d7476b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1c67c98dfca94a4cfa27615a14d260f1a7ebc2e50035a4f027dce63d806c210d\",\"dweb:/ipfs/QmX78MQJrqFQS8US3wDCF9vrzcp3qfQsek4b1N7MAtXGNs\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 130,
								"contract": "contracts/IDO/AlphaSEAMigration.sol:aSEAMigration",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 133,
								"contract": "contracts/IDO/AlphaSEAMigration.sol:aSEAMigration",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 760,
								"contract": "contracts/IDO/AlphaSEAMigration.sol:aSEAMigration",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "contracts/IDO/AlphaSEAMigration.sol:aSEAMigration",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 124,
								"contract": "contracts/IDO/AlphaSEAMigration.sol:aSEAMigration",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							},
							{
								"astId": 1093,
								"contract": "contracts/IDO/AlphaSEAMigration.sol:aSEAMigration",
								"label": "endTimestamp",
								"offset": 0,
								"slot": "101",
								"type": "t_uint256"
							},
							{
								"astId": 1095,
								"contract": "contracts/IDO/AlphaSEAMigration.sol:aSEAMigration",
								"label": "startTimestamp",
								"offset": 0,
								"slot": "102",
								"type": "t_uint256"
							},
							{
								"astId": 1097,
								"contract": "contracts/IDO/AlphaSEAMigration.sol:aSEAMigration",
								"label": "maxAmt",
								"offset": 0,
								"slot": "103",
								"type": "t_uint256"
							},
							{
								"astId": 1100,
								"contract": "contracts/IDO/AlphaSEAMigration.sol:aSEAMigration",
								"label": "SEA",
								"offset": 0,
								"slot": "104",
								"type": "t_contract(IERC20Upgradeable)248"
							},
							{
								"astId": 1103,
								"contract": "contracts/IDO/AlphaSEAMigration.sol:aSEAMigration",
								"label": "aSEA",
								"offset": 0,
								"slot": "105",
								"type": "t_contract(IERC20Upgradeable)248"
							},
							{
								"astId": 1105,
								"contract": "contracts/IDO/AlphaSEAMigration.sol:aSEAMigration",
								"label": "isInitialized",
								"offset": 20,
								"slot": "105",
								"type": "t_bool"
							},
							{
								"astId": 1109,
								"contract": "contracts/IDO/AlphaSEAMigration.sol:aSEAMigration",
								"label": "senderInfo",
								"offset": 0,
								"slot": "106",
								"type": "t_mapping(t_address,t_uint256)"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_contract(IERC20Upgradeable)248": {
								"encoding": "inplace",
								"label": "contract IERC20Upgradeable",
								"numberOfBytes": "20"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							761
						],
						"Initializable": [
							170
						],
						"OwnableUpgradeable": [
							125
						]
					},
					"id": 126,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "87:23:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nodeType": "ImportDirective",
							"scope": 126,
							"sourceUnit": 762,
							"src": "112:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 3,
							"nodeType": "ImportDirective",
							"scope": 126,
							"sourceUnit": 171,
							"src": "154:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 170,
										"src": "733:13:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "733:13:0"
								},
								{
									"baseName": {
										"id": 7,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 761,
										"src": "748:18:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "748:18:0"
								}
							],
							"contractDependencies": [
								170,
								761
							],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "198:494:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 125,
							"linearizedBaseContracts": [
								125,
								761,
								170
							],
							"name": "OwnableUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nodeType": "VariableDeclaration",
									"scope": 125,
									"src": "773:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "773:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"id": 16,
									"name": "OwnershipTransferred",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "829:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "829:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "860:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "860:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "828:57:0"
									},
									"src": "802:84:0"
								},
								{
									"body": {
										"id": 28,
										"nodeType": "Block",
										"src": "1035:79:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 738,
														"src": "1045:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1045:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1045:26:0"
											},
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 25,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 40,
														"src": "1081:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 26,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1081:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 27,
												"nodeType": "ExpressionStatement",
												"src": "1081:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "892:91:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 29,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 20,
											"modifierName": {
												"id": 19,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "1023:11:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1023:11:0"
										}
									],
									"name": "__Ownable_init",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1011:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1035:0:0"
									},
									"scope": 125,
									"src": "988:126:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "1177:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 35,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 747,
																"src": "1206:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 36,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1206:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 34,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "1187:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1187:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 38,
												"nodeType": "ExpressionStatement",
												"src": "1187:32:0"
											}
										]
									},
									"id": 40,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 32,
											"modifierName": {
												"id": 31,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "1165:11:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1165:11:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1153:2:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1177:0:0"
									},
									"scope": 125,
									"src": "1120:106:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 48,
										"nodeType": "Block",
										"src": "1357:30:0",
										"statements": [
											{
												"expression": {
													"id": 46,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1374:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 45,
												"id": 47,
												"nodeType": "Return",
												"src": "1367:13:0"
											}
										]
									},
									"documentation": {
										"id": 41,
										"nodeType": "StructuredDocumentation",
										"src": "1232:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 49,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 42,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1316:2:0"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "1348:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 43,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1348:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1347:9:0"
									},
									"scope": 125,
									"src": "1302:85:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 62,
										"nodeType": "Block",
										"src": "1496:96:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 57,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 53,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 49,
																	"src": "1514:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 54,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1514:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 55,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 747,
																	"src": "1525:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 56,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1525:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1514:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 58,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1539:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 52,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1506:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 59,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1506:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 60,
												"nodeType": "ExpressionStatement",
												"src": "1506:68:0"
											},
											{
												"id": 61,
												"nodeType": "PlaceholderStatement",
												"src": "1584:1:0"
											}
										]
									},
									"documentation": {
										"id": 50,
										"nodeType": "StructuredDocumentation",
										"src": "1393:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 63,
									"name": "onlyOwner",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1493:2:0"
									},
									"src": "1475:117:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 76,
										"nodeType": "Block",
										"src": "1988:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 72,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2025:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 71,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2017:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 70,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2017:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 73,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2017:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 69,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "1998:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 74,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1998:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 75,
												"nodeType": "ExpressionStatement",
												"src": "1998:30:0"
											}
										]
									},
									"documentation": {
										"id": 64,
										"nodeType": "StructuredDocumentation",
										"src": "1598:331:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 77,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 67,
											"modifierName": {
												"id": 66,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "1978:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1978:9:0"
										}
									],
									"name": "renounceOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1960:2:0"
									},
									"returnParameters": {
										"id": 68,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1988:0:0"
									},
									"scope": 125,
									"src": "1934:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 99,
										"nodeType": "Block",
										"src": "2254:128:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 91,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 86,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 80,
																"src": "2272:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 89,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2292:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 88,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2284:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 87,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2284:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 90,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2284:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2272:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 92,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2296:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 85,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2264:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 93,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2264:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 94,
												"nodeType": "ExpressionStatement",
												"src": "2264:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 96,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 80,
															"src": "2366:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 95,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 120,
														"src": "2347:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 97,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2347:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 98,
												"nodeType": "ExpressionStatement",
												"src": "2347:28:0"
											}
										]
									},
									"documentation": {
										"id": 78,
										"nodeType": "StructuredDocumentation",
										"src": "2041:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 100,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 83,
											"modifierName": {
												"id": 82,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "2244:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2244:9:0"
										}
									],
									"name": "transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 100,
												"src": "2211:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 79,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2211:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2210:18:0"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2254:0:0"
									},
									"scope": 125,
									"src": "2184:198:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 119,
										"nodeType": "Block",
										"src": "2599:124:0",
										"statements": [
											{
												"assignments": [
													107
												],
												"declarations": [
													{
														"constant": false,
														"id": 107,
														"mutability": "mutable",
														"name": "oldOwner",
														"nodeType": "VariableDeclaration",
														"scope": 119,
														"src": "2609:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 106,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2609:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 109,
												"initialValue": {
													"id": 108,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "2628:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2609:25:0"
											},
											{
												"expression": {
													"id": 112,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 110,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2644:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 111,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 103,
														"src": "2653:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2644:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 113,
												"nodeType": "ExpressionStatement",
												"src": "2644:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 115,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 107,
															"src": "2697:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 116,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 103,
															"src": "2707:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 114,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2676:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2676:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 118,
												"nodeType": "EmitStatement",
												"src": "2671:45:0"
											}
										]
									},
									"documentation": {
										"id": 101,
										"nodeType": "StructuredDocumentation",
										"src": "2388:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 120,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 103,
												"mutability": "mutable",
												"name": "newOwner",
												"nodeType": "VariableDeclaration",
												"scope": 120,
												"src": "2564:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 102,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2564:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2563:18:0"
									},
									"returnParameters": {
										"id": 105,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2599:0:0"
									},
									"scope": 125,
									"src": "2536:187:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 124,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"scope": 125,
									"src": "2728:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 121,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "2728:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 123,
										"length": {
											"hexValue": "3439",
											"id": 122,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "2736:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "2728:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 126,
							"src": "693:2063:0"
						}
					],
					"src": "87:2670:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							170
						]
					},
					"id": 171,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 127,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "98:23:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 170,
							"linearizedBaseContracts": [
								170
							],
							"name": "Initializable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 128,
										"nodeType": "StructuredDocumentation",
										"src": "161:73:1",
										"text": " @dev Indicates that the contract has been initialized."
									},
									"id": 130,
									"mutability": "mutable",
									"name": "_initialized",
									"nodeType": "VariableDeclaration",
									"scope": 170,
									"src": "239:25:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 129,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "239:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 131,
										"nodeType": "StructuredDocumentation",
										"src": "271:91:1",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 133,
									"mutability": "mutable",
									"name": "_initializing",
									"nodeType": "VariableDeclaration",
									"scope": 170,
									"src": "367:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 132,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "367:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 168,
										"nodeType": "Block",
										"src": "521:348:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 140,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 137,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 133,
																"src": "539:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"id": 139,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "556:13:1",
																"subExpression": {
																	"id": 138,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "557:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "539:30:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 141,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "571:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 136,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "531:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "531:89:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 143,
												"nodeType": "ExpressionStatement",
												"src": "531:89:1"
											},
											{
												"assignments": [
													145
												],
												"declarations": [
													{
														"constant": false,
														"id": 145,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nodeType": "VariableDeclaration",
														"scope": 168,
														"src": "631:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 144,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "631:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 148,
												"initialValue": {
													"id": 147,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "653:14:1",
													"subExpression": {
														"id": 146,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 133,
														"src": "654:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "631:36:1"
											},
											{
												"condition": {
													"id": 149,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 145,
													"src": "681:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 159,
												"nodeType": "IfStatement",
												"src": "677:98:1",
												"trueBody": {
													"id": 158,
													"nodeType": "Block",
													"src": "697:78:1",
													"statements": [
														{
															"expression": {
																"id": 152,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 150,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "711:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 151,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "727:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "711:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 153,
															"nodeType": "ExpressionStatement",
															"src": "711:20:1"
														},
														{
															"expression": {
																"id": 156,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 154,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 130,
																	"src": "745:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 155,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "760:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "745:19:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 157,
															"nodeType": "ExpressionStatement",
															"src": "745:19:1"
														}
													]
												}
											},
											{
												"id": 160,
												"nodeType": "PlaceholderStatement",
												"src": "785:1:1"
											},
											{
												"condition": {
													"id": 161,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 145,
													"src": "801:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 167,
												"nodeType": "IfStatement",
												"src": "797:66:1",
												"trueBody": {
													"id": 166,
													"nodeType": "Block",
													"src": "817:46:1",
													"statements": [
														{
															"expression": {
																"id": 164,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 162,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 133,
																	"src": "831:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 163,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "847:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "831:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 165,
															"nodeType": "ExpressionStatement",
															"src": "831:21:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 134,
										"nodeType": "StructuredDocumentation",
										"src": "400:93:1",
										"text": " @dev Modifier to protect an initializer function from being invoked twice."
									},
									"id": 169,
									"name": "initializer",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "518:2:1"
									},
									"src": "498:371:1",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 171,
							"src": "123:748:1"
						}
					],
					"src": "98:774:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							248
						]
					},
					"id": 249,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 172,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "91:23:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 173,
								"nodeType": "StructuredDocumentation",
								"src": "116:70:2",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 248,
							"linearizedBaseContracts": [
								248
							],
							"name": "IERC20Upgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 174,
										"nodeType": "StructuredDocumentation",
										"src": "221:66:2",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 179,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 175,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "312:2:2"
									},
									"returnParameters": {
										"id": 178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 177,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 179,
												"src": "338:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 176,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "338:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "337:9:2"
									},
									"scope": 248,
									"src": "292:55:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 180,
										"nodeType": "StructuredDocumentation",
										"src": "353:72:2",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 187,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 182,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "449:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 181,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "449:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "448:17:2"
									},
									"returnParameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 185,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 187,
												"src": "489:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 184,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "489:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "488:9:2"
									},
									"scope": 248,
									"src": "430:68:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 188,
										"nodeType": "StructuredDocumentation",
										"src": "504:209:2",
										"text": " @dev Moves `amount` tokens from the caller's account to `recipient`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 197,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 193,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 190,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "736:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 189,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "736:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 192,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "755:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 191,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "755:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "735:35:2"
									},
									"returnParameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 195,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "789:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 194,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "789:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "788:6:2"
									},
									"scope": 248,
									"src": "718:77:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "801:264:2",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 207,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 200,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "1089:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1089:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 202,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "1104:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 201,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1104:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1088:32:2"
									},
									"returnParameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 207,
												"src": "1144:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 204,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1144:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1143:9:2"
									},
									"scope": 248,
									"src": "1070:83:2",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 208,
										"nodeType": "StructuredDocumentation",
										"src": "1159:642:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 217,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 213,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 210,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1823:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 209,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1823:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 212,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1840:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 211,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1840:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1822:33:2"
									},
									"returnParameters": {
										"id": 216,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 215,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 217,
												"src": "1874:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 214,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1874:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1873:6:2"
									},
									"scope": 248,
									"src": "1806:74:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 218,
										"nodeType": "StructuredDocumentation",
										"src": "1886:296:2",
										"text": " @dev Moves `amount` tokens from `sender` to `recipient` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 229,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 220,
												"mutability": "mutable",
												"name": "sender",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "2218:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 219,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2218:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 222,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "2242:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 221,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2242:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "2269:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 223,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2269:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2208:81:2"
									},
									"returnParameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 227,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 229,
												"src": "2308:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 226,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2308:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2307:6:2"
									},
									"scope": 248,
									"src": "2187:127:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 230,
										"nodeType": "StructuredDocumentation",
										"src": "2320:158:2",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"id": 238,
									"name": "Transfer",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2498:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 231,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2498:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 234,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2520:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 233,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2520:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 236,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 238,
												"src": "2540:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 235,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2540:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2497:57:2"
									},
									"src": "2483:72:2"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 239,
										"nodeType": "StructuredDocumentation",
										"src": "2561:148:2",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"id": 247,
									"name": "Approval",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 241,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "2729:21:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2729:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 243,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "2752:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 242,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2752:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 245,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 247,
												"src": "2777:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 244,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2777:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2728:63:2"
									},
									"src": "2714:78:2"
								}
							],
							"scope": 249,
							"src": "187:2607:2"
						}
					],
					"src": "91:2704:2"
				},
				"id": 2
			},
			"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							717
						],
						"IERC20Upgradeable": [
							248
						],
						"SafeERC20Upgradeable": [
							472
						]
					},
					"id": 473,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 250,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "100:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 251,
							"nodeType": "ImportDirective",
							"scope": 473,
							"sourceUnit": 249,
							"src": "125:34:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../../utils/AddressUpgradeable.sol",
							"id": 252,
							"nodeType": "ImportDirective",
							"scope": 473,
							"sourceUnit": 718,
							"src": "160:47:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 253,
								"nodeType": "StructuredDocumentation",
								"src": "209:457:3",
								"text": " @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 472,
							"linearizedBaseContracts": [
								472
							],
							"name": "SafeERC20Upgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 256,
									"libraryName": {
										"id": 254,
										"name": "AddressUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 717,
										"src": "708:18:3"
									},
									"nodeType": "UsingForDirective",
									"src": "702:37:3",
									"typeName": {
										"id": 255,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "731:7:3",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"body": {
										"id": 278,
										"nodeType": "Block",
										"src": "858:103:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 267,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 259,
															"src": "888:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 270,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 259,
																			"src": "918:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 271,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transfer",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 197,
																		"src": "918:14:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 272,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "918:23:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 273,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 261,
																	"src": "943:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 274,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 263,
																	"src": "947:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 268,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "895:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 269,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "895:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 275,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "895:58:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 266,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 471,
														"src": "868:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 276,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "868:86:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 277,
												"nodeType": "ExpressionStatement",
												"src": "868:86:3"
											}
										]
									},
									"id": 279,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 264,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "776:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 258,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 257,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 248,
														"src": "776:17:3"
													},
													"referencedDeclaration": 248,
													"src": "776:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "809:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 260,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "809:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "829:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "829:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "766:82:3"
									},
									"returnParameters": {
										"id": 265,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:0:3"
									},
									"scope": 472,
									"src": "745:216:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 304,
										"nodeType": "Block",
										"src": "1106:113:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 292,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 282,
															"src": "1136:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 295,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 282,
																			"src": "1166:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 296,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "transferFrom",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 229,
																		"src": "1166:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,address,uint256) external returns (bool)"
																		}
																	},
																	"id": 297,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "1166:27:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 298,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 284,
																	"src": "1195:4:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 299,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 286,
																	"src": "1201:2:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 300,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 288,
																	"src": "1205:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 293,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "1143:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 294,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "1143:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 301,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1143:68:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 291,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 471,
														"src": "1116:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 302,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1116:96:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 303,
												"nodeType": "ExpressionStatement",
												"src": "1116:96:3"
											}
										]
									},
									"id": 305,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 289,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 282,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "1002:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 281,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 280,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 248,
														"src": "1002:17:3"
													},
													"referencedDeclaration": 248,
													"src": "1002:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "from",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "1035:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 283,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1035:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 286,
												"mutability": "mutable",
												"name": "to",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "1057:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 285,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1057:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 288,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 305,
												"src": "1077:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 287,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1077:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "992:104:3"
									},
									"returnParameters": {
										"id": 290,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1106:0:3"
									},
									"scope": 472,
									"src": "967:252:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 348,
										"nodeType": "Block",
										"src": "1596:497:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 332,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 319,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 317,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 313,
																			"src": "1845:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 318,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1854:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1845:10:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 320,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1844:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 330,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 325,
																							"name": "this",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 4294967268,
																							"src": "1885:4:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$472",
																								"typeString": "library SafeERC20Upgradeable"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$472",
																								"typeString": "library SafeERC20Upgradeable"
																							}
																						],
																						"id": 324,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "1877:7:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_address_$",
																							"typeString": "type(address)"
																						},
																						"typeName": {
																							"id": 323,
																							"name": "address",
																							"nodeType": "ElementaryTypeName",
																							"src": "1877:7:3",
																							"typeDescriptions": {}
																						}
																					},
																					"id": 326,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "typeConversion",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "1877:13:3",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 327,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 311,
																					"src": "1892:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"expression": {
																					"id": 321,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 309,
																					"src": "1861:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																						"typeString": "contract IERC20Upgradeable"
																					}
																				},
																				"id": 322,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "allowance",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 207,
																				"src": "1861:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																					"typeString": "function (address,address) view external returns (uint256)"
																				}
																			},
																			"id": 328,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "1861:39:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 329,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1904:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1861:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 331,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1860:46:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "1844:62:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365",
															"id": 333,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1920:56:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															},
															"value": "SafeERC20: approve from non-zero to non-zero allowance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25",
																"typeString": "literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""
															}
														],
														"id": 316,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1823:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 334,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1823:163:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 335,
												"nodeType": "ExpressionStatement",
												"src": "1823:163:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 337,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 309,
															"src": "2016:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 340,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 309,
																			"src": "2046:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 341,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 217,
																		"src": "2046:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 342,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2046:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 343,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 311,
																	"src": "2070:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 344,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 313,
																	"src": "2079:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 338,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2023:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 339,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2023:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 345,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2023:62:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 336,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 471,
														"src": "1996:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 346,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1996:90:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 347,
												"nodeType": "ExpressionStatement",
												"src": "1996:90:3"
											}
										]
									},
									"documentation": {
										"id": 306,
										"nodeType": "StructuredDocumentation",
										"src": "1225:249:3",
										"text": " @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."
									},
									"id": 349,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeApprove",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 314,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1509:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 308,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 307,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 248,
														"src": "1509:17:3"
													},
													"referencedDeclaration": 248,
													"src": "1509:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 311,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1542:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 310,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1542:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 313,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 349,
												"src": "1567:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 312,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1567:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1499:87:3"
									},
									"returnParameters": {
										"id": 315,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1596:0:3"
									},
									"scope": 472,
									"src": "1479:614:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 384,
										"nodeType": "Block",
										"src": "2226:194:3",
										"statements": [
											{
												"assignments": [
													360
												],
												"declarations": [
													{
														"constant": false,
														"id": 360,
														"mutability": "mutable",
														"name": "newAllowance",
														"nodeType": "VariableDeclaration",
														"scope": 384,
														"src": "2236:20:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 359,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2236:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 371,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 370,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"arguments": [
																	{
																		"id": 365,
																		"name": "this",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967268,
																		"src": "2283:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$472",
																			"typeString": "library SafeERC20Upgradeable"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$472",
																			"typeString": "library SafeERC20Upgradeable"
																		}
																	],
																	"id": 364,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2275:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 363,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2275:7:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 366,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2275:13:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 367,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 354,
																"src": "2290:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"expression": {
																"id": 361,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 352,
																"src": "2259:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																	"typeString": "contract IERC20Upgradeable"
																}
															},
															"id": 362,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "allowance",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 207,
															"src": "2259:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																"typeString": "function (address,address) view external returns (uint256)"
															}
														},
														"id": 368,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2259:39:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 369,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 356,
														"src": "2301:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2259:47:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2236:70:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 373,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 352,
															"src": "2336:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"expression": {
																			"id": 376,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 352,
																			"src": "2366:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																				"typeString": "contract IERC20Upgradeable"
																			}
																		},
																		"id": 377,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberName": "approve",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 217,
																		"src": "2366:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																			"typeString": "function (address,uint256) external returns (bool)"
																		}
																	},
																	"id": 378,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "selector",
																	"nodeType": "MemberAccess",
																	"src": "2366:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	}
																},
																{
																	"id": 379,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 354,
																	"src": "2390:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 380,
																	"name": "newAllowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 360,
																	"src": "2399:12:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes4",
																		"typeString": "bytes4"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"expression": {
																	"id": 374,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "2343:3:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 375,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberName": "encodeWithSelector",
																"nodeType": "MemberAccess",
																"src": "2343:22:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function (bytes4) pure returns (bytes memory)"
																}
															},
															"id": 381,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2343:69:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 372,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 471,
														"src": "2316:19:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20Upgradeable,bytes memory)"
														}
													},
													"id": 382,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2316:97:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 383,
												"nodeType": "ExpressionStatement",
												"src": "2316:97:3"
											}
										]
									},
									"id": 385,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 357,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "2139:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 351,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 350,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 248,
														"src": "2139:17:3"
													},
													"referencedDeclaration": 248,
													"src": "2139:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "2172:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2172:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 385,
												"src": "2197:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 355,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2197:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2129:87:3"
									},
									"returnParameters": {
										"id": 358,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2226:0:3"
									},
									"scope": 472,
									"src": "2099:321:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 432,
										"nodeType": "Block",
										"src": "2553:370:3",
										"statements": [
											{
												"id": 431,
												"nodeType": "UncheckedBlock",
												"src": "2563:354:3",
												"statements": [
													{
														"assignments": [
															396
														],
														"declarations": [
															{
																"constant": false,
																"id": 396,
																"mutability": "mutable",
																"name": "oldAllowance",
																"nodeType": "VariableDeclaration",
																"scope": 431,
																"src": "2587:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 395,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2587:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 405,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 401,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2634:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$472",
																				"typeString": "library SafeERC20Upgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20Upgradeable_$472",
																				"typeString": "library SafeERC20Upgradeable"
																			}
																		],
																		"id": 400,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2626:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 399,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2626:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 402,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2626:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 403,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 390,
																	"src": "2641:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 397,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "2610:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																		"typeString": "contract IERC20Upgradeable"
																	}
																},
																"id": 398,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 207,
																"src": "2610:15:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 404,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2610:39:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2587:62:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 409,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 407,
																		"name": "oldAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 396,
																		"src": "2671:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">=",
																	"rightExpression": {
																		"id": 408,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 392,
																		"src": "2687:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2671:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"hexValue": "5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
																	"id": 410,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "string",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2694:43:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	},
																	"value": "SafeERC20: decreased allowance below zero"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a",
																		"typeString": "literal_string \"SafeERC20: decreased allowance below zero\""
																	}
																],
																"id": 406,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "2663:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 411,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2663:75:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 412,
														"nodeType": "ExpressionStatement",
														"src": "2663:75:3"
													},
													{
														"assignments": [
															414
														],
														"declarations": [
															{
																"constant": false,
																"id": 414,
																"mutability": "mutable",
																"name": "newAllowance",
																"nodeType": "VariableDeclaration",
																"scope": 431,
																"src": "2752:20:3",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 413,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2752:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 418,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 417,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 415,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 396,
																"src": "2775:12:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 416,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 392,
																"src": "2790:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2775:20:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "2752:43:3"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 420,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 388,
																	"src": "2829:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																		"typeString": "contract IERC20Upgradeable"
																	}
																},
																{
																	"arguments": [
																		{
																			"expression": {
																				"expression": {
																					"id": 423,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 388,
																					"src": "2859:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																						"typeString": "contract IERC20Upgradeable"
																					}
																				},
																				"id": 424,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 217,
																				"src": "2859:13:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			"id": 425,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberName": "selector",
																			"nodeType": "MemberAccess",
																			"src": "2859:22:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			}
																		},
																		{
																			"id": 426,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 390,
																			"src": "2883:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 427,
																			"name": "newAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 414,
																			"src": "2892:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_bytes4",
																				"typeString": "bytes4"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"expression": {
																			"id": 421,
																			"name": "abi",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967295,
																			"src": "2836:3:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_abi",
																				"typeString": "abi"
																			}
																		},
																		"id": 422,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "encodeWithSelector",
																		"nodeType": "MemberAccess",
																		"src": "2836:22:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$",
																			"typeString": "function (bytes4) pure returns (bytes memory)"
																		}
																	},
																	"id": 428,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2836:69:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																		"typeString": "contract IERC20Upgradeable"
																	},
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 419,
																"name": "_callOptionalReturn",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 471,
																"src": "2809:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20Upgradeable_$248_$_t_bytes_memory_ptr_$returns$__$",
																	"typeString": "function (contract IERC20Upgradeable,bytes memory)"
																}
															},
															"id": 429,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2809:97:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 430,
														"nodeType": "ExpressionStatement",
														"src": "2809:97:3"
													}
												]
											}
										]
									},
									"id": 433,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 388,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "2466:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 387,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 386,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 248,
														"src": "2466:17:3"
													},
													"referencedDeclaration": 248,
													"src": "2466:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "spender",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "2499:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2499:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 392,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 433,
												"src": "2524:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 391,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2524:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2456:87:3"
									},
									"returnParameters": {
										"id": 394,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2553:0:3"
									},
									"scope": 472,
									"src": "2426:497:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 470,
										"nodeType": "Block",
										"src": "3387:636:3",
										"statements": [
											{
												"assignments": [
													443
												],
												"declarations": [
													{
														"constant": false,
														"id": 443,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 470,
														"src": "3736:23:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 442,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3736:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 452,
												"initialValue": {
													"arguments": [
														{
															"id": 449,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 439,
															"src": "3790:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 450,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3796:34:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															},
															"value": "SafeERC20: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b",
																"typeString": "literal_string \"SafeERC20: low-level call failed\""
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 446,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 437,
																	"src": "3770:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																		"typeString": "contract IERC20Upgradeable"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																		"typeString": "contract IERC20Upgradeable"
																	}
																],
																"id": 445,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3762:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 444,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3762:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 447,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3762:14:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 448,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 563,
														"src": "3762:27:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$bound_to$_t_address_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 451,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3762:69:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3736:95:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 456,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 453,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 443,
															"src": "3845:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 454,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "3845:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 455,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3865:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3845:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 469,
												"nodeType": "IfStatement",
												"src": "3841:176:3",
												"trueBody": {
													"id": 468,
													"nodeType": "Block",
													"src": "3868:149:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 460,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 443,
																				"src": "3940:10:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 462,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "3953:4:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 461,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "3953:4:3",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 463,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "3952:6:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 458,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "3929:3:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 459,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "3929:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 464,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3929:30:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564",
																		"id": 465,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3961:44:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		},
																		"value": "SafeERC20: ERC20 operation did not succeed"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd",
																			"typeString": "literal_string \"SafeERC20: ERC20 operation did not succeed\""
																		}
																	],
																	"id": 457,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "3921:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 466,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3921:85:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 467,
															"nodeType": "ExpressionStatement",
															"src": "3921:85:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 434,
										"nodeType": "StructuredDocumentation",
										"src": "2929:372:3",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 471,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "token",
												"nodeType": "VariableDeclaration",
												"scope": 471,
												"src": "3335:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
													"typeString": "contract IERC20Upgradeable"
												},
												"typeName": {
													"id": 436,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 435,
														"name": "IERC20Upgradeable",
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 248,
														"src": "3335:17:3"
													},
													"referencedDeclaration": 248,
													"src": "3335:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 471,
												"src": "3360:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 438,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3360:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3334:44:3"
									},
									"returnParameters": {
										"id": 441,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3387:0:3"
									},
									"scope": 472,
									"src": "3306:717:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 473,
							"src": "667:3358:3"
						}
					],
					"src": "100:3926:3"
				},
				"id": 3
			},
			"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							717
						]
					},
					"id": 718,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 474,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 475,
								"nodeType": "StructuredDocumentation",
								"src": "111:67:4",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 717,
							"linearizedBaseContracts": [
								717
							],
							"name": "AddressUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 491,
										"nodeType": "Block",
										"src": "848:311:4",
										"statements": [
											{
												"assignments": [
													484
												],
												"declarations": [
													{
														"constant": false,
														"id": 484,
														"mutability": "mutable",
														"name": "size",
														"nodeType": "VariableDeclaration",
														"scope": 491,
														"src": "1045:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 483,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1045:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 485,
												"nodeType": "VariableDeclarationStatement",
												"src": "1045:12:4"
											},
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1076:52:4",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1090:28:4",
															"value": {
																"arguments": [
																	{
																		"name": "account",
																		"nodeType": "YulIdentifier",
																		"src": "1110:7:4"
																	}
																],
																"functionName": {
																	"name": "extcodesize",
																	"nodeType": "YulIdentifier",
																	"src": "1098:11:4"
																},
																"nodeType": "YulFunctionCall",
																"src": "1098:20:4"
															},
															"variableNames": [
																{
																	"name": "size",
																	"nodeType": "YulIdentifier",
																	"src": "1090:4:4"
																}
															]
														}
													]
												},
												"evmVersion": "istanbul",
												"externalReferences": [
													{
														"declaration": 478,
														"isOffset": false,
														"isSlot": false,
														"src": "1110:7:4",
														"valueSize": 1
													},
													{
														"declaration": 484,
														"isOffset": false,
														"isSlot": false,
														"src": "1090:4:4",
														"valueSize": 1
													}
												],
												"id": 486,
												"nodeType": "InlineAssembly",
												"src": "1067:61:4"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 487,
														"name": "size",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 484,
														"src": "1144:4:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 488,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1151:1:4",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1144:8:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 482,
												"id": 490,
												"nodeType": "Return",
												"src": "1137:15:4"
											}
										]
									},
									"documentation": {
										"id": 476,
										"nodeType": "StructuredDocumentation",
										"src": "212:565:4",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ===="
									},
									"id": 492,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 479,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 478,
												"mutability": "mutable",
												"name": "account",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "802:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 477,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "802:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "801:17:4"
									},
									"returnParameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 492,
												"src": "842:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 480,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "842:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "841:6:4"
									},
									"scope": 717,
									"src": "782:377:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 525,
										"nodeType": "Block",
										"src": "2147:241:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 507,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 503,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2173:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$717",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$717",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 502,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2165:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 501,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2165:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 504,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2165:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 505,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2165:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 506,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 497,
																"src": "2190:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2165:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 508,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2198:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 500,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2157:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 509,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2157:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 510,
												"nodeType": "ExpressionStatement",
												"src": "2157:73:4"
											},
											{
												"assignments": [
													512,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 512,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 525,
														"src": "2242:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 511,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2242:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 519,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 517,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2290:2:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 513,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 495,
																"src": "2260:9:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 514,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2260:14:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 516,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 515,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 497,
																"src": "2282:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2260:29:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 518,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2260:33:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2241:52:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 521,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 512,
															"src": "2311:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 522,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2320:60:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 520,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2303:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 523,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2303:78:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 524,
												"nodeType": "ExpressionStatement",
												"src": "2303:78:4"
											}
										]
									},
									"documentation": {
										"id": 493,
										"nodeType": "StructuredDocumentation",
										"src": "1165:906:4",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 526,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 498,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 495,
												"mutability": "mutable",
												"name": "recipient",
												"nodeType": "VariableDeclaration",
												"scope": 526,
												"src": "2095:25:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 494,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2095:15:4",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 497,
												"mutability": "mutable",
												"name": "amount",
												"nodeType": "VariableDeclaration",
												"scope": 526,
												"src": "2122:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 496,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2122:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2094:43:4"
									},
									"returnParameters": {
										"id": 499,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2147:0:4"
									},
									"scope": 717,
									"src": "2076:312:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 542,
										"nodeType": "Block",
										"src": "3219:84:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 537,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 529,
															"src": "3249:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 538,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 531,
															"src": "3257:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 539,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3263:32:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 536,
														"name": "functionCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															543,
															563
														],
														"referencedDeclaration": 563,
														"src": "3236:12:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) returns (bytes memory)"
														}
													},
													"id": 540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3236:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 535,
												"id": 541,
												"nodeType": "Return",
												"src": "3229:67:4"
											}
										]
									},
									"documentation": {
										"id": 527,
										"nodeType": "StructuredDocumentation",
										"src": "2394:731:4",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 543,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 532,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 529,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "3152:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 528,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3152:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 531,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "3168:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 530,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3168:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3151:35:4"
									},
									"returnParameters": {
										"id": 535,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 543,
												"src": "3205:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 533,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3205:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3204:14:4"
									},
									"scope": 717,
									"src": "3130:173:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 562,
										"nodeType": "Block",
										"src": "3672:76:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 556,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 546,
															"src": "3711:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 557,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 548,
															"src": "3719:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 558,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3725:1:4",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 559,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 550,
															"src": "3728:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 555,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															583,
															633
														],
														"referencedDeclaration": 633,
														"src": "3689:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3689:52:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 554,
												"id": 561,
												"nodeType": "Return",
												"src": "3682:59:4"
											}
										]
									},
									"documentation": {
										"id": 544,
										"nodeType": "StructuredDocumentation",
										"src": "3309:211:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 563,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 546,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "3556:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 545,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3556:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 548,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "3580:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 547,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3580:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 550,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "3607:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 549,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3607:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3546:93:4"
									},
									"returnParameters": {
										"id": 554,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 553,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "3658:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 552,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3658:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3657:14:4"
									},
									"scope": 717,
									"src": "3525:223:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 582,
										"nodeType": "Block",
										"src": "4253:111:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 576,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 566,
															"src": "4292:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 577,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 568,
															"src": "4300:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 578,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 570,
															"src": "4306:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 579,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4313:43:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 575,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															583,
															633
														],
														"referencedDeclaration": 633,
														"src": "4270:21:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 580,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4270:87:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 574,
												"id": 581,
												"nodeType": "Return",
												"src": "4263:94:4"
											}
										]
									},
									"documentation": {
										"id": 564,
										"nodeType": "StructuredDocumentation",
										"src": "3754:351:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 583,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4150:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 565,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4150:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 568,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4174:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 567,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4174:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 570,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4201:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 569,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4201:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4140:80:4"
									},
									"returnParameters": {
										"id": 574,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 573,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 583,
												"src": "4239:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 572,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4239:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4238:14:4"
									},
									"scope": 717,
									"src": "4110:254:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 632,
										"nodeType": "Block",
										"src": "4791:320:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 604,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 600,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4817:4:4",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$717",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$717",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 599,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4809:7:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 598,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4809:7:4",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 601,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4809:13:4",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 602,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "4809:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 603,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 590,
																"src": "4834:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4809:30:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 605,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4841:40:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 597,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4801:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4801:81:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 607,
												"nodeType": "ExpressionStatement",
												"src": "4801:81:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 610,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 586,
																	"src": "4911:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 609,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 492,
																"src": "4900:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 611,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4900:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 612,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4920:31:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															},
															"value": "Address: call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																"typeString": "literal_string \"Address: call to non-contract\""
															}
														],
														"id": 608,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4892:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 613,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4892:60:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 614,
												"nodeType": "ExpressionStatement",
												"src": "4892:60:4"
											},
											{
												"assignments": [
													616,
													618
												],
												"declarations": [
													{
														"constant": false,
														"id": 616,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 632,
														"src": "4964:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 615,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4964:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 618,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 632,
														"src": "4978:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 617,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4978:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 625,
												"initialValue": {
													"arguments": [
														{
															"id": 623,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 588,
															"src": "5031:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 619,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 586,
																"src": "5005:6:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 620,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5005:11:4",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 622,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 621,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 590,
																"src": "5024:5:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5005:25:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 624,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5005:31:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4963:73:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 627,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 616,
															"src": "5070:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 628,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 618,
															"src": "5079:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 629,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 592,
															"src": "5091:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 626,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 716,
														"src": "5053:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 630,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5053:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 596,
												"id": 631,
												"nodeType": "Return",
												"src": "5046:58:4"
											}
										]
									},
									"documentation": {
										"id": 584,
										"nodeType": "StructuredDocumentation",
										"src": "4370:237:4",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 633,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 586,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "4652:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 585,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4652:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 588,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "4676:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 587,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4676:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"mutability": "mutable",
												"name": "value",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "4703:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 589,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4703:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "4726:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 591,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4726:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4642:116:4"
									},
									"returnParameters": {
										"id": 596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 595,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 633,
												"src": "4777:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 594,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4777:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4776:14:4"
									},
									"scope": 717,
									"src": "4612:499:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 649,
										"nodeType": "Block",
										"src": "5388:97:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 644,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "5424:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 645,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 638,
															"src": "5432:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 646,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5438:39:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 643,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															650,
															685
														],
														"referencedDeclaration": 685,
														"src": "5405:18:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 647,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5405:73:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 642,
												"id": 648,
												"nodeType": "Return",
												"src": "5398:80:4"
											}
										]
									},
									"documentation": {
										"id": 634,
										"nodeType": "StructuredDocumentation",
										"src": "5117:166:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 650,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "5316:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 635,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5316:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 638,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "5332:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 637,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5332:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5315:35:4"
									},
									"returnParameters": {
										"id": 642,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 641,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "5374:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 640,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5374:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5373:14:4"
									},
									"scope": 717,
									"src": "5288:197:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 684,
										"nodeType": "Block",
										"src": "5827:228:4",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 664,
																	"name": "target",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 653,
																	"src": "5856:6:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 663,
																"name": "isContract",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 492,
																"src": "5845:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																	"typeString": "function (address) view returns (bool)"
																}
															},
															"id": 665,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5845:18:4",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a207374617469632063616c6c20746f206e6f6e2d636f6e7472616374",
															"id": 666,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5865:38:4",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															},
															"value": "Address: static call to non-contract"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c79cc78e4f16ce3933a42b84c73868f93bb4a59c031a0acf576679de98c608a9",
																"typeString": "literal_string \"Address: static call to non-contract\""
															}
														],
														"id": 662,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5837:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 667,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5837:67:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 668,
												"nodeType": "ExpressionStatement",
												"src": "5837:67:4"
											},
											{
												"assignments": [
													670,
													672
												],
												"declarations": [
													{
														"constant": false,
														"id": 670,
														"mutability": "mutable",
														"name": "success",
														"nodeType": "VariableDeclaration",
														"scope": 684,
														"src": "5916:12:4",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 669,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5916:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 672,
														"mutability": "mutable",
														"name": "returndata",
														"nodeType": "VariableDeclaration",
														"scope": 684,
														"src": "5930:23:4",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 671,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5930:5:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 677,
												"initialValue": {
													"arguments": [
														{
															"id": 675,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 655,
															"src": "5975:4:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 673,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 653,
															"src": "5957:6:4",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 674,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "5957:17:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 676,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5957:23:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5915:65:4"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 679,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 670,
															"src": "6014:7:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 680,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 672,
															"src": "6023:10:4",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 681,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 657,
															"src": "6035:12:4",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 678,
														"name": "verifyCallResult",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 716,
														"src": "5997:16:4",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (bool,bytes memory,string memory) pure returns (bytes memory)"
														}
													},
													"id": 682,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5997:51:4",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 661,
												"id": 683,
												"nodeType": "Return",
												"src": "5990:58:4"
											}
										]
									},
									"documentation": {
										"id": 651,
										"nodeType": "StructuredDocumentation",
										"src": "5491:173:4",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 685,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 658,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "target",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "5706:14:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5706:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "data",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "5730:17:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 654,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5730:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 657,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "5757:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 656,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5757:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5696:93:4"
									},
									"returnParameters": {
										"id": 661,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 660,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 685,
												"src": "5813:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 659,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5813:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5812:14:4"
									},
									"scope": 717,
									"src": "5669:386:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 715,
										"nodeType": "Block",
										"src": "6435:532:4",
										"statements": [
											{
												"condition": {
													"id": 697,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 688,
													"src": "6449:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 713,
													"nodeType": "Block",
													"src": "6506:455:4",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 704,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 701,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 690,
																		"src": "6590:10:4",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 702,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "6590:17:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 703,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6610:1:4",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "6590:21:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 711,
																"nodeType": "Block",
																"src": "6898:53:4",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 708,
																					"name": "errorMessage",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 692,
																					"src": "6923:12:4",
																					"typeDescriptions": {
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_string_memory_ptr",
																						"typeString": "string memory"
																					}
																				],
																				"id": 707,
																				"name": "revert",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967277,
																					4294967277
																				],
																				"referencedDeclaration": 4294967277,
																				"src": "6916:6:4",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (string memory) pure"
																				}
																			},
																			"id": 709,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "6916:20:4",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 710,
																		"nodeType": "ExpressionStatement",
																		"src": "6916:20:4"
																	}
																]
															},
															"id": 712,
															"nodeType": "IfStatement",
															"src": "6586:365:4",
															"trueBody": {
																"id": 706,
																"nodeType": "Block",
																"src": "6613:279:4",
																"statements": [
																	{
																		"AST": {
																			"nodeType": "YulBlock",
																			"src": "6733:145:4",
																			"statements": [
																				{
																					"nodeType": "YulVariableDeclaration",
																					"src": "6755:40:4",
																					"value": {
																						"arguments": [
																							{
																								"name": "returndata",
																								"nodeType": "YulIdentifier",
																								"src": "6784:10:4"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "6778:5:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6778:17:4"
																					},
																					"variables": [
																						{
																							"name": "returndata_size",
																							"nodeType": "YulTypedName",
																							"src": "6759:15:4",
																							"type": ""
																						}
																					]
																				},
																				{
																					"expression": {
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "6827:2:4",
																										"type": "",
																										"value": "32"
																									},
																									{
																										"name": "returndata",
																										"nodeType": "YulIdentifier",
																										"src": "6831:10:4"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "6823:3:4"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "6823:19:4"
																							},
																							{
																								"name": "returndata_size",
																								"nodeType": "YulIdentifier",
																								"src": "6844:15:4"
																							}
																						],
																						"functionName": {
																							"name": "revert",
																							"nodeType": "YulIdentifier",
																							"src": "6816:6:4"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6816:44:4"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "6816:44:4"
																				}
																			]
																		},
																		"evmVersion": "istanbul",
																		"externalReferences": [
																			{
																				"declaration": 690,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6784:10:4",
																				"valueSize": 1
																			},
																			{
																				"declaration": 690,
																				"isOffset": false,
																				"isSlot": false,
																				"src": "6831:10:4",
																				"valueSize": 1
																			}
																		],
																		"id": 705,
																		"nodeType": "InlineAssembly",
																		"src": "6724:154:4"
																	}
																]
															}
														}
													]
												},
												"id": 714,
												"nodeType": "IfStatement",
												"src": "6445:516:4",
												"trueBody": {
													"id": 700,
													"nodeType": "Block",
													"src": "6458:42:4",
													"statements": [
														{
															"expression": {
																"id": 698,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 690,
																"src": "6479:10:4",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 696,
															"id": 699,
															"nodeType": "Return",
															"src": "6472:17:4"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 686,
										"nodeType": "StructuredDocumentation",
										"src": "6061:209:4",
										"text": " @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason using the provided one.\n _Available since v4.3._"
									},
									"id": 716,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 693,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "success",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "6310:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 687,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6310:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 690,
												"mutability": "mutable",
												"name": "returndata",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "6332:23:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 689,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6332:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 692,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "6365:26:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 691,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6365:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6300:97:4"
									},
									"returnParameters": {
										"id": 696,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 695,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 716,
												"src": "6421:12:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 694,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6421:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6420:14:4"
									},
									"scope": 717,
									"src": "6275:692:4",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 718,
							"src": "179:6790:4"
						}
					],
					"src": "86:6884:4"
				},
				"id": 4
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							761
						],
						"Initializable": [
							170
						]
					},
					"id": 762,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 719,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "86:23:5"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 720,
							"nodeType": "ImportDirective",
							"scope": 762,
							"sourceUnit": 171,
							"src": "110:42:5",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 722,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 170,
										"src": "691:13:5"
									},
									"id": 723,
									"nodeType": "InheritanceSpecifier",
									"src": "691:13:5"
								}
							],
							"contractDependencies": [
								170
							],
							"contractKind": "contract",
							"documentation": {
								"id": 721,
								"nodeType": "StructuredDocumentation",
								"src": "154:496:5",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 761,
							"linearizedBaseContracts": [
								761,
								170
							],
							"name": "ContextUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 731,
										"nodeType": "Block",
										"src": "758:43:5",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 728,
														"name": "__Context_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 738,
														"src": "768:24:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "768:26:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 730,
												"nodeType": "ExpressionStatement",
												"src": "768:26:5"
											}
										]
									},
									"id": 732,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 726,
											"modifierName": {
												"id": 725,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "746:11:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "746:11:5"
										}
									],
									"name": "__Context_init",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 724,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "734:2:5"
									},
									"returnParameters": {
										"id": 727,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "758:0:5"
									},
									"scope": 761,
									"src": "711:90:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 737,
										"nodeType": "Block",
										"src": "864:7:5",
										"statements": []
									},
									"id": 738,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 735,
											"modifierName": {
												"id": 734,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "852:11:5"
											},
											"nodeType": "ModifierInvocation",
											"src": "852:11:5"
										}
									],
									"name": "__Context_init_unchained",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 733,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "840:2:5"
									},
									"returnParameters": {
										"id": 736,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "864:0:5"
									},
									"scope": 761,
									"src": "807:64:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 746,
										"nodeType": "Block",
										"src": "938:34:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 743,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "955:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 744,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "955:10:5",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 742,
												"id": 745,
												"nodeType": "Return",
												"src": "948:17:5"
											}
										]
									},
									"id": 747,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 739,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "895:2:5"
									},
									"returnParameters": {
										"id": 742,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 741,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 747,
												"src": "929:7:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 740,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "929:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "928:9:5"
									},
									"scope": 761,
									"src": "876:96:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 755,
										"nodeType": "Block",
										"src": "1045:32:5",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 752,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1062:3:5",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 753,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1062:8:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 751,
												"id": 754,
												"nodeType": "Return",
												"src": "1055:15:5"
											}
										]
									},
									"id": 756,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 748,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "995:2:5"
									},
									"returnParameters": {
										"id": 751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 756,
												"src": "1029:14:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 749,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1029:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1028:16:5"
									},
									"scope": 761,
									"src": "978:99:5",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 760,
									"mutability": "mutable",
									"name": "__gap",
									"nodeType": "VariableDeclaration",
									"scope": 761,
									"src": "1082:25:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 757,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1082:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 759,
										"length": {
											"hexValue": "3530",
											"id": 758,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1090:2:5",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1082:11:5",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 762,
							"src": "651:459:5"
						}
					],
					"src": "86:1025:5"
				},
				"id": 5
			},
			"@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol",
					"exportedSymbols": {
						"SafeMathUpgradeable": [
							1073
						]
					},
					"id": 1074,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 763,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "92:23:6"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 764,
								"nodeType": "StructuredDocumentation",
								"src": "270:196:6",
								"text": " @dev Wrappers over Solidity's arithmetic operations.\n NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n now has built in overflow checking."
							},
							"fullyImplemented": true,
							"id": 1073,
							"linearizedBaseContracts": [
								1073
							],
							"name": "SafeMathUpgradeable",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 795,
										"nodeType": "Block",
										"src": "713:140:6",
										"statements": [
											{
												"id": 794,
												"nodeType": "UncheckedBlock",
												"src": "723:124:6",
												"statements": [
													{
														"assignments": [
															777
														],
														"declarations": [
															{
																"constant": false,
																"id": 777,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 794,
																"src": "747:9:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 776,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "747:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 781,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 780,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 778,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 767,
																"src": "759:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 779,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 769,
																"src": "763:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "759:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "747:17:6"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 784,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 782,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 777,
																"src": "782:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 783,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 767,
																"src": "786:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "782:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 789,
														"nodeType": "IfStatement",
														"src": "778:28:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 785,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "797:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 786,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "804:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 787,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "796:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 775,
															"id": 788,
															"nodeType": "Return",
															"src": "789:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 790,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "828:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 791,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 777,
																	"src": "834:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 792,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "827:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 775,
														"id": 793,
														"nodeType": "Return",
														"src": "820:16:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 765,
										"nodeType": "StructuredDocumentation",
										"src": "501:131:6",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 796,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 770,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 767,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "653:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 766,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "653:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 769,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "664:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 768,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "664:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "652:22:6"
									},
									"returnParameters": {
										"id": 775,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 772,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "698:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 771,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "698:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 774,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 796,
												"src": "704:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 773,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "704:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "697:15:6"
									},
									"scope": 1073,
									"src": "637:216:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 823,
										"nodeType": "Block",
										"src": "1075:113:6",
										"statements": [
											{
												"id": 822,
												"nodeType": "UncheckedBlock",
												"src": "1085:97:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 810,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 808,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 801,
																"src": "1113:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 809,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 799,
																"src": "1117:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1113:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 815,
														"nodeType": "IfStatement",
														"src": "1109:28:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 811,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1128:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 812,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1135:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 813,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1127:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 807,
															"id": 814,
															"nodeType": "Return",
															"src": "1120:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 816,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1159:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 819,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 817,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 799,
																		"src": "1165:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 818,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 801,
																		"src": "1169:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1165:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 820,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1158:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 807,
														"id": 821,
														"nodeType": "Return",
														"src": "1151:20:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 797,
										"nodeType": "StructuredDocumentation",
										"src": "859:135:6",
										"text": " @dev Returns the substraction of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 824,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 802,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 799,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "1015:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 798,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1015:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 801,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "1026:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 800,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1026:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1014:22:6"
									},
									"returnParameters": {
										"id": 807,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 804,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "1060:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 803,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1060:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 824,
												"src": "1066:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 805,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1066:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1059:15:6"
									},
									"scope": 1073,
									"src": "999:189:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 865,
										"nodeType": "Block",
										"src": "1412:417:6",
										"statements": [
											{
												"id": 864,
												"nodeType": "UncheckedBlock",
												"src": "1422:401:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 838,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 836,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 827,
																"src": "1680:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 837,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1685:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1680:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 843,
														"nodeType": "IfStatement",
														"src": "1676:28:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 839,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1696:4:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 840,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1702:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 841,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1695:9:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 835,
															"id": 842,
															"nodeType": "Return",
															"src": "1688:16:6"
														}
													},
													{
														"assignments": [
															845
														],
														"declarations": [
															{
																"constant": false,
																"id": 845,
																"mutability": "mutable",
																"name": "c",
																"nodeType": "VariableDeclaration",
																"scope": 864,
																"src": "1718:9:6",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 844,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1718:7:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 849,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 848,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 846,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 827,
																"src": "1730:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 847,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 829,
																"src": "1734:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1730:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1718:17:6"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 854,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 852,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 850,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "1753:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 851,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 827,
																	"src": "1757:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1753:5:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 853,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 829,
																"src": "1762:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1753:10:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 859,
														"nodeType": "IfStatement",
														"src": "1749:33:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 855,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1773:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 856,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1780:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 857,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1772:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 835,
															"id": 858,
															"nodeType": "Return",
															"src": "1765:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 860,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1804:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 861,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 845,
																	"src": "1810:1:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 862,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1803:9:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 835,
														"id": 863,
														"nodeType": "Return",
														"src": "1796:16:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 825,
										"nodeType": "StructuredDocumentation",
										"src": "1194:137:6",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n _Available since v3.4._"
									},
									"id": 866,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 830,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 827,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "1352:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 826,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1352:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 829,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "1363:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 828,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1363:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1351:22:6"
									},
									"returnParameters": {
										"id": 835,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 832,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "1397:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 831,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1397:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 834,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "1403:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 833,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1403:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1396:15:6"
									},
									"scope": 1073,
									"src": "1336:493:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 893,
										"nodeType": "Block",
										"src": "2054:114:6",
										"statements": [
											{
												"id": 892,
												"nodeType": "UncheckedBlock",
												"src": "2064:98:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 880,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 878,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 871,
																"src": "2092:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 879,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2097:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2092:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 885,
														"nodeType": "IfStatement",
														"src": "2088:29:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 881,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2108:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 882,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2115:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 883,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2107:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 877,
															"id": 884,
															"nodeType": "Return",
															"src": "2100:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 886,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2139:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 889,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 887,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 869,
																		"src": "2145:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 888,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 871,
																		"src": "2149:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2145:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 890,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2138:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 877,
														"id": 891,
														"nodeType": "Return",
														"src": "2131:20:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 867,
										"nodeType": "StructuredDocumentation",
										"src": "1835:138:6",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 894,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 872,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "1994:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 868,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1994:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "2005:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 870,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2005:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1993:22:6"
									},
									"returnParameters": {
										"id": 877,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 874,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "2039:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 873,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2039:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 876,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 894,
												"src": "2045:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 875,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2045:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2038:15:6"
									},
									"scope": 1073,
									"src": "1978:190:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 921,
										"nodeType": "Block",
										"src": "2403:114:6",
										"statements": [
											{
												"id": 920,
												"nodeType": "UncheckedBlock",
												"src": "2413:98:6",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 908,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 906,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 899,
																"src": "2441:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 907,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2446:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2441:6:6",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 913,
														"nodeType": "IfStatement",
														"src": "2437:29:6",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 909,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2457:5:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 910,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2464:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 911,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2456:10:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 905,
															"id": 912,
															"nodeType": "Return",
															"src": "2449:17:6"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 914,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2488:4:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 917,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 915,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 897,
																		"src": "2494:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 916,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 899,
																		"src": "2498:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2494:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 918,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2487:13:6",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 905,
														"id": 919,
														"nodeType": "Return",
														"src": "2480:20:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 895,
										"nodeType": "StructuredDocumentation",
										"src": "2174:148:6",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n _Available since v3.4._"
									},
									"id": 922,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 900,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 897,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2343:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 896,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2343:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 899,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2354:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 898,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2354:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2342:22:6"
									},
									"returnParameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 902,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2388:4:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 901,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2388:4:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 904,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 922,
												"src": "2394:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 903,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2394:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2387:15:6"
									},
									"scope": 1073,
									"src": "2327:190:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 936,
										"nodeType": "Block",
										"src": "2819:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 934,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 932,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 925,
														"src": "2836:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"id": 933,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 927,
														"src": "2840:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2836:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 931,
												"id": 935,
												"nodeType": "Return",
												"src": "2829:12:6"
											}
										]
									},
									"documentation": {
										"id": 923,
										"nodeType": "StructuredDocumentation",
										"src": "2523:224:6",
										"text": " @dev Returns the addition of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `+` operator.\n Requirements:\n - Addition cannot overflow."
									},
									"id": 937,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "add",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 925,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2765:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2765:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2776:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2776:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2764:22:6"
									},
									"returnParameters": {
										"id": 931,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 930,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 937,
												"src": "2810:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 929,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2810:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2809:9:6"
									},
									"scope": 1073,
									"src": "2752:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 951,
										"nodeType": "Block",
										"src": "3186:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 949,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 947,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 940,
														"src": "3203:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "-",
													"rightExpression": {
														"id": 948,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 942,
														"src": "3207:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3203:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 946,
												"id": 950,
												"nodeType": "Return",
												"src": "3196:12:6"
											}
										]
									},
									"documentation": {
										"id": 938,
										"nodeType": "StructuredDocumentation",
										"src": "2854:260:6",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting on\n overflow (when the result is negative).\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 952,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 943,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 940,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "3132:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 939,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3132:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "3143:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 941,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3143:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3131:22:6"
									},
									"returnParameters": {
										"id": 946,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 945,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 952,
												"src": "3177:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 944,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3177:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3176:9:6"
									},
									"scope": 1073,
									"src": "3119:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 966,
										"nodeType": "Block",
										"src": "3529:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 964,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 962,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 955,
														"src": "3546:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "*",
													"rightExpression": {
														"id": 963,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 957,
														"src": "3550:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3546:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 961,
												"id": 965,
												"nodeType": "Return",
												"src": "3539:12:6"
											}
										]
									},
									"documentation": {
										"id": 953,
										"nodeType": "StructuredDocumentation",
										"src": "3221:236:6",
										"text": " @dev Returns the multiplication of two unsigned integers, reverting on\n overflow.\n Counterpart to Solidity's `*` operator.\n Requirements:\n - Multiplication cannot overflow."
									},
									"id": 967,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mul",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 955,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "3475:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 954,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3475:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 957,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "3486:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 956,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3486:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3474:22:6"
									},
									"returnParameters": {
										"id": 961,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 960,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 967,
												"src": "3520:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 959,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3520:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3519:9:6"
									},
									"scope": 1073,
									"src": "3462:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 981,
										"nodeType": "Block",
										"src": "3914:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 979,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 977,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 970,
														"src": "3931:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "/",
													"rightExpression": {
														"id": 978,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 972,
														"src": "3935:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3931:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 976,
												"id": 980,
												"nodeType": "Return",
												"src": "3924:12:6"
											}
										]
									},
									"documentation": {
										"id": 968,
										"nodeType": "StructuredDocumentation",
										"src": "3564:278:6",
										"text": " @dev Returns the integer division of two unsigned integers, reverting on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator.\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 982,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 973,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 970,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "3860:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 969,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3860:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 972,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "3871:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 971,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3871:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3859:22:6"
									},
									"returnParameters": {
										"id": 976,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 975,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 982,
												"src": "3905:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 974,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3905:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3904:9:6"
									},
									"scope": 1073,
									"src": "3847:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 996,
										"nodeType": "Block",
										"src": "4463:29:6",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 994,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 992,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 985,
														"src": "4480:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "%",
													"rightExpression": {
														"id": 993,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 987,
														"src": "4484:1:6",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4480:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 991,
												"id": 995,
												"nodeType": "Return",
												"src": "4473:12:6"
											}
										]
									},
									"documentation": {
										"id": 983,
										"nodeType": "StructuredDocumentation",
										"src": "3949:442:6",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting when dividing by zero.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 997,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 985,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 997,
												"src": "4409:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 984,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4409:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 987,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 997,
												"src": "4420:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 986,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4420:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4408:22:6"
									},
									"returnParameters": {
										"id": 991,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 990,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 997,
												"src": "4454:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 989,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4454:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4453:9:6"
									},
									"scope": 1073,
									"src": "4396:96:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1021,
										"nodeType": "Block",
										"src": "5081:106:6",
										"statements": [
											{
												"id": 1020,
												"nodeType": "UncheckedBlock",
												"src": "5091:90:6",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1012,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1010,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1002,
																		"src": "5123:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "<=",
																	"rightExpression": {
																		"id": 1011,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1000,
																		"src": "5128:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "5123:6:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1013,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1004,
																	"src": "5131:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1009,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5115:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1014,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5115:29:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1015,
														"nodeType": "ExpressionStatement",
														"src": "5115:29:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1018,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1016,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1000,
																"src": "5165:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "-",
															"rightExpression": {
																"id": 1017,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1002,
																"src": "5169:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5165:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1008,
														"id": 1019,
														"nodeType": "Return",
														"src": "5158:12:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 998,
										"nodeType": "StructuredDocumentation",
										"src": "4498:453:6",
										"text": " @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n overflow (when the result is negative).\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {trySub}.\n Counterpart to Solidity's `-` operator.\n Requirements:\n - Subtraction cannot overflow."
									},
									"id": 1022,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sub",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1005,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1000,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "4978:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 999,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4978:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1002,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "4997:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1001,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4997:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1004,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "5016:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1003,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5016:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4968:80:6"
									},
									"returnParameters": {
										"id": 1008,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1007,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1022,
												"src": "5072:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1006,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5072:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5071:9:6"
									},
									"scope": 1073,
									"src": "4956:231:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1046,
										"nodeType": "Block",
										"src": "5796:105:6",
										"statements": [
											{
												"id": 1045,
												"nodeType": "UncheckedBlock",
												"src": "5806:89:6",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1037,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1035,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1027,
																		"src": "5838:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1036,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5842:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5838:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1038,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1029,
																	"src": "5845:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1034,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "5830:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1039,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5830:28:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1040,
														"nodeType": "ExpressionStatement",
														"src": "5830:28:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1043,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1041,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1025,
																"src": "5879:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 1042,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1027,
																"src": "5883:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5879:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1033,
														"id": 1044,
														"nodeType": "Return",
														"src": "5872:12:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1023,
										"nodeType": "StructuredDocumentation",
										"src": "5193:473:6",
										"text": " @dev Returns the integer division of two unsigned integers, reverting with custom message on\n division by zero. The result is rounded towards zero.\n Counterpart to Solidity's `/` operator. Note: this function uses a\n `revert` opcode (which leaves remaining gas untouched) while Solidity\n uses an invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1047,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "div",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1025,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "5693:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1024,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5693:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1027,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "5712:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5712:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1029,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "5731:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1028,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5731:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5683:80:6"
									},
									"returnParameters": {
										"id": 1033,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1032,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1047,
												"src": "5787:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1031,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5787:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5786:9:6"
									},
									"scope": 1073,
									"src": "5671:230:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1071,
										"nodeType": "Block",
										"src": "6672:105:6",
										"statements": [
											{
												"id": 1070,
												"nodeType": "UncheckedBlock",
												"src": "6682:89:6",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1062,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1060,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1052,
																		"src": "6714:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": ">",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 1061,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "6718:1:6",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "6714:5:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																{
																	"id": 1063,
																	"name": "errorMessage",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1054,
																	"src": "6721:12:6",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	{
																		"typeIdentifier": "t_string_memory_ptr",
																		"typeString": "string memory"
																	}
																],
																"id": 1059,
																"name": "require",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	4294967278,
																	4294967278
																],
																"referencedDeclaration": 4294967278,
																"src": "6706:7:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																	"typeString": "function (bool,string memory) pure"
																}
															},
															"id": 1064,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6706:28:6",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 1065,
														"nodeType": "ExpressionStatement",
														"src": "6706:28:6"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1068,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1066,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1050,
																"src": "6755:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "%",
															"rightExpression": {
																"id": 1067,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1052,
																"src": "6759:1:6",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6755:5:6",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 1058,
														"id": 1069,
														"nodeType": "Return",
														"src": "6748:12:6"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1048,
										"nodeType": "StructuredDocumentation",
										"src": "5907:635:6",
										"text": " @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n reverting with custom message when dividing by zero.\n CAUTION: This function is deprecated because it requires allocating memory for the error\n message unnecessarily. For custom revert reasons use {tryMod}.\n Counterpart to Solidity's `%` operator. This function uses a `revert`\n opcode (which leaves remaining gas untouched) while Solidity uses an\n invalid opcode to revert (consuming all remaining gas).\n Requirements:\n - The divisor cannot be zero."
									},
									"id": 1072,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mod",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1050,
												"mutability": "mutable",
												"name": "a",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "6569:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1049,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6569:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1052,
												"mutability": "mutable",
												"name": "b",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "6588:9:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1051,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6588:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1054,
												"mutability": "mutable",
												"name": "errorMessage",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "6607:26:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1053,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6607:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6559:80:6"
									},
									"returnParameters": {
										"id": 1058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "",
												"nodeType": "VariableDeclaration",
												"scope": 1072,
												"src": "6663:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1056,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6663:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6662:9:6"
									},
									"scope": 1073,
									"src": "6547:230:6",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1074,
							"src": "467:6312:6"
						}
					],
					"src": "92:6688:6"
				},
				"id": 6
			},
			"contracts/IDO/AlphaSEAMigration.sol": {
				"ast": {
					"absolutePath": "contracts/IDO/AlphaSEAMigration.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							717
						],
						"ContextUpgradeable": [
							761
						],
						"IERC20Upgradeable": [
							248
						],
						"Initializable": [
							170
						],
						"OwnableUpgradeable": [
							125
						],
						"SafeERC20Upgradeable": [
							472
						],
						"SafeMathUpgradeable": [
							1073
						],
						"aSEAMigration": [
							1326
						]
					},
					"id": 1327,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1075,
							"literals": [
								"solidity",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "32:22:7"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"id": 1076,
							"nodeType": "ImportDirective",
							"scope": 1327,
							"sourceUnit": 249,
							"src": "56:79:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol",
							"id": 1077,
							"nodeType": "ImportDirective",
							"scope": 1327,
							"sourceUnit": 473,
							"src": "136:88:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"id": 1078,
							"nodeType": "ImportDirective",
							"scope": 1327,
							"sourceUnit": 171,
							"src": "225:75:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 1079,
							"nodeType": "ImportDirective",
							"scope": 1327,
							"sourceUnit": 126,
							"src": "301:75:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/utils/math/SafeMathUpgradeable.sol",
							"id": 1080,
							"nodeType": "ImportDirective",
							"scope": 1327,
							"sourceUnit": 1074,
							"src": "377:80:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1081,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 170,
										"src": "485:13:7"
									},
									"id": 1082,
									"nodeType": "InheritanceSpecifier",
									"src": "485:13:7"
								},
								{
									"baseName": {
										"id": 1083,
										"name": "OwnableUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 125,
										"src": "500:18:7"
									},
									"id": 1084,
									"nodeType": "InheritanceSpecifier",
									"src": "500:18:7"
								}
							],
							"contractDependencies": [
								125,
								170,
								761
							],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1326,
							"linearizedBaseContracts": [
								1326,
								125,
								761,
								170
							],
							"name": "aSEAMigration",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"id": 1088,
									"libraryName": {
										"id": 1085,
										"name": "SafeERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 472,
										"src": "531:20:7"
									},
									"nodeType": "UsingForDirective",
									"src": "525:49:7",
									"typeName": {
										"id": 1087,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1086,
											"name": "IERC20Upgradeable",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 248,
											"src": "556:17:7"
										},
										"referencedDeclaration": 248,
										"src": "556:17:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
											"typeString": "contract IERC20Upgradeable"
										}
									}
								},
								{
									"id": 1091,
									"libraryName": {
										"id": 1089,
										"name": "SafeMathUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1073,
										"src": "585:19:7"
									},
									"nodeType": "UsingForDirective",
									"src": "579:38:7",
									"typeName": {
										"id": 1090,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "609:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"functionSelector": "a85adeab",
									"id": 1093,
									"mutability": "mutable",
									"name": "endTimestamp",
									"nodeType": "VariableDeclaration",
									"scope": 1326,
									"src": "623:27:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1092,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "623:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "e6fd48bc",
									"id": 1095,
									"mutability": "mutable",
									"name": "startTimestamp",
									"nodeType": "VariableDeclaration",
									"scope": 1326,
									"src": "656:29:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1094,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "656:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "f019e2b2",
									"id": 1097,
									"mutability": "mutable",
									"name": "maxAmt",
									"nodeType": "VariableDeclaration",
									"scope": 1326,
									"src": "692:21:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 1096,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "692:7:7",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "ff257dad",
									"id": 1100,
									"mutability": "mutable",
									"name": "SEA",
									"nodeType": "VariableDeclaration",
									"scope": 1326,
									"src": "720:28:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
										"typeString": "contract IERC20Upgradeable"
									},
									"typeName": {
										"id": 1099,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1098,
											"name": "IERC20Upgradeable",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 248,
											"src": "720:17:7"
										},
										"referencedDeclaration": 248,
										"src": "720:17:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
											"typeString": "contract IERC20Upgradeable"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "5d2b6a0c",
									"id": 1103,
									"mutability": "mutable",
									"name": "aSEA",
									"nodeType": "VariableDeclaration",
									"scope": 1326,
									"src": "754:29:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
										"typeString": "contract IERC20Upgradeable"
									},
									"typeName": {
										"id": 1102,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 1101,
											"name": "IERC20Upgradeable",
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 248,
											"src": "754:17:7"
										},
										"referencedDeclaration": 248,
										"src": "754:17:7",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
											"typeString": "contract IERC20Upgradeable"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "392e53cd",
									"id": 1105,
									"mutability": "mutable",
									"name": "isInitialized",
									"nodeType": "VariableDeclaration",
									"scope": 1326,
									"src": "790:25:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 1104,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "790:4:7",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"functionSelector": "a6dd4c66",
									"id": 1109,
									"mutability": "mutable",
									"name": "senderInfo",
									"nodeType": "VariableDeclaration",
									"scope": 1326,
									"src": "822:45:7",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 1108,
										"keyType": {
											"id": 1106,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "830:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "822:27:7",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 1107,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "841:7:7",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "public"
								},
								{
									"body": {
										"id": 1117,
										"nodeType": "Block",
										"src": "901:69:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1112,
															"name": "isInitialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1105,
															"src": "919:13:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "6e6f7420696e697469616c697a6564",
															"id": 1113,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "934:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_23128ea0a9cf9f377be270d76b35163b9b8a58c0fa7025ab8017ab08d983de01",
																"typeString": "literal_string \"not initialized\""
															},
															"value": "not initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_23128ea0a9cf9f377be270d76b35163b9b8a58c0fa7025ab8017ab08d983de01",
																"typeString": "literal_string \"not initialized\""
															}
														],
														"id": 1111,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "911:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1114,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "911:41:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1115,
												"nodeType": "ExpressionStatement",
												"src": "911:41:7"
											},
											{
												"id": 1116,
												"nodeType": "PlaceholderStatement",
												"src": "962:1:7"
											}
										]
									},
									"id": 1118,
									"name": "onlyInitialized",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "898:2:7"
									},
									"src": "874:96:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1127,
										"nodeType": "Block",
										"src": "1002:74:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1122,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "1020:14:7",
															"subExpression": {
																"id": 1121,
																"name": "isInitialized",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1105,
																"src": "1021:13:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "616c726561647920696e697469616c697a6564",
															"id": 1123,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1036:21:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_6fad3ee6d344e662108f49bced409fae87c3af64246556bdd23a34dddc7e1adc",
																"typeString": "literal_string \"already initialized\""
															},
															"value": "already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_6fad3ee6d344e662108f49bced409fae87c3af64246556bdd23a34dddc7e1adc",
																"typeString": "literal_string \"already initialized\""
															}
														],
														"id": 1120,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1012:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1124,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1012:46:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1125,
												"nodeType": "ExpressionStatement",
												"src": "1012:46:7"
											},
											{
												"id": 1126,
												"nodeType": "PlaceholderStatement",
												"src": "1068:1:7"
											}
										]
									},
									"id": 1128,
									"name": "notInitialized",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 1119,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "999:2:7"
									},
									"src": "976:100:7",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1174,
										"nodeType": "Block",
										"src": "1238:253:7",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 1141,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 29,
														"src": "1248:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 1142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1248:16:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1143,
												"nodeType": "ExpressionStatement",
												"src": "1248:16:7"
											},
											{
												"expression": {
													"id": 1148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1144,
														"name": "SEA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1100,
														"src": "1274:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
															"typeString": "contract IERC20Upgradeable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1146,
																"name": "_SEA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1130,
																"src": "1298:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1145,
															"name": "IERC20Upgradeable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 248,
															"src": "1280:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$248_$",
																"typeString": "type(contract IERC20Upgradeable)"
															}
														},
														"id": 1147,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1280:23:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
															"typeString": "contract IERC20Upgradeable"
														}
													},
													"src": "1274:29:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"id": 1149,
												"nodeType": "ExpressionStatement",
												"src": "1274:29:7"
											},
											{
												"expression": {
													"id": 1154,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1150,
														"name": "aSEA",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1103,
														"src": "1313:4:7",
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
															"typeString": "contract IERC20Upgradeable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1152,
																"name": "_aSEA",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1132,
																"src": "1338:5:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 1151,
															"name": "IERC20Upgradeable",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 248,
															"src": "1320:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_contract$_IERC20Upgradeable_$248_$",
																"typeString": "type(contract IERC20Upgradeable)"
															}
														},
														"id": 1153,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1320:24:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
															"typeString": "contract IERC20Upgradeable"
														}
													},
													"src": "1313:31:7",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
														"typeString": "contract IERC20Upgradeable"
													}
												},
												"id": 1155,
												"nodeType": "ExpressionStatement",
												"src": "1313:31:7"
											},
											{
												"expression": {
													"id": 1158,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1156,
														"name": "startTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1095,
														"src": "1354:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1157,
														"name": "_startTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1134,
														"src": "1371:15:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1354:32:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1159,
												"nodeType": "ExpressionStatement",
												"src": "1354:32:7"
											},
											{
												"expression": {
													"id": 1162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1160,
														"name": "endTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "1396:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1161,
														"name": "_endTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1136,
														"src": "1411:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1396:28:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1163,
												"nodeType": "ExpressionStatement",
												"src": "1396:28:7"
											},
											{
												"expression": {
													"id": 1166,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1164,
														"name": "isInitialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1105,
														"src": "1434:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 1165,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1450:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1434:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1167,
												"nodeType": "ExpressionStatement",
												"src": "1434:21:7"
											},
											{
												"expression": {
													"id": 1172,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1168,
														"name": "maxAmt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1097,
														"src": "1465:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"commonType": {
															"typeIdentifier": "t_rational_120000000000000000000_by_1",
															"typeString": "int_const 120000000000000000000"
														},
														"id": 1171,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"leftExpression": {
															"hexValue": "313230",
															"id": 1169,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1474:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_120_by_1",
																"typeString": "int_const 120"
															},
															"value": "120"
														},
														"nodeType": "BinaryOperation",
														"operator": "*",
														"rightExpression": {
															"hexValue": "31653138",
															"id": 1170,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1480:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1000000000000000000_by_1",
																"typeString": "int_const 1000000000000000000"
															},
															"value": "1e18"
														},
														"src": "1474:10:7",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_120000000000000000000_by_1",
															"typeString": "int_const 120000000000000000000"
														}
													},
													"src": "1465:19:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1173,
												"nodeType": "ExpressionStatement",
												"src": "1465:19:7"
											}
										]
									},
									"functionSelector": "eb990c59",
									"id": 1175,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1139,
											"modifierName": {
												"id": 1138,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 169,
												"src": "1226:11:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "1226:11:7"
										}
									],
									"name": "initialize",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1130,
												"mutability": "mutable",
												"name": "_SEA",
												"nodeType": "VariableDeclaration",
												"scope": 1175,
												"src": "1111:12:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1129,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1111:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1132,
												"mutability": "mutable",
												"name": "_aSEA",
												"nodeType": "VariableDeclaration",
												"scope": 1175,
												"src": "1133:13:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1131,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1133:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1134,
												"mutability": "mutable",
												"name": "_startTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 1175,
												"src": "1156:23:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1133,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1156:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1136,
												"mutability": "mutable",
												"name": "_endTimestamp",
												"nodeType": "VariableDeclaration",
												"scope": 1175,
												"src": "1189:21:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1135,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1189:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1101:115:7"
									},
									"returnParameters": {
										"id": 1140,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1238:0:7"
									},
									"scope": 1326,
									"src": "1082:409:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1186,
										"nodeType": "Block",
										"src": "1542:38:7",
										"statements": [
											{
												"expression": {
													"id": 1184,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1182,
														"name": "isInitialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1105,
														"src": "1552:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1183,
														"name": "_bool",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1177,
														"src": "1568:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1552:21:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1185,
												"nodeType": "ExpressionStatement",
												"src": "1552:21:7"
											}
										]
									},
									"functionSelector": "a85717d3",
									"id": 1187,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1180,
											"modifierName": {
												"id": 1179,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "1532:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "1532:9:7"
										}
									],
									"name": "open",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1178,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1177,
												"mutability": "mutable",
												"name": "_bool",
												"nodeType": "VariableDeclaration",
												"scope": 1187,
												"src": "1511:10:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1176,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1511:4:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1510:12:7"
									},
									"returnParameters": {
										"id": 1181,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1542:0:7"
									},
									"scope": 1326,
									"src": "1497:83:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1256,
										"nodeType": "Block",
										"src": "1630:449:7",
										"statements": [
											{
												"assignments": [
													1193
												],
												"declarations": [
													{
														"constant": false,
														"id": 1193,
														"mutability": "mutable",
														"name": "amount",
														"nodeType": "VariableDeclaration",
														"scope": 1256,
														"src": "1640:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1192,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "1640:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1199,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 1196,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1672:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1672:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1194,
															"name": "aSEA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1103,
															"src": "1657:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 1195,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 187,
														"src": "1657:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1198,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1657:26:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1640:43:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1203,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1201,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1193,
																"src": "1701:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 1202,
																"name": "maxAmt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1097,
																"src": "1711:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1701:16:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "457863656564207468652073706563696669656420616d6f756e74",
															"id": 1204,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1719:29:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a3ee5da1969f0746e379ed9b363878f678c4fa49b6667e89c78c6eb03f4b21e8",
																"typeString": "literal_string \"Exceed the specified amount\""
															},
															"value": "Exceed the specified amount"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a3ee5da1969f0746e379ed9b363878f678c4fa49b6667e89c78c6eb03f4b21e8",
																"typeString": "literal_string \"Exceed the specified amount\""
															}
														],
														"id": 1200,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1693:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1205,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1693:56:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1206,
												"nodeType": "ExpressionStatement",
												"src": "1693:56:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1211,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1208,
																"name": "startTimestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1095,
																"src": "1767:14:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"expression": {
																	"id": 1209,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "1784:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1210,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "1784:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1767:32:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4e6f74207374617274656420796574",
															"id": 1212,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1801:17:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d50d58d9845759fa0f4f88546440afafe96f6ae942a43a12bfaee08bbfd20ab5",
																"typeString": "literal_string \"Not started yet\""
															},
															"value": "Not started yet"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d50d58d9845759fa0f4f88546440afafe96f6ae942a43a12bfaee08bbfd20ab5",
																"typeString": "literal_string \"Not started yet\""
															}
														],
														"id": 1207,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1759:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1213,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1759:60:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1214,
												"nodeType": "ExpressionStatement",
												"src": "1759:60:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1219,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1216,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "1837:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1217,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "1837:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1218,
																"name": "endTimestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "1855:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1837:30:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7377617070696e67206f6620615345412068617320656e646564",
															"id": 1220,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1869:28:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b94db3bafb45b115f2077d66813f25c7b38f1499c474a6791223d97591faa96a",
																"typeString": "literal_string \"swapping of aSEA has ended\""
															},
															"value": "swapping of aSEA has ended"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b94db3bafb45b115f2077d66813f25c7b38f1499c474a6791223d97591faa96a",
																"typeString": "literal_string \"swapping of aSEA has ended\""
															}
														],
														"id": 1215,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1829:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1221,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1829:69:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1222,
												"nodeType": "ExpressionStatement",
												"src": "1829:69:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1226,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1927:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1227,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1927:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"id": 1230,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1947:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_aSEAMigration_$1326",
																		"typeString": "contract aSEAMigration"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_aSEAMigration_$1326",
																		"typeString": "contract aSEAMigration"
																	}
																],
																"id": 1229,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1939:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1228,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1939:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1231,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1939:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1232,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "1954:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1223,
															"name": "aSEA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1103,
															"src": "1909:4:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 1225,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transferFrom",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 229,
														"src": "1909:17:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,address,uint256) external returns (bool)"
														}
													},
													"id": 1233,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1909:52:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1234,
												"nodeType": "ExpressionStatement",
												"src": "1909:52:7"
											},
											{
												"expression": {
													"id": 1246,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1235,
															"name": "senderInfo",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1109,
															"src": "1971:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 1238,
														"indexExpression": {
															"expression": {
																"id": 1236,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1982:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1237,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1982:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "1971:22:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"id": 1244,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1193,
																"src": "2023:6:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"expression": {
																"baseExpression": {
																	"id": 1239,
																	"name": "senderInfo",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1109,
																	"src": "1996:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 1242,
																"indexExpression": {
																	"expression": {
																		"id": 1240,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "2007:3:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 1241,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "2007:10:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "IndexAccess",
																"src": "1996:22:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1243,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "add",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 937,
															"src": "1996:26:7",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
																"typeString": "function (uint256,uint256) pure returns (uint256)"
															}
														},
														"id": 1245,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1996:34:7",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1971:59:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1247,
												"nodeType": "ExpressionStatement",
												"src": "1971:59:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1251,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2053:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1252,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2053:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1253,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1193,
															"src": "2065:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1248,
															"name": "SEA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "2040:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 1250,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 197,
														"src": "2040:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 1254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2040:32:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1255,
												"nodeType": "ExpressionStatement",
												"src": "2040:32:7"
											}
										]
									},
									"functionSelector": "8fd3ab80",
									"id": 1257,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1190,
											"modifierName": {
												"id": 1189,
												"name": "onlyInitialized",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1118,
												"src": "1614:15:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "1614:15:7"
										}
									],
									"name": "migrate",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1188,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1602:2:7"
									},
									"returnParameters": {
										"id": 1191,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1630:0:7"
									},
									"scope": 1326,
									"src": "1586:493:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1288,
										"nodeType": "Block",
										"src": "2471:222:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1266,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 1263,
																	"name": "block",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967292,
																	"src": "2502:5:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_block",
																		"typeString": "block"
																	}
																},
																"id": 1264,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "timestamp",
																"nodeType": "MemberAccess",
																"src": "2502:15:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1265,
																"name": "endTimestamp",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1093,
																"src": "2520:12:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2502:30:7",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "7377617070696e67206f66206153454120686173206e6f7420656e646564",
															"id": 1267,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2546:32:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_167bdf4db233099398a4e75df0cce134477a0cfaa0ab32a39d6a2c020158c29c",
																"typeString": "literal_string \"swapping of aSEA has not ended\""
															},
															"value": "swapping of aSEA has not ended"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_167bdf4db233099398a4e75df0cce134477a0cfaa0ab32a39d6a2c020158c29c",
																"typeString": "literal_string \"swapping of aSEA has not ended\""
															}
														],
														"id": 1262,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2481:7:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1268,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2481:107:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1269,
												"nodeType": "ExpressionStatement",
												"src": "2481:107:7"
											},
											{
												"assignments": [
													1271
												],
												"declarations": [
													{
														"constant": false,
														"id": 1271,
														"mutability": "mutable",
														"name": "amount",
														"nodeType": "VariableDeclaration",
														"scope": 1288,
														"src": "2598:14:7",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1270,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2598:7:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1279,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 1276,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "2637:4:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_aSEAMigration_$1326",
																		"typeString": "contract aSEAMigration"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_aSEAMigration_$1326",
																		"typeString": "contract aSEAMigration"
																	}
																],
																"id": 1275,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2629:7:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1274,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2629:7:7",
																	"typeDescriptions": {}
																}
															},
															"id": 1277,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2629:13:7",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 1272,
															"name": "SEA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "2615:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 1273,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "balanceOf",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 187,
														"src": "2615:13:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address) view external returns (uint256)"
														}
													},
													"id": 1278,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2615:28:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2598:45:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1283,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "2667:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1284,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "2667:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1285,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1271,
															"src": "2679:6:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 1280,
															"name": "SEA",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1100,
															"src": "2654:3:7",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20Upgradeable_$248",
																"typeString": "contract IERC20Upgradeable"
															}
														},
														"id": 1282,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 197,
														"src": "2654:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
															"typeString": "function (address,uint256) external returns (bool)"
														}
													},
													"id": 1286,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2654:32:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1287,
												"nodeType": "ExpressionStatement",
												"src": "2654:32:7"
											}
										]
									},
									"functionSelector": "3ccfd60b",
									"id": 1289,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1260,
											"modifierName": {
												"id": 1259,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "2461:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2461:9:7"
										}
									],
									"name": "withdraw",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1258,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2449:2:7"
									},
									"returnParameters": {
										"id": 1261,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2471:0:7"
									},
									"scope": 1326,
									"src": "2432:261:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1300,
										"nodeType": "Block",
										"src": "2756:35:7",
										"statements": [
											{
												"expression": {
													"id": 1298,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1296,
														"name": "endTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1093,
														"src": "2766:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1297,
														"name": "val",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1291,
														"src": "2781:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2766:18:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1299,
												"nodeType": "ExpressionStatement",
												"src": "2766:18:7"
											}
										]
									},
									"functionSelector": "7df6a6c8",
									"id": 1301,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1294,
											"modifierName": {
												"id": 1293,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "2746:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2746:9:7"
										}
									],
									"name": "setEndTimestamp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1292,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1291,
												"mutability": "mutable",
												"name": "val",
												"nodeType": "VariableDeclaration",
												"scope": 1301,
												"src": "2724:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1290,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2724:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2723:13:7"
									},
									"returnParameters": {
										"id": 1295,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2756:0:7"
									},
									"scope": 1326,
									"src": "2699:92:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1312,
										"nodeType": "Block",
										"src": "2856:37:7",
										"statements": [
											{
												"expression": {
													"id": 1310,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1308,
														"name": "startTimestamp",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1095,
														"src": "2866:14:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1309,
														"name": "val",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1303,
														"src": "2883:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2866:20:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1311,
												"nodeType": "ExpressionStatement",
												"src": "2866:20:7"
											}
										]
									},
									"functionSelector": "c44bef75",
									"id": 1313,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1306,
											"modifierName": {
												"id": 1305,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "2846:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2846:9:7"
										}
									],
									"name": "setStartTimestamp",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1304,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1303,
												"mutability": "mutable",
												"name": "val",
												"nodeType": "VariableDeclaration",
												"scope": 1313,
												"src": "2824:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1302,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2824:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2823:13:7"
									},
									"returnParameters": {
										"id": 1307,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2856:0:7"
									},
									"scope": 1326,
									"src": "2797:96:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"body": {
										"id": 1324,
										"nodeType": "Block",
										"src": "2950:29:7",
										"statements": [
											{
												"expression": {
													"id": 1322,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 1320,
														"name": "maxAmt",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1097,
														"src": "2960:6:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1321,
														"name": "val",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1315,
														"src": "2969:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2960:12:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 1323,
												"nodeType": "ExpressionStatement",
												"src": "2960:12:7"
											}
										]
									},
									"functionSelector": "5294385b",
									"id": 1325,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1318,
											"modifierName": {
												"id": 1317,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 63,
												"src": "2940:9:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "2940:9:7"
										}
									],
									"name": "setMaxAmt",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1316,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1315,
												"mutability": "mutable",
												"name": "val",
												"nodeType": "VariableDeclaration",
												"scope": 1325,
												"src": "2918:11:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1314,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2918:7:7",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2917:13:7"
									},
									"returnParameters": {
										"id": 1319,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2950:0:7"
									},
									"scope": 1326,
									"src": "2899:80:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1327,
							"src": "459:2522:7"
						}
					],
					"src": "32:2950:7"
				},
				"id": 7
			}
		}
	}
}